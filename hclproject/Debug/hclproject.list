
hclproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c188  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e1418  0800c318  0800c318  0000d318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080ed730  080ed730  000ef1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080ed730  080ed730  000ee730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080ed738  080ed738  000ef1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080ed738  080ed738  000ee738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080ed73c  080ed73c  000ee73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080ed740  000ef000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000ef1d4  2**0
                  CONTENTS
 10 .bss          00006bd0  200001d4  200001d4  000ef1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006da4  20006da4  000ef1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000ef1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df69  00000000  00000000  000ef204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d0  00000000  00000000  000fd16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000ffb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  00100758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023082  00000000  00000000  0010108f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a76  00000000  00000000  00124111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad16  00000000  00000000  00136b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000088  00000000  00000000  0020189d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042ec  00000000  00000000  00201928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00205c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c300 	.word	0x0800c300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c300 	.word	0x0800c300

080001d0 <arm_cmplx_mag_f32>:
 80001d0:	b480      	push	{r7}
 80001d2:	b093      	sub	sp, #76	@ 0x4c
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	089b      	lsrs	r3, r3, #2
 80001e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80001e2:	e0ba      	b.n	800035a <arm_cmplx_mag_f32+0x18a>
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	1d1a      	adds	r2, r3, #4
 80001e8:	60fa      	str	r2, [r7, #12]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	1d1a      	adds	r2, r3, #4
 80001f2:	60fa      	str	r2, [r7, #12]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80001f8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80001fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000200:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000204:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	1d1a      	adds	r2, r3, #4
 8000210:	60ba      	str	r2, [r7, #8]
 8000212:	edc7 7a08 	vstr	s15, [r7, #32]
 8000216:	61fb      	str	r3, [r7, #28]
 8000218:	edd7 7a08 	vldr	s15, [r7, #32]
 800021c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000224:	db07      	blt.n	8000236 <arm_cmplx_mag_f32+0x66>
 8000226:	edd7 7a08 	vldr	s15, [r7, #32]
 800022a:	eef1 7ae7 	vsqrt.f32	s15, s15
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	edc3 7a00 	vstr	s15, [r3]
 8000234:	e004      	b.n	8000240 <arm_cmplx_mag_f32+0x70>
 8000236:	69fb      	ldr	r3, [r7, #28]
 8000238:	f04f 0200 	mov.w	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	bf00      	nop
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	1d1a      	adds	r2, r3, #4
 8000244:	60fa      	str	r2, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	643b      	str	r3, [r7, #64]	@ 0x40
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	1d1a      	adds	r2, r3, #4
 800024e:	60fa      	str	r2, [r7, #12]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000254:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000258:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800025c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000260:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	1d1a      	adds	r2, r3, #4
 800026c:	60ba      	str	r2, [r7, #8]
 800026e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8000272:	627b      	str	r3, [r7, #36]	@ 0x24
 8000274:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000280:	db07      	blt.n	8000292 <arm_cmplx_mag_f32+0xc2>
 8000282:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000286:	eef1 7ae7 	vsqrt.f32	s15, s15
 800028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800028c:	edc3 7a00 	vstr	s15, [r3]
 8000290:	e004      	b.n	800029c <arm_cmplx_mag_f32+0xcc>
 8000292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000294:	f04f 0200 	mov.w	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	bf00      	nop
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1d1a      	adds	r2, r3, #4
 80002a0:	60fa      	str	r2, [r7, #12]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	1d1a      	adds	r2, r3, #4
 80002aa:	60fa      	str	r2, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80002b0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80002b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80002b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80002bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80002c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	1d1a      	adds	r2, r3, #4
 80002c8:	60ba      	str	r2, [r7, #8]
 80002ca:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80002ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002d0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80002d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002dc:	db07      	blt.n	80002ee <arm_cmplx_mag_f32+0x11e>
 80002de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80002e2:	eef1 7ae7 	vsqrt.f32	s15, s15
 80002e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002e8:	edc3 7a00 	vstr	s15, [r3]
 80002ec:	e004      	b.n	80002f8 <arm_cmplx_mag_f32+0x128>
 80002ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002f0:	f04f 0200 	mov.w	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	bf00      	nop
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	1d1a      	adds	r2, r3, #4
 80002fc:	60fa      	str	r2, [r7, #12]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	643b      	str	r3, [r7, #64]	@ 0x40
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	1d1a      	adds	r2, r3, #4
 8000306:	60fa      	str	r2, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800030c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000310:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000314:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000318:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800031c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1d1a      	adds	r2, r3, #4
 8000324:	60ba      	str	r2, [r7, #8]
 8000326:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 800032a:	637b      	str	r3, [r7, #52]	@ 0x34
 800032c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000338:	db07      	blt.n	800034a <arm_cmplx_mag_f32+0x17a>
 800033a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800033e:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000344:	edc3 7a00 	vstr	s15, [r3]
 8000348:	e004      	b.n	8000354 <arm_cmplx_mag_f32+0x184>
 800034a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800034c:	f04f 0200 	mov.w	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	bf00      	nop
 8000354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000356:	3b01      	subs	r3, #1
 8000358:	647b      	str	r3, [r7, #68]	@ 0x44
 800035a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800035c:	2b00      	cmp	r3, #0
 800035e:	f47f af41 	bne.w	80001e4 <arm_cmplx_mag_f32+0x14>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f003 0303 	and.w	r3, r3, #3
 8000368:	647b      	str	r3, [r7, #68]	@ 0x44
 800036a:	e030      	b.n	80003ce <arm_cmplx_mag_f32+0x1fe>
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	1d1a      	adds	r2, r3, #4
 8000370:	60fa      	str	r2, [r7, #12]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	643b      	str	r3, [r7, #64]	@ 0x40
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	1d1a      	adds	r2, r3, #4
 800037a:	60fa      	str	r2, [r7, #12]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000380:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000384:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000388:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800038c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1d1a      	adds	r2, r3, #4
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	edc7 7a06 	vstr	s15, [r7, #24]
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80003a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ac:	db07      	blt.n	80003be <arm_cmplx_mag_f32+0x1ee>
 80003ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80003b2:	eef1 7ae7 	vsqrt.f32	s15, s15
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	edc3 7a00 	vstr	s15, [r3]
 80003bc:	e004      	b.n	80003c8 <arm_cmplx_mag_f32+0x1f8>
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	f04f 0200 	mov.w	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	bf00      	nop
 80003c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003ca:	3b01      	subs	r3, #1
 80003cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80003ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d1cb      	bne.n	800036c <arm_cmplx_mag_f32+0x19c>
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	374c      	adds	r7, #76	@ 0x4c
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <arm_fir_f32>:
 80003e2:	b480      	push	{r7}
 80003e4:	b09f      	sub	sp, #124	@ 0x7c
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	61fb      	str	r3, [r7, #28]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	61bb      	str	r3, [r7, #24]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	69bb      	ldr	r3, [r7, #24]
 8000408:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800040c:	3b01      	subs	r3, #1
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	4413      	add	r3, r2
 8000412:	673b      	str	r3, [r7, #112]	@ 0x70
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	08db      	lsrs	r3, r3, #3
 8000418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800041a:	f000 bc8b 	b.w	8000d34 <arm_fir_f32+0x952>
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	1d13      	adds	r3, r2, #4
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000426:	1d19      	adds	r1, r3, #4
 8000428:	6739      	str	r1, [r7, #112]	@ 0x70
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	1d13      	adds	r3, r2, #4
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000436:	1d19      	adds	r1, r3, #4
 8000438:	6739      	str	r1, [r7, #112]	@ 0x70
 800043a:	6812      	ldr	r2, [r2, #0]
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	1d13      	adds	r3, r2, #4
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000446:	1d19      	adds	r1, r3, #4
 8000448:	6739      	str	r1, [r7, #112]	@ 0x70
 800044a:	6812      	ldr	r2, [r2, #0]
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	1d13      	adds	r3, r2, #4
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000456:	1d19      	adds	r1, r3, #4
 8000458:	6739      	str	r1, [r7, #112]	@ 0x70
 800045a:	6812      	ldr	r2, [r2, #0]
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	f04f 0300 	mov.w	r3, #0
 8000462:	667b      	str	r3, [r7, #100]	@ 0x64
 8000464:	f04f 0300 	mov.w	r3, #0
 8000468:	657b      	str	r3, [r7, #84]	@ 0x54
 800046a:	f04f 0300 	mov.w	r3, #0
 800046e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000476:	f04f 0300 	mov.w	r3, #0
 800047a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	647b      	str	r3, [r7, #68]	@ 0x44
 8000482:	f04f 0300 	mov.w	r3, #0
 8000486:	643b      	str	r3, [r7, #64]	@ 0x40
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800048e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000496:	68ba      	ldr	r2, [r7, #8]
 8000498:	1d13      	adds	r3, r2, #4
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800049e:	1d19      	adds	r1, r3, #4
 80004a0:	6739      	str	r1, [r7, #112]	@ 0x70
 80004a2:	6812      	ldr	r2, [r2, #0]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	1d13      	adds	r3, r2, #4
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80004ae:	1d19      	adds	r1, r3, #4
 80004b0:	6739      	str	r1, [r7, #112]	@ 0x70
 80004b2:	6812      	ldr	r2, [r2, #0]
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	1d13      	adds	r3, r2, #4
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80004be:	1d19      	adds	r1, r3, #4
 80004c0:	6739      	str	r1, [r7, #112]	@ 0x70
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	68ba      	ldr	r2, [r7, #8]
 80004c8:	1d13      	adds	r3, r2, #4
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80004ce:	1d19      	adds	r1, r3, #4
 80004d0:	6739      	str	r1, [r7, #112]	@ 0x70
 80004d2:	6812      	ldr	r2, [r2, #0]
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004d8:	1d1a      	adds	r2, r3, #4
 80004da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80004e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004e2:	1d1a      	adds	r2, r3, #4
 80004e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80004ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004ec:	1d1a      	adds	r2, r3, #4
 80004ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80004f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80004f6:	1d1a      	adds	r2, r3, #4
 80004f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000500:	1d1a      	adds	r2, r3, #4
 8000502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800050a:	1d1a      	adds	r2, r3, #4
 800050c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
 8000512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000514:	1d1a      	adds	r2, r3, #4
 8000516:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	623b      	str	r3, [r7, #32]
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	08db      	lsrs	r3, r3, #3
 8000520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000522:	e352      	b.n	8000bca <arm_fir_f32+0x7e8>
 8000524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000526:	1d1a      	adds	r2, r3, #4
 8000528:	66ba      	str	r2, [r7, #104]	@ 0x68
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000530:	1d1a      	adds	r2, r3, #4
 8000532:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800053c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000544:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800054c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000550:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000554:	edd7 7a05 	vldr	s15, [r7, #20]
 8000558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800055c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000564:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8000568:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800056c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000574:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800057c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8000580:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000584:	edd7 7a05 	vldr	s15, [r7, #20]
 8000588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800058c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000594:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8000598:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800059c:	edd7 7a05 	vldr	s15, [r7, #20]
 80005a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005a4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80005a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ac:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80005b0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80005b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80005b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005bc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80005c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80005c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80005cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80005d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80005d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005dc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80005e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80005e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80005e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80005f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80005f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80005fa:	1d1a      	adds	r2, r3, #4
 80005fc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000604:	1d1a      	adds	r2, r3, #4
 8000606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800060c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000610:	edd7 7a05 	vldr	s15, [r7, #20]
 8000614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000618:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800061c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000620:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000624:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000628:	edd7 7a05 	vldr	s15, [r7, #20]
 800062c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000630:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000638:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800063c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000640:	edd7 7a05 	vldr	s15, [r7, #20]
 8000644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000648:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800064c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000650:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8000654:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000660:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000668:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 800066c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000670:	edd7 7a05 	vldr	s15, [r7, #20]
 8000674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000678:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800067c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000680:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8000684:	ed97 7a08 	vldr	s14, [r7, #32]
 8000688:	edd7 7a05 	vldr	s15, [r7, #20]
 800068c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000690:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000698:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800069c:	ed97 7a04 	vldr	s14, [r7, #16]
 80006a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80006ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80006b4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80006b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80006bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80006c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80006cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006ce:	1d1a      	adds	r2, r3, #4
 80006d0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006d8:	1d1a      	adds	r2, r3, #4
 80006da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
 80006e0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80006e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ec:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80006f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f4:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 80006f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80006fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000704:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8000710:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000714:	edd7 7a05 	vldr	s15, [r7, #20]
 8000718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800071c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000724:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8000728:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800072c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000734:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800073c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8000740:	ed97 7a08 	vldr	s14, [r7, #32]
 8000744:	edd7 7a05 	vldr	s15, [r7, #20]
 8000748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000754:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8000758:	ed97 7a04 	vldr	s14, [r7, #16]
 800075c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000764:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000770:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000774:	edd7 7a05 	vldr	s15, [r7, #20]
 8000778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800077c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000784:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8000788:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800078c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000794:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800079c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80007a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80007a2:	1d1a      	adds	r2, r3, #4
 80007a4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007ac:	1d1a      	adds	r2, r3, #4
 80007ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80007b4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80007b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80007bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80007c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 80007cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80007d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80007d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80007dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80007e4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80007e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80007f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80007fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8000800:	edd7 7a05 	vldr	s15, [r7, #20]
 8000804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000808:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800080c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000810:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8000814:	ed97 7a04 	vldr	s14, [r7, #16]
 8000818:	edd7 7a05 	vldr	s15, [r7, #20]
 800081c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000820:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000828:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800082c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000830:	edd7 7a05 	vldr	s15, [r7, #20]
 8000834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000838:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800083c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000840:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000844:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000848:	edd7 7a05 	vldr	s15, [r7, #20]
 800084c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000850:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000858:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 800085c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000860:	edd7 7a05 	vldr	s15, [r7, #20]
 8000864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000868:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800086c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000870:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000876:	1d1a      	adds	r2, r3, #4
 8000878:	66ba      	str	r2, [r7, #104]	@ 0x68
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000880:	1d1a      	adds	r2, r3, #4
 8000882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000888:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800088c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000894:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 80008a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80008a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80008a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ac:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80008b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80008b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80008bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80008c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008c4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80008c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008cc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80008d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80008d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80008d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008dc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80008e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 80008e8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80008ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80008f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80008f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8000900:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000904:	edd7 7a05 	vldr	s15, [r7, #20]
 8000908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000914:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000918:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800091c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000924:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8000930:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000934:	edd7 7a05 	vldr	s15, [r7, #20]
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000944:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800094a:	1d1a      	adds	r2, r3, #4
 800094c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000954:	1d1a      	adds	r2, r3, #4
 8000956:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800095c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000960:	edd7 7a05 	vldr	s15, [r7, #20]
 8000964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000968:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800096c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000970:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000974:	ed97 7a08 	vldr	s14, [r7, #32]
 8000978:	edd7 7a05 	vldr	s15, [r7, #20]
 800097c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000980:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000988:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800098c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000990:	edd7 7a05 	vldr	s15, [r7, #20]
 8000994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000998:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800099c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80009a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80009a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80009b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 80009bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80009c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80009c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80009cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80009d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80009d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80009dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80009e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80009ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80009f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80009f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80009fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a00:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8000a04:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a10:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a18:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a1e:	1d1a      	adds	r2, r3, #4
 8000a20:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a28:	1d1a      	adds	r2, r3, #4
 8000a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a30:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a34:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a3c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a44:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000a48:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a54:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a5c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8000a60:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a6c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a74:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8000a78:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a84:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a8c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8000a90:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a9c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aa4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8000aa8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000abc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000ac0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000acc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8000ad8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aec:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000af2:	1d1a      	adds	r2, r3, #4
 8000af4:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000afc:	1d1a      	adds	r2, r3, #4
 8000afe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	623b      	str	r3, [r7, #32]
 8000b04:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b10:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b18:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000b1c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000b20:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b28:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b30:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8000b34:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b40:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b48:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8000b4c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b58:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b60:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8000b64:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b70:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b78:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8000b7c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b88:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b90:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000b94:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ba0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8000bac:	ed97 7a08 	vldr	s14, [r7, #32]
 8000bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f aca9 	bne.w	8000524 <arm_fir_f32+0x142>
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000bda:	e07a      	b.n	8000cd2 <arm_fir_f32+0x8f0>
 8000bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000bde:	1d1a      	adds	r2, r3, #4
 8000be0:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000be8:	1d1a      	adds	r2, r3, #4
 8000bea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000bf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bfc:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c04:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000c08:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c14:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8000c20:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c34:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8000c38:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000c3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c4c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8000c50:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c64:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8000c68:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c74:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000c80:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c84:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c94:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8000c98:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cac:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8000cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d181      	bne.n	8000bdc <arm_fir_f32+0x7fa>
 8000cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cda:	3320      	adds	r3, #32
 8000cdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	1d1a      	adds	r2, r3, #4
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	1d1a      	adds	r2, r3, #4
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1d1a      	adds	r2, r3, #4
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1d1a      	adds	r2, r3, #4
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	1d1a      	adds	r2, r3, #4
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1d1a      	adds	r2, r3, #4
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d30:	3b01      	subs	r3, #1
 8000d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f47f ab71 	bne.w	800041e <arm_fir_f32+0x3c>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d44:	e034      	b.n	8000db0 <arm_fir_f32+0x9ce>
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	1d13      	adds	r3, r2, #4
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d4e:	1d19      	adds	r1, r3, #4
 8000d50:	6739      	str	r1, [r7, #112]	@ 0x70
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	f04f 0300 	mov.w	r3, #0
 8000d5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d68:	e014      	b.n	8000d94 <arm_fir_f32+0x9b2>
 8000d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d6c:	1d1a      	adds	r2, r3, #4
 8000d6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000d70:	ed93 7a00 	vldr	s14, [r3]
 8000d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d76:	1d1a      	adds	r2, r3, #4
 8000d78:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d90:	3b01      	subs	r3, #1
 8000d92:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1e7      	bne.n	8000d6a <arm_fir_f32+0x988>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	1d1a      	adds	r2, r3, #4
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000da6:	3304      	adds	r3, #4
 8000da8:	677b      	str	r3, [r7, #116]	@ 0x74
 8000daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dac:	3b01      	subs	r3, #1
 8000dae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1c7      	bne.n	8000d46 <arm_fir_f32+0x964>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	673b      	str	r3, [r7, #112]	@ 0x70
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000dc4:	e022      	b.n	8000e0c <arm_fir_f32+0xa2a>
 8000dc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000dc8:	1d13      	adds	r3, r2, #4
 8000dca:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000dce:	1d19      	adds	r1, r3, #4
 8000dd0:	6739      	str	r1, [r7, #112]	@ 0x70
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000dd8:	1d13      	adds	r3, r2, #4
 8000dda:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000dde:	1d19      	adds	r1, r3, #4
 8000de0:	6739      	str	r1, [r7, #112]	@ 0x70
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000de8:	1d13      	adds	r3, r2, #4
 8000dea:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000dee:	1d19      	adds	r1, r3, #4
 8000df0:	6739      	str	r1, [r7, #112]	@ 0x70
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000df8:	1d13      	adds	r3, r2, #4
 8000dfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000dfe:	1d19      	adds	r1, r3, #4
 8000e00:	6739      	str	r1, [r7, #112]	@ 0x70
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1d9      	bne.n	8000dc6 <arm_fir_f32+0x9e4>
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e1c:	e00a      	b.n	8000e34 <arm_fir_f32+0xa52>
 8000e1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000e20:	1d13      	adds	r3, r2, #4
 8000e22:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e26:	1d19      	adds	r1, r3, #4
 8000e28:	6739      	str	r1, [r7, #112]	@ 0x70
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e30:	3b01      	subs	r3, #1
 8000e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f1      	bne.n	8000e1e <arm_fir_f32+0xa3c>
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	377c      	adds	r7, #124	@ 0x7c
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <arm_fir_init_f32>:
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	460b      	mov	r3, r1
 8000e56:	817b      	strh	r3, [r7, #10]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	897a      	ldrh	r2, [r7, #10]
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	897a      	ldrh	r2, [r7, #10]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	f008 fc41 	bl	80096fa <memset>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <stage_rfft_f32>:
 8000e86:	b480      	push	{r7}
 8000e88:	b095      	sub	sp, #84	@ 0x54
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ec6:	1d1a      	adds	r2, r3, #4
 8000ec8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ed0:	1d1a      	adds	r2, r3, #4
 8000ed2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ed8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000edc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000ee8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000eec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef4:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ef8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000efc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1d1a      	adds	r2, r3, #4
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f12:	edc3 7a00 	vstr	s15, [r3]
 8000f16:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000f1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	1d1a      	adds	r2, r3, #4
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f30:	edc3 7a00 	vstr	s15, [r3]
 8000f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f40:	3308      	adds	r3, #8
 8000f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f46:	3304      	adds	r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f6c:	1d1a      	adds	r2, r3, #4
 8000f6e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f74:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000f84:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000f88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f90:	edc7 7a08 	vstr	s15, [r7, #32]
 8000f94:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fa4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fa8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a06 	vstr	s15, [r7, #24]
 8000fb4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000fb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000fc4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd0:	edc7 7a04 	vstr	s15, [r7, #16]
 8000fd4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000fd8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1d1a      	adds	r2, r3, #4
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	edc3 7a00 	vstr	s15, [r3]
 8001002:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001006:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800100a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800100e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001016:	edd7 7a05 	vldr	s15, [r7, #20]
 800101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	1d1a      	adds	r2, r3, #4
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102c:	edc3 7a00 	vstr	s15, [r3]
 8001030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001032:	3308      	adds	r3, #8
 8001034:	647b      	str	r3, [r7, #68]	@ 0x44
 8001036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001038:	3b08      	subs	r3, #8
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
 800103c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800103e:	3b01      	subs	r3, #1
 8001040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001044:	2b00      	cmp	r3, #0
 8001046:	f73f af7d 	bgt.w	8000f44 <stage_rfft_f32+0xbe>
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3754      	adds	r7, #84	@ 0x54
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <merge_rfft_f32>:
 8001058:	b480      	push	{r7}
 800105a:	b095      	sub	sp, #84	@ 0x54
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	647b      	str	r3, [r7, #68]	@ 0x44
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	643b      	str	r3, [r7, #64]	@ 0x40
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800107a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001082:	3304      	adds	r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800108a:	3308      	adds	r3, #8
 800108c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800108e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001092:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	1d1a      	adds	r2, r3, #4
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a8:	edc3 7a00 	vstr	s15, [r3]
 80010ac:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80010b0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c6:	edc3 7a00 	vstr	s15, [r3]
 80010ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80010d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010d6:	3308      	adds	r3, #8
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80010da:	e07e      	b.n	80011da <merge_rfft_f32+0x182>
 80010dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010de:	3304      	adds	r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80010e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010f2:	3304      	adds	r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010fa:	1d1a      	adds	r2, r3, #4
 80010fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001104:	1d1a      	adds	r2, r3, #4
 8001106:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800110c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001110:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800111c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001120:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc7 7a08 	vstr	s15, [r7, #32]
 800112c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001130:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	edc7 7a07 	vstr	s15, [r7, #28]
 800113c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001140:	edd7 7a08 	vldr	s15, [r7, #32]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a06 	vstr	s15, [r7, #24]
 800114c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001150:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	edc7 7a05 	vstr	s15, [r7, #20]
 800115c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001160:	edd7 7a08 	vldr	s15, [r7, #32]
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	edc7 7a04 	vstr	s15, [r7, #16]
 800116c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001170:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001178:	edd7 7a07 	vldr	s15, [r7, #28]
 800117c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001180:	edd7 7a06 	vldr	s15, [r7, #24]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	1d1a      	adds	r2, r3, #4
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001196:	edc3 7a00 	vstr	s15, [r3]
 800119a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800119e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	1d1a      	adds	r2, r3, #4
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	edc3 7a00 	vstr	s15, [r3]
 80011c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ca:	3308      	adds	r3, #8
 80011cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80011ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011d0:	3b08      	subs	r3, #8
 80011d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80011d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011d6:	3b01      	subs	r3, #1
 80011d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f73f af7d 	bgt.w	80010dc <merge_rfft_f32+0x84>
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3754      	adds	r7, #84	@ 0x54
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <arm_rfft_fast_f32>:
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	70fb      	strb	r3, [r7, #3]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <arm_rfft_fast_f32+0x30>
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff ff23 	bl	8001058 <merge_rfft_f32>
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	2301      	movs	r3, #1
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f001 fa0d 	bl	8002638 <arm_cfft_f32>
 800121e:	e00a      	b.n	8001236 <arm_rfft_fast_f32+0x46>
 8001220:	78fa      	ldrb	r2, [r7, #3]
 8001222:	2301      	movs	r3, #1
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f001 fa06 	bl	8002638 <arm_cfft_f32>
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff fe28 	bl	8000e86 <stage_rfft_f32>
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <arm_rfft_fast_init_32_f32>:
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <arm_rfft_fast_init_32_f32+0x14>
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e013      	b.n	800127c <arm_rfft_fast_init_32_f32+0x3c>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fbc2 	bl	80029e0 <arm_cfft_init_16_f32>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <arm_rfft_fast_init_32_f32+0x2e>
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	e006      	b.n	800127c <arm_rfft_fast_init_32_f32+0x3c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2220      	movs	r2, #32
 8001272:	821a      	strh	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a03      	ldr	r2, [pc, #12]	@ (8001284 <arm_rfft_fast_init_32_f32+0x44>)
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	2300      	movs	r3, #0
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0806b930 	.word	0x0806b930

08001288 <arm_rfft_fast_init_64_f32>:
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <arm_rfft_fast_init_64_f32+0x14>
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e013      	b.n	80012c4 <arm_rfft_fast_init_64_f32+0x3c>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb7c 	bl	800299c <arm_cfft_init_32_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <arm_rfft_fast_init_64_f32+0x2e>
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	e006      	b.n	80012c4 <arm_rfft_fast_init_64_f32+0x3c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2240      	movs	r2, #64	@ 0x40
 80012ba:	821a      	strh	r2, [r3, #16]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a03      	ldr	r2, [pc, #12]	@ (80012cc <arm_rfft_fast_init_64_f32+0x44>)
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	2300      	movs	r3, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	0806b9b0 	.word	0x0806b9b0

080012d0 <arm_rfft_fast_init_128_f32>:
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <arm_rfft_fast_init_128_f32+0x14>
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e013      	b.n	800130c <arm_rfft_fast_init_128_f32+0x3c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fb36 	bl	8002958 <arm_cfft_init_64_f32>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <arm_rfft_fast_init_128_f32+0x2e>
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	e006      	b.n	800130c <arm_rfft_fast_init_128_f32+0x3c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	821a      	strh	r2, [r3, #16]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a03      	ldr	r2, [pc, #12]	@ (8001314 <arm_rfft_fast_init_128_f32+0x44>)
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	2300      	movs	r3, #0
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0806bab0 	.word	0x0806bab0

08001318 <arm_rfft_fast_init_256_f32>:
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <arm_rfft_fast_init_256_f32+0x14>
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e014      	b.n	8001356 <arm_rfft_fast_init_256_f32+0x3e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f001 faf0 	bl	8002914 <arm_cfft_init_128_f32>
 8001334:	4603      	mov	r3, r0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <arm_rfft_fast_init_256_f32+0x2e>
 8001340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001344:	e007      	b.n	8001356 <arm_rfft_fast_init_256_f32+0x3e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134c:	821a      	strh	r2, [r3, #16]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a03      	ldr	r2, [pc, #12]	@ (8001360 <arm_rfft_fast_init_256_f32+0x48>)
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	2300      	movs	r3, #0
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0806bcb0 	.word	0x0806bcb0

08001364 <arm_rfft_fast_init_512_f32>:
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <arm_rfft_fast_init_512_f32+0x14>
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e014      	b.n	80013a2 <arm_rfft_fast_init_512_f32+0x3e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f001 faa6 	bl	80028cc <arm_cfft_init_256_f32>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <arm_rfft_fast_init_512_f32+0x2e>
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	e007      	b.n	80013a2 <arm_rfft_fast_init_512_f32+0x3e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001398:	821a      	strh	r2, [r3, #16]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <arm_rfft_fast_init_512_f32+0x48>)
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	2300      	movs	r3, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0806c0b0 	.word	0x0806c0b0

080013b0 <arm_rfft_fast_init_1024_f32>:
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <arm_rfft_fast_init_1024_f32+0x14>
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e014      	b.n	80013ee <arm_rfft_fast_init_1024_f32+0x3e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fa5c 	bl	8002884 <arm_cfft_init_512_f32>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <arm_rfft_fast_init_1024_f32+0x2e>
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	e007      	b.n	80013ee <arm_rfft_fast_init_1024_f32+0x3e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e4:	821a      	strh	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a03      	ldr	r2, [pc, #12]	@ (80013f8 <arm_rfft_fast_init_1024_f32+0x48>)
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	2300      	movs	r3, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0806c8b0 	.word	0x0806c8b0

080013fc <arm_rfft_fast_init_2048_f32>:
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <arm_rfft_fast_init_2048_f32+0x14>
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e014      	b.n	800143a <arm_rfft_fast_init_2048_f32+0x3e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fa12 	bl	800283c <arm_cfft_init_1024_f32>
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <arm_rfft_fast_init_2048_f32+0x2e>
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001428:	e007      	b.n	800143a <arm_rfft_fast_init_2048_f32+0x3e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001430:	821a      	strh	r2, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <arm_rfft_fast_init_2048_f32+0x48>)
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	2300      	movs	r3, #0
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0806d8b0 	.word	0x0806d8b0

08001448 <arm_rfft_fast_init_4096_f32>:
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <arm_rfft_fast_init_4096_f32+0x14>
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e014      	b.n	8001486 <arm_rfft_fast_init_4096_f32+0x3e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f001 f9c8 	bl	80027f4 <arm_cfft_init_2048_f32>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <arm_rfft_fast_init_4096_f32+0x2e>
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	e007      	b.n	8001486 <arm_rfft_fast_init_4096_f32+0x3e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800147c:	821a      	strh	r2, [r3, #16]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <arm_rfft_fast_init_4096_f32+0x48>)
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	2300      	movs	r3, #0
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	0806f8b0 	.word	0x0806f8b0

08001494 <arm_rfft_fast_init_f32>:
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014a6:	d023      	beq.n	80014f0 <arm_rfft_fast_init_f32+0x5c>
 80014a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014ac:	dc50      	bgt.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014b2:	d023      	beq.n	80014fc <arm_rfft_fast_init_f32+0x68>
 80014b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014b8:	dc4a      	bgt.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014be:	d023      	beq.n	8001508 <arm_rfft_fast_init_f32+0x74>
 80014c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c4:	dc44      	bgt.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ca:	d023      	beq.n	8001514 <arm_rfft_fast_init_f32+0x80>
 80014cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d0:	dc3e      	bgt.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014d6:	d023      	beq.n	8001520 <arm_rfft_fast_init_f32+0x8c>
 80014d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014dc:	dc38      	bgt.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014de:	2b80      	cmp	r3, #128	@ 0x80
 80014e0:	d024      	beq.n	800152c <arm_rfft_fast_init_f32+0x98>
 80014e2:	2b80      	cmp	r3, #128	@ 0x80
 80014e4:	dc34      	bgt.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d02c      	beq.n	8001544 <arm_rfft_fast_init_f32+0xb0>
 80014ea:	2b40      	cmp	r3, #64	@ 0x40
 80014ec:	d024      	beq.n	8001538 <arm_rfft_fast_init_f32+0xa4>
 80014ee:	e02f      	b.n	8001550 <arm_rfft_fast_init_f32+0xbc>
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffa9 	bl	8001448 <arm_rfft_fast_init_4096_f32>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e02c      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff7d 	bl	80013fc <arm_rfft_fast_init_2048_f32>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e026      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff51 	bl	80013b0 <arm_rfft_fast_init_1024_f32>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e020      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff25 	bl	8001364 <arm_rfft_fast_init_512_f32>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e01a      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fef9 	bl	8001318 <arm_rfft_fast_init_256_f32>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e014      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fecf 	bl	80012d0 <arm_rfft_fast_init_128_f32>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e00e      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fea5 	bl	8001288 <arm_rfft_fast_init_64_f32>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e008      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fe7b 	bl	8001240 <arm_rfft_fast_init_32_f32>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e002      	b.n	8001556 <arm_rfft_fast_init_f32+0xc2>
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	e001      	b.n	800155a <arm_rfft_fast_init_f32+0xc6>
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop

08001564 <arm_hanning_f32>:
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001578:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001580:	edc7 7a04 	vstr	s15, [r7, #16]
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e027      	b.n	80015da <arm_hanning_f32+0x76>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80015ec <arm_hanning_f32+0x88>
 8001598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159c:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	edc7 7a03 	vstr	s15, [r7, #12]
 80015a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80015ac:	f00a f970 	bl	800b890 <cosf>
 80015b0:	eef0 7a40 	vmov.f32	s15, s0
 80015b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c4:	edc7 7a03 	vstr	s15, [r7, #12]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3d3      	bcc.n	800158a <arm_hanning_f32+0x26>
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40490fdb 	.word	0x40490fdb

080015f0 <arm_cfft_radix8by2_f32>:
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0a0      	sub	sp, #128	@ 0x80
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	677b      	str	r3, [r7, #116]	@ 0x74
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	667b      	str	r3, [r7, #100]	@ 0x64
 8001614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001616:	663b      	str	r3, [r7, #96]	@ 0x60
 8001618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800161e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	4413      	add	r3, r2
 8001626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800162e:	4413      	add	r3, r2
 8001630:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001638:	e1b6      	b.n	80019a8 <arm_cfft_radix8by2_f32+0x3b8>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	643b      	str	r3, [r7, #64]	@ 0x40
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
 8001652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800165e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
 8001664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
 800166a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
 8001682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800169e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	1d1a      	adds	r2, r3, #4
 80016a6:	603a      	str	r2, [r7, #0]
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	edc3 7a00 	vstr	s15, [r3]
 80016b0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80016b4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	1d1a      	adds	r2, r3, #4
 80016bc:	603a      	str	r2, [r7, #0]
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	edc3 7a00 	vstr	s15, [r3]
 80016c6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80016ca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	1d1a      	adds	r2, r3, #4
 80016d2:	603a      	str	r2, [r7, #0]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	edc3 7a00 	vstr	s15, [r3]
 80016dc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80016e0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	1d1a      	adds	r2, r3, #4
 80016e8:	603a      	str	r2, [r7, #0]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc3 7a00 	vstr	s15, [r3]
 80016f2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80016f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80016fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8001702:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001706:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001712:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001716:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800171a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001722:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001726:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800172a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001732:	ed97 7a06 	vldr	s14, [r7, #24]
 8001736:	edd7 7a02 	vldr	s15, [r7, #8]
 800173a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800173c:	1d1a      	adds	r2, r3, #4
 800173e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc3 7a00 	vstr	s15, [r3]
 8001748:	ed97 7a07 	vldr	s14, [r7, #28]
 800174c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001752:	1d1a      	adds	r2, r3, #4
 8001754:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	edc3 7a00 	vstr	s15, [r3]
 800175e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001762:	edd7 7a04 	vldr	s15, [r7, #16]
 8001766:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001768:	1d1a      	adds	r2, r3, #4
 800176a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	edc3 7a00 	vstr	s15, [r3]
 8001774:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001778:	edd7 7a05 	vldr	s15, [r7, #20]
 800177c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800177e:	1d1a      	adds	r2, r3, #4
 8001780:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	edc3 7a00 	vstr	s15, [r3]
 800178a:	ed97 7a02 	vldr	s14, [r7, #8]
 800178e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	edc7 7a02 	vstr	s15, [r7, #8]
 800179a:	ed97 7a03 	vldr	s14, [r7, #12]
 800179e:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	edc7 7a03 	vstr	s15, [r7, #12]
 80017aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80017ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b6:	edc7 7a04 	vstr	s15, [r7, #16]
 80017ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80017be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c6:	edc7 7a05 	vstr	s15, [r7, #20]
 80017ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017cc:	1d1a      	adds	r2, r3, #4
 80017ce:	673a      	str	r2, [r7, #112]	@ 0x70
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017d6:	1d1a      	adds	r2, r3, #4
 80017d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017e2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80017ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017f2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80017fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001802:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 800180e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001812:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800181e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	677a      	str	r2, [r7, #116]	@ 0x74
 8001824:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001828:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	edc3 7a00 	vstr	s15, [r3]
 8001834:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001836:	1d1a      	adds	r2, r3, #4
 8001838:	677a      	str	r2, [r7, #116]	@ 0x74
 800183a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800183e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001846:	edc3 7a00 	vstr	s15, [r3]
 800184a:	edd7 7a02 	vldr	s15, [r7, #8]
 800184e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800185a:	edd7 7a03 	vldr	s15, [r7, #12]
 800185e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001866:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 800186a:	edd7 7a03 	vldr	s15, [r7, #12]
 800186e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 800187a:	edd7 7a02 	vldr	s15, [r7, #8]
 800187e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800188a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800188c:	1d1a      	adds	r2, r3, #4
 800188e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001890:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001894:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	edc3 7a00 	vstr	s15, [r3]
 80018a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80018a6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80018aa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	edc3 7a00 	vstr	s15, [r3]
 80018b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018b8:	1d1a      	adds	r2, r3, #4
 80018ba:	673a      	str	r2, [r7, #112]	@ 0x70
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018c2:	1d1a      	adds	r2, r3, #4
 80018c4:	673a      	str	r2, [r7, #112]	@ 0x70
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018ca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018ce:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80018da:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018de:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80018ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018ee:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80018f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 80018fa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018fe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001906:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800190a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800190c:	1d1a      	adds	r2, r3, #4
 800190e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001910:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001914:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	edc3 7a00 	vstr	s15, [r3]
 8001920:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001922:	1d1a      	adds	r2, r3, #4
 8001924:	677a      	str	r2, [r7, #116]	@ 0x74
 8001926:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800192a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	edc3 7a00 	vstr	s15, [r3]
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001942:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8001946:	edd7 7a05 	vldr	s15, [r7, #20]
 800194a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8001956:	edd7 7a05 	vldr	s15, [r7, #20]
 800195a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8001966:	edd7 7a04 	vldr	s15, [r7, #16]
 800196a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001978:	1d1a      	adds	r2, r3, #4
 800197a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800197c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001980:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001988:	edc3 7a00 	vstr	s15, [r3]
 800198c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800198e:	1d1a      	adds	r2, r3, #4
 8001990:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001992:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001996:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800199a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199e:	edc3 7a00 	vstr	s15, [r3]
 80019a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019a4:	3b01      	subs	r3, #1
 80019a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f ae45 	bne.w	800163a <arm_cfft_radix8by2_f32+0x4a>
 80019b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019b2:	b299      	uxth	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80019bc:	f001 f9c6 	bl	8002d4c <arm_radix8_butterfly_f32>
 80019c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019c2:	b299      	uxth	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	2302      	movs	r3, #2
 80019ca:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80019cc:	f001 f9be 	bl	8002d4c <arm_radix8_butterfly_f32>
 80019d0:	bf00      	nop
 80019d2:	3780      	adds	r7, #128	@ 0x80
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <arm_cfft_radix8by4_f32>:
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0ac      	sub	sp, #176	@ 0xb0
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80019fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001a06:	4413      	add	r3, r2
 8001a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a30:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a36:	3b04      	subs	r3, #4
 8001a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a40:	3b04      	subs	r3, #4
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a82:	2302      	movs	r3, #2
 8001a84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a86:	2304      	movs	r3, #4
 8001a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	ed93 7a00 	vldr	s14, [r3]
 8001a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	ed93 7a00 	vldr	s14, [r3]
 8001ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8001aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001af2:	3304      	adds	r3, #4
 8001af4:	ed93 7a00 	vldr	s14, [r3]
 8001af8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b04:	3304      	adds	r3, #4
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b56:	3304      	adds	r3, #4
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b68:	3304      	adds	r3, #4
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	edc7 7a08 	vstr	s15, [r7, #32]
 8001b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001b84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b96:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b9e:	ed93 7a00 	vldr	s14, [r3]
 8001ba2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	edc7 7a04 	vstr	s15, [r7, #16]
 8001bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	1d1a      	adds	r2, r3, #4
 8001bd6:	603a      	str	r2, [r7, #0]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
 8001be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001be4:	3304      	adds	r3, #4
 8001be6:	ed93 7a00 	vldr	s14, [r3]
 8001bea:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	603a      	str	r2, [r7, #0]
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	edc3 7a00 	vstr	s15, [r3]
 8001c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c0e:	1d1a      	adds	r2, r3, #4
 8001c10:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c1c:	1d1a      	adds	r2, r3, #4
 8001c1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c2a:	1d1a      	adds	r2, r3, #4
 8001c2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c38:	1d1a      	adds	r2, r3, #4
 8001c3a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c46:	1d1a      	adds	r2, r3, #4
 8001c48:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c54:	1d1a      	adds	r2, r3, #4
 8001c56:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001c66:	4413      	add	r3, r2
 8001c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c74:	4413      	add	r3, r2
 8001c76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c82:	4413      	add	r3, r2
 8001c84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c8c:	3b02      	subs	r3, #2
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c94:	e31c      	b.n	80022d0 <arm_cfft_radix8by4_f32+0x8f8>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	ed93 7a00 	vldr	s14, [r3]
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	ed93 7a00 	vldr	s14, [r3]
 8001cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	ed93 7a00 	vldr	s14, [r3]
 8001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ce8:	3304      	adds	r3, #4
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8001cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d16:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001d46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	edc7 7a07 	vstr	s15, [r7, #28]
 8001d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d5e:	3304      	adds	r3, #4
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d70:	3304      	adds	r3, #4
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7a:	edc7 7a08 	vstr	s15, [r7, #32]
 8001d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d82:	3304      	adds	r3, #4
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d94:	3304      	adds	r3, #4
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001da6:	ed93 7a00 	vldr	s14, [r3]
 8001daa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	edc7 7a04 	vstr	s15, [r7, #16]
 8001dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	1d1a      	adds	r2, r3, #4
 8001dde:	603a      	str	r2, [r7, #0]
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	edc3 7a00 	vstr	s15, [r3]
 8001de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dec:	3304      	adds	r3, #4
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dfe:	3304      	adds	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	1d1a      	adds	r2, r3, #4
 8001e08:	603a      	str	r2, [r7, #0]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
 8001e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e16:	3b04      	subs	r3, #4
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e20:	3b04      	subs	r3, #4
 8001e22:	edd3 7a00 	vldr	s15, [r3]
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8001e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e32:	3b04      	subs	r3, #4
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e3c:	3b04      	subs	r3, #4
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e46:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8001e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 8001e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8001e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e8e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e96:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ebc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ec0:	3b04      	subs	r3, #4
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eca:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8001ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ee4:	3b04      	subs	r3, #4
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8001f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f16:	ed93 7a00 	vldr	s14, [r3]
 8001f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f26:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f36:	3b04      	subs	r3, #4
 8001f38:	ed93 7a00 	vldr	s14, [r3]
 8001f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f40:	3b04      	subs	r3, #4
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f4a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a06 	vstr	s15, [r7, #24]
 8001f56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f72:	1f1a      	subs	r2, r3, #4
 8001f74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
 8001f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f84:	3b04      	subs	r3, #4
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001f8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f96:	3b04      	subs	r3, #4
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fa0:	1f1a      	subs	r2, r3, #4
 8001fa2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	edc3 7a00 	vstr	s15, [r3]
 8001fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fc0:	1d1a      	adds	r2, r3, #4
 8001fc2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001fce:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001fda:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fde:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8001fea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fee:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8001ffa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ffe:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800200a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002014:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002018:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800201c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002020:	edc3 7a00 	vstr	s15, [r3]
 8002024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002028:	1d1a      	adds	r2, r3, #4
 800202a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800202e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002032:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	edc3 7a00 	vstr	s15, [r3]
 800203e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002042:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800204e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002052:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800205e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002062:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 800206e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002072:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800207e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002082:	1f1a      	subs	r2, r3, #4
 8002084:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002088:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800208c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	edc3 7a00 	vstr	s15, [r3]
 8002098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800209c:	1f1a      	subs	r2, r3, #4
 800209e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80020a2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80020a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc3 7a00 	vstr	s15, [r3]
 80020b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80020ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80020cc:	4413      	add	r3, r2
 80020ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80020d6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80020e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020e6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80020f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020f6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8002102:	edd7 7a07 	vldr	s15, [r7, #28]
 8002106:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800210a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8002112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002116:	1d1a      	adds	r2, r3, #4
 8002118:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800211c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002120:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc3 7a00 	vstr	s15, [r3]
 800212c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002130:	1d1a      	adds	r2, r3, #4
 8002132:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002136:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800213a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800213e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002142:	edc3 7a00 	vstr	s15, [r3]
 8002146:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800214a:	eef1 7a67 	vneg.f32	s15, s15
 800214e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800215a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800215e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800216a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800216e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002176:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 800217a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800217e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002186:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800218a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800218e:	1f1a      	subs	r2, r3, #4
 8002190:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002194:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002198:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800219c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a0:	edc3 7a00 	vstr	s15, [r3]
 80021a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021a8:	1f1a      	subs	r2, r3, #4
 80021aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021ae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80021b2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80021b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ba:	edc3 7a00 	vstr	s15, [r3]
 80021be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80021c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021ca:	3304      	adds	r3, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021d8:	4413      	add	r3, r2
 80021da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80021e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ea:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80021ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80021fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002202:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 800220e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002212:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800221e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002222:	1d1a      	adds	r2, r3, #4
 8002224:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002228:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800222c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	edc3 7a00 	vstr	s15, [r3]
 8002238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800223c:	1d1a      	adds	r2, r3, #4
 800223e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002242:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002246:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	edc3 7a00 	vstr	s15, [r3]
 8002252:	edd7 7a06 	vldr	s15, [r7, #24]
 8002256:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8002262:	edd7 7a05 	vldr	s15, [r7, #20]
 8002266:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8002272:	edd7 7a05 	vldr	s15, [r7, #20]
 8002276:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8002282:	edd7 7a06 	vldr	s15, [r7, #24]
 8002286:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800228a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8002292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002296:	1f1a      	subs	r2, r3, #4
 8002298:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800229c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80022a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80022a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a8:	edc3 7a00 	vstr	s15, [r3]
 80022ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022b0:	1f1a      	subs	r2, r3, #4
 80022b2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80022b6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80022ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	edc3 7a00 	vstr	s15, [r3]
 80022c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f47f acde 	bne.w	8001c96 <arm_cfft_radix8by4_f32+0x2be>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	ed93 7a00 	vldr	s14, [r3]
 80022e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ec:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002302:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	3304      	adds	r3, #4
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002312:	3304      	adds	r3, #4
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3304      	adds	r3, #4
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800232c:	3304      	adds	r3, #4
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800233a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800233e:	3304      	adds	r3, #4
 8002340:	ed93 7a00 	vldr	s14, [r3]
 8002344:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002350:	3304      	adds	r3, #4
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800235e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800236a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 800237e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800238a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800238e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239a:	edc7 7a07 	vstr	s15, [r7, #28]
 800239e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023a2:	3304      	adds	r3, #4
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80023ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023b4:	3304      	adds	r3, #4
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023be:	edc7 7a08 	vstr	s15, [r7, #32]
 80023c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023c6:	3304      	adds	r3, #4
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80023d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023d8:	3304      	adds	r3, #4
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e2:	edc7 7a03 	vstr	s15, [r7, #12]
 80023e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80023f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002402:	edc7 7a04 	vstr	s15, [r7, #16]
 8002406:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002416:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	603a      	str	r2, [r7, #0]
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	edc3 7a00 	vstr	s15, [r3]
 800242c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002430:	3304      	adds	r3, #4
 8002432:	ed93 7a00 	vldr	s14, [r3]
 8002436:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800243a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002442:	3304      	adds	r3, #4
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	603a      	str	r2, [r7, #0]
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	edc3 7a00 	vstr	s15, [r3]
 8002456:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	653b      	str	r3, [r7, #80]	@ 0x50
 800245e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002462:	3304      	adds	r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002468:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800246c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002474:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8002478:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800247c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8002488:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800248c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002494:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8002498:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800249c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80024a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024ac:	1d1a      	adds	r2, r3, #4
 80024ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80024b2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80024b6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	edc3 7a00 	vstr	s15, [r3]
 80024c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024c6:	1d1a      	adds	r2, r3, #4
 80024c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80024cc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80024d0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	edc3 7a00 	vstr	s15, [r3]
 80024dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80024e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80024f2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80024fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002502:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800250e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002512:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 800251e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002522:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002532:	1d1a      	adds	r2, r3, #4
 8002534:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002538:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800253c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	edc3 7a00 	vstr	s15, [r3]
 8002548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800254c:	1d1a      	adds	r2, r3, #4
 800254e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002552:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002556:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800255a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255e:	edc3 7a00 	vstr	s15, [r3]
 8002562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	653b      	str	r3, [r7, #80]	@ 0x50
 800256a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800256e:	3304      	adds	r3, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002574:	edd7 7a03 	vldr	s15, [r7, #12]
 8002578:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002580:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8002584:	edd7 7a04 	vldr	s15, [r7, #16]
 8002588:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800258c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002590:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8002594:	edd7 7a04 	vldr	s15, [r7, #16]
 8002598:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80025a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80025a8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80025ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80025b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025b8:	1d1a      	adds	r2, r3, #4
 80025ba:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80025be:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80025c2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	edc3 7a00 	vstr	s15, [r3]
 80025ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80025d8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80025dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	edc3 7a00 	vstr	s15, [r3]
 80025e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ec:	b299      	uxth	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	2304      	movs	r3, #4
 80025f4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80025f6:	f000 fba9 	bl	8002d4c <arm_radix8_butterfly_f32>
 80025fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025fe:	b299      	uxth	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	2304      	movs	r3, #4
 8002606:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002608:	f000 fba0 	bl	8002d4c <arm_radix8_butterfly_f32>
 800260c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002610:	b299      	uxth	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	2304      	movs	r3, #4
 8002618:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800261a:	f000 fb97 	bl	8002d4c <arm_radix8_butterfly_f32>
 800261e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002622:	b299      	uxth	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	2304      	movs	r3, #4
 800262a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800262c:	f000 fb8e 	bl	8002d4c <arm_radix8_butterfly_f32>
 8002630:	bf00      	nop
 8002632:	37b0      	adds	r7, #176	@ 0xb0
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <arm_cfft_f32>:
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	460b      	mov	r3, r1
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	4613      	mov	r3, r2
 800264c:	71bb      	strb	r3, [r7, #6]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d117      	bne.n	800268a <arm_cfft_f32+0x52>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3304      	adds	r3, #4
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	e00d      	b.n	8002682 <arm_cfft_f32+0x4a>
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eef1 7a67 	vneg.f32	s15, s15
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	edc3 7a00 	vstr	s15, [r3]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3308      	adds	r3, #8
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3301      	adds	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d3ed      	bcc.n	8002666 <arm_cfft_f32+0x2e>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002690:	d040      	beq.n	8002714 <arm_cfft_f32+0xdc>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002698:	d845      	bhi.n	8002726 <arm_cfft_f32+0xee>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026a0:	d033      	beq.n	800270a <arm_cfft_f32+0xd2>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026a8:	d83d      	bhi.n	8002726 <arm_cfft_f32+0xee>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b0:	d026      	beq.n	8002700 <arm_cfft_f32+0xc8>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b8:	d835      	bhi.n	8002726 <arm_cfft_f32+0xee>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c0:	d028      	beq.n	8002714 <arm_cfft_f32+0xdc>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c8:	d82d      	bhi.n	8002726 <arm_cfft_f32+0xee>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d0:	d01b      	beq.n	800270a <arm_cfft_f32+0xd2>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d8:	d825      	bhi.n	8002726 <arm_cfft_f32+0xee>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b80      	cmp	r3, #128	@ 0x80
 80026de:	d00f      	beq.n	8002700 <arm_cfft_f32+0xc8>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b80      	cmp	r3, #128	@ 0x80
 80026e4:	d81f      	bhi.n	8002726 <arm_cfft_f32+0xee>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d013      	beq.n	8002714 <arm_cfft_f32+0xdc>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b40      	cmp	r3, #64	@ 0x40
 80026f0:	d819      	bhi.n	8002726 <arm_cfft_f32+0xee>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d003      	beq.n	8002700 <arm_cfft_f32+0xc8>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d005      	beq.n	800270a <arm_cfft_f32+0xd2>
 80026fe:	e012      	b.n	8002726 <arm_cfft_f32+0xee>
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7fe ff74 	bl	80015f0 <arm_cfft_radix8by2_f32>
 8002708:	e00d      	b.n	8002726 <arm_cfft_f32+0xee>
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff f963 	bl	80019d8 <arm_cfft_radix8by4_f32>
 8002712:	e008      	b.n	8002726 <arm_cfft_f32+0xee>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	b299      	uxth	r1, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	2301      	movs	r3, #1
 800271e:	68b8      	ldr	r0, [r7, #8]
 8002720:	f000 fb14 	bl	8002d4c <arm_radix8_butterfly_f32>
 8002724:	bf00      	nop
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <arm_cfft_f32+0x104>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8999      	ldrh	r1, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	461a      	mov	r2, r3
 8002736:	68b8      	ldr	r0, [r7, #8]
 8002738:	f000 fa58 	bl	8002bec <arm_bitreversal_32>
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d130      	bne.n	80027a4 <arm_cfft_f32+0x16c>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800274c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002754:	edc7 7a04 	vstr	s15, [r7, #16]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e01c      	b.n	800279c <arm_cfft_f32+0x164>
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1d1a      	adds	r2, r3, #4
 8002766:	61ba      	str	r2, [r7, #24]
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	edc3 7a00 	vstr	s15, [r3]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	eeb1 7a67 	vneg.f32	s14, s15
 8002782:	edd7 7a04 	vldr	s15, [r7, #16]
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	edc3 7a00 	vstr	s15, [r3]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	3304      	adds	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3de      	bcc.n	8002762 <arm_cfft_f32+0x12a>
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <arm_cfft_init_4096_f32>:
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <arm_cfft_init_4096_f32+0x44>)
 80027c8:	899a      	ldrh	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	819a      	strh	r2, [r3, #12]
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <arm_cfft_init_4096_f32+0x44>)
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <arm_cfft_init_4096_f32+0x44>)
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	080ecaec 	.word	0x080ecaec

080027f4 <arm_cfft_init_2048_f32>:
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <arm_cfft_init_2048_f32+0x44>)
 8002810:	899a      	ldrh	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	819a      	strh	r2, [r3, #12]
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <arm_cfft_init_2048_f32+0x44>)
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <arm_cfft_init_2048_f32+0x44>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	080ecadc 	.word	0x080ecadc

0800283c <arm_cfft_init_1024_f32>:
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800284e:	801a      	strh	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <arm_cfft_init_1024_f32+0x44>)
 8002858:	899a      	ldrh	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	819a      	strh	r2, [r3, #12]
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <arm_cfft_init_1024_f32+0x44>)
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <arm_cfft_init_1024_f32+0x44>)
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	080ecacc 	.word	0x080ecacc

08002884 <arm_cfft_init_512_f32>:
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <arm_cfft_init_512_f32+0x44>)
 80028a0:	899a      	ldrh	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	819a      	strh	r2, [r3, #12]
 80028a6:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <arm_cfft_init_512_f32+0x44>)
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <arm_cfft_init_512_f32+0x44>)
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	080ecabc 	.word	0x080ecabc

080028cc <arm_cfft_init_256_f32>:
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <arm_cfft_init_256_f32+0x44>)
 80028e8:	899a      	ldrh	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	819a      	strh	r2, [r3, #12]
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <arm_cfft_init_256_f32+0x44>)
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <arm_cfft_init_256_f32+0x44>)
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	080ecaac 	.word	0x080ecaac

08002914 <arm_cfft_init_128_f32>:
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2280      	movs	r2, #128	@ 0x80
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <arm_cfft_init_128_f32+0x40>)
 800292e:	899a      	ldrh	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	819a      	strh	r2, [r3, #12]
 8002934:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <arm_cfft_init_128_f32+0x40>)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <arm_cfft_init_128_f32+0x40>)
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	080eca9c 	.word	0x080eca9c

08002958 <arm_cfft_init_64_f32>:
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <arm_cfft_init_64_f32+0x40>)
 8002972:	899a      	ldrh	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	819a      	strh	r2, [r3, #12]
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <arm_cfft_init_64_f32+0x40>)
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <arm_cfft_init_64_f32+0x40>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	080eca8c 	.word	0x080eca8c

0800299c <arm_cfft_init_32_f32>:
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <arm_cfft_init_32_f32+0x40>)
 80029b6:	899a      	ldrh	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	819a      	strh	r2, [r3, #12]
 80029bc:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <arm_cfft_init_32_f32+0x40>)
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <arm_cfft_init_32_f32+0x40>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	080eca7c 	.word	0x080eca7c

080029e0 <arm_cfft_init_16_f32>:
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2210      	movs	r2, #16
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <arm_cfft_init_16_f32+0x40>)
 80029fa:	899a      	ldrh	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	819a      	strh	r2, [r3, #12]
 8002a00:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <arm_cfft_init_16_f32+0x40>)
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <arm_cfft_init_16_f32+0x40>)
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	080eca6c 	.word	0x080eca6c

08002a24 <arm_cfft_init_f32>:
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3a:	d027      	beq.n	8002a8c <arm_cfft_init_f32+0x68>
 8002a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a40:	dc5a      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a46:	d027      	beq.n	8002a98 <arm_cfft_init_f32+0x74>
 8002a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a4c:	dc54      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a52:	d027      	beq.n	8002aa4 <arm_cfft_init_f32+0x80>
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a58:	dc4e      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5e:	d027      	beq.n	8002ab0 <arm_cfft_init_f32+0x8c>
 8002a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a64:	dc48      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6a:	d027      	beq.n	8002abc <arm_cfft_init_f32+0x98>
 8002a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a70:	dc42      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a72:	2b80      	cmp	r3, #128	@ 0x80
 8002a74:	d028      	beq.n	8002ac8 <arm_cfft_init_f32+0xa4>
 8002a76:	2b80      	cmp	r3, #128	@ 0x80
 8002a78:	dc3e      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a7a:	2b40      	cmp	r3, #64	@ 0x40
 8002a7c:	d02a      	beq.n	8002ad4 <arm_cfft_init_f32+0xb0>
 8002a7e:	2b40      	cmp	r3, #64	@ 0x40
 8002a80:	dc3a      	bgt.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d032      	beq.n	8002aec <arm_cfft_init_f32+0xc8>
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d02a      	beq.n	8002ae0 <arm_cfft_init_f32+0xbc>
 8002a8a:	e035      	b.n	8002af8 <arm_cfft_init_f32+0xd4>
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fe8d 	bl	80027ac <arm_cfft_init_4096_f32>
 8002a92:	4603      	mov	r3, r0
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	e032      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feab 	bl	80027f4 <arm_cfft_init_2048_f32>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e02c      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fec9 	bl	800283c <arm_cfft_init_1024_f32>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e026      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fee7 	bl	8002884 <arm_cfft_init_512_f32>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e020      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff05 	bl	80028cc <arm_cfft_init_256_f32>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e01a      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff23 	bl	8002914 <arm_cfft_init_128_f32>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	e014      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff3f 	bl	8002958 <arm_cfft_init_64_f32>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e00e      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff5b 	bl	800299c <arm_cfft_init_32_f32>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e008      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff77 	bl	80029e0 <arm_cfft_init_16_f32>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e002      	b.n	8002afe <arm_cfft_init_f32+0xda>
 8002af8:	23ff      	movs	r3, #255	@ 0xff
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	bf00      	nop
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop

08002b0c <arm_bitreversal_64>:
 8002b0c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002b10:	b08d      	sub	sp, #52	@ 0x34
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	460b      	mov	r3, r1
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	817b      	strh	r3, [r7, #10]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b20:	e059      	b.n	8002bd6 <arm_bitreversal_64+0xca>
 8002b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2200      	movs	r2, #0
 8002b34:	461c      	mov	r4, r3
 8002b36:	4615      	mov	r5, r2
 8002b38:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8002b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3e:	3301      	adds	r3, #1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4698      	mov	r8, r3
 8002b52:	4691      	mov	r9, r2
 8002b54:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	00d2      	lsls	r2, r2, #3
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	4411      	add	r1, r2
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	e9c1 2300 	strd	r2, r3, [r1]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	18d1      	adds	r1, r2, r3
 8002b88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b8c:	e9c1 2300 	strd	r2, r3, [r1]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	3301      	adds	r3, #1
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	3201      	adds	r2, #1
 8002bb0:	00d2      	lsls	r2, r2, #3
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	4411      	add	r1, r2
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	18d1      	adds	r1, r2, r3
 8002bc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bcc:	e9c1 2300 	strd	r2, r3, [r1]
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d3a1      	bcc.n	8002b22 <arm_bitreversal_64+0x16>
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	3734      	adds	r7, #52	@ 0x34
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002bea:	4770      	bx	lr

08002bec <arm_bitreversal_32>:
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e043      	b.n	8002c88 <arm_bitreversal_32+0x9c>
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	441a      	add	r2, r3
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	68f9      	ldr	r1, [r7, #12]
 8002c3c:	440b      	add	r3, r1
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3301      	adds	r3, #1
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	441a      	add	r2, r3
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	440b      	add	r3, r1
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3302      	adds	r3, #2
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3b7      	bcc.n	8002c00 <arm_bitreversal_32+0x14>
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <arm_bitreversal_16>:
 8002c9e:	b480      	push	{r7}
 8002ca0:	b089      	sub	sp, #36	@ 0x24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	817b      	strh	r3, [r7, #10]
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	e041      	b.n	8002d36 <arm_bitreversal_16+0x98>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	837b      	strh	r3, [r7, #26]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	833b      	strh	r3, [r7, #24]
 8002cd0:	8b7b      	ldrh	r3, [r7, #26]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	82fb      	strh	r3, [r7, #22]
 8002cdc:	8b3b      	ldrh	r3, [r7, #24]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	8b7b      	ldrh	r3, [r7, #26]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	440b      	add	r3, r1
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	801a      	strh	r2, [r3, #0]
 8002cf0:	8b3b      	ldrh	r3, [r7, #24]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	8afa      	ldrh	r2, [r7, #22]
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	82fb      	strh	r3, [r7, #22]
 8002d0a:	8b3b      	ldrh	r3, [r7, #24]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	441a      	add	r2, r3
 8002d14:	8b7b      	ldrh	r3, [r7, #26]
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	8812      	ldrh	r2, [r2, #0]
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	8b3b      	ldrh	r3, [r7, #24]
 8002d24:	3301      	adds	r3, #1
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	8afa      	ldrh	r2, [r7, #22]
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3302      	adds	r3, #2
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3b9      	bcc.n	8002cb2 <arm_bitreversal_16+0x14>
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	3724      	adds	r7, #36	@ 0x24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <arm_radix8_butterfly_f32>:
 8002d4c:	b480      	push	{r7}
 8002d4e:	b0bd      	sub	sp, #244	@ 0xf4
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	461a      	mov	r2, r3
 8002d58:	460b      	mov	r3, r1
 8002d5a:	817b      	strh	r3, [r7, #10]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	813b      	strh	r3, [r7, #8]
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <arm_radix8_butterfly_f32+0x3c>)
 8002d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d84:	e002      	b.n	8002d8c <arm_radix8_butterfly_f32+0x40>
 8002d86:	bf00      	nop
 8002d88:	3f3504f3 	.word	0x3f3504f3
 8002d8c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d94:	4413      	add	r3, r2
 8002d96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da2:	4413      	add	r3, r2
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002da8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db0:	4413      	add	r3, r2
 8002db2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dc4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dcc:	4413      	add	r3, r2
 8002dce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dda:	4413      	add	r3, r2
 8002ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de8:	4413      	add	r3, r2
 8002dea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4413      	add	r3, r2
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0e:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 8002e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e32:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 8002e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	ed93 7a00 	vldr	s14, [r3]
 8002e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e56:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 8002e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	ed93 7a00 	vldr	s14, [r3]
 8002e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
 8002e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8002ea2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	ed93 7a00 	vldr	s14, [r3]
 8002eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec2:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 8002ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	ed93 7a00 	vldr	s14, [r3]
 8002ed4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
 8002eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	ed93 7a00 	vldr	s14, [r3]
 8002ef8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
 8002f0e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002f12:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
 8002f1e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002f22:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 8002f2e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002f32:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8002f3e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002f42:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 8002f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002f5c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f64:	edc3 7a00 	vstr	s15, [r3]
 8002f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002f76:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7e:	edc3 7a00 	vstr	s15, [r3]
 8002f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	3304      	adds	r3, #4
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	ed93 7a00 	vldr	s14, [r3]
 8002f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3304      	adds	r3, #4
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 8002faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8002fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3304      	adds	r3, #4
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	ed93 7a00 	vldr	s14, [r3]
 8002fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3304      	adds	r3, #4
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 8002ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	3304      	adds	r3, #4
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	ed93 7a00 	vldr	s14, [r3]
 800300a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3304      	adds	r3, #4
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8003022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3304      	adds	r3, #4
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	ed93 7a00 	vldr	s14, [r3]
 8003032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	3304      	adds	r3, #4
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 800304a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	3304      	adds	r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	ed93 7a00 	vldr	s14, [r3]
 800305a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	3304      	adds	r3, #4
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 8003072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3304      	adds	r3, #4
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	3304      	adds	r3, #4
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003096:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
 800309a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3304      	adds	r3, #4
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3304      	adds	r3, #4
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 80030c2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80030c6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80030ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ce:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 80030d2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80030d6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80030da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030de:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 80030e2:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80030e6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80030ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ee:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 80030f2:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80030f6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 8003102:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3304      	adds	r3, #4
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003112:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311a:	edc3 7a00 	vstr	s15, [r3]
 800311e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	3304      	adds	r3, #4
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800312e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003136:	edc3 7a00 	vstr	s15, [r3]
 800313a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003148:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	edc3 7a00 	vstr	s15, [r3]
 8003154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003162:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316a:	edc3 7a00 	vstr	s15, [r3]
 800316e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	3304      	adds	r3, #4
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800317e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003186:	edc3 7a00 	vstr	s15, [r3]
 800318a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	3304      	adds	r3, #4
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800319a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	edc3 7a00 	vstr	s15, [r3]
 80031a6:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80031aa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b2:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 80031be:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80031c2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ca:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
 80031d6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80031da:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 80031ee:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80031f2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8003206:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800320a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800320e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003212:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
 8003216:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800321a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800321e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003222:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 8003226:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800322a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800322e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003232:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
 8003236:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800323a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 8003246:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800324a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800324e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003252:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8003256:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800325a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003266:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800326a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800326e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003272:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8003276:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800327a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 8003286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003294:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329c:	edc3 7a00 	vstr	s15, [r3]
 80032a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80032ae:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	edc3 7a00 	vstr	s15, [r3]
 80032ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80032c8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	edc3 7a00 	vstr	s15, [r3]
 80032d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4413      	add	r3, r2
 80032de:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80032e2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80032e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ea:	edc3 7a00 	vstr	s15, [r3]
 80032ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	3304      	adds	r3, #4
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80032fe:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003306:	edc3 7a00 	vstr	s15, [r3]
 800330a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	3304      	adds	r3, #4
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800331a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	edc3 7a00 	vstr	s15, [r3]
 8003326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3304      	adds	r3, #4
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003336:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800333a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333e:	edc3 7a00 	vstr	s15, [r3]
 8003342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	3304      	adds	r3, #4
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003352:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335a:	edc3 7a00 	vstr	s15, [r3]
 800335e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003366:	4413      	add	r3, r2
 8003368:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003372:	429a      	cmp	r2, r3
 8003374:	f4ff ad0a 	bcc.w	8002d8c <arm_radix8_butterfly_f32+0x40>
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337c:	2b07      	cmp	r3, #7
 800337e:	f240 84e3 	bls.w	8003d48 <arm_radix8_butterfly_f32+0xffc>
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003388:	2301      	movs	r3, #1
 800338a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003394:	4413      	add	r3, r2
 8003396:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800339a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800339e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033a4:	4413      	add	r3, r2
 80033a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80033aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ac:	4413      	add	r3, r2
 80033ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80033b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033b4:	4413      	add	r3, r2
 80033b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80033b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80033ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033bc:	4413      	add	r3, r2
 80033be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033c4:	4413      	add	r3, r2
 80033c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80033ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033cc:	4413      	add	r3, r2
 80033ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80033de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	657b      	str	r3, [r7, #84]	@ 0x54
 8003402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	653b      	str	r3, [r7, #80]	@ 0x50
 800340e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800341a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003426:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	3304      	adds	r3, #4
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	647b      	str	r3, [r7, #68]	@ 0x44
 8003436:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	3304      	adds	r3, #4
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	643b      	str	r3, [r7, #64]	@ 0x40
 8003444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3304      	adds	r3, #4
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	3304      	adds	r3, #4
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	3304      	adds	r3, #4
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
 800346e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	3304      	adds	r3, #4
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	633b      	str	r3, [r7, #48]	@ 0x30
 800347c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	3304      	adds	r3, #4
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003492:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800349a:	4413      	add	r3, r2
 800349c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a8:	4413      	add	r3, r2
 80034aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b6:	4413      	add	r3, r2
 80034b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034bc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c4:	4413      	add	r3, r2
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d2:	4413      	add	r3, r2
 80034d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e0:	4413      	add	r3, r2
 80034e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034e6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	4413      	add	r3, r2
 80034f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 8003518:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	ed93 7a00 	vldr	s14, [r3]
 8003526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003538:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 800353c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	ed93 7a00 	vldr	s14, [r3]
 800354a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 8003560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	ed93 7a00 	vldr	s14, [r3]
 800356e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	edd3 7a00 	vldr	s15, [r3]
 800357c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003580:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
 8003584:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	ed93 7a00 	vldr	s14, [r3]
 8003592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 80035a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	ed93 7a00 	vldr	s14, [r3]
 80035b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c8:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 80035cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	ed93 7a00 	vldr	s14, [r3]
 80035da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	edd3 7a00 	vldr	s15, [r3]
 80035e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ec:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
 80035f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	ed93 7a00 	vldr	s14, [r3]
 80035fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003610:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
 8003614:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003618:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800361c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003620:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
 8003624:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003628:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800362c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003630:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 8003634:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003638:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8003644:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003648:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800364c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003650:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 8003654:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003662:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	edc3 7a00 	vstr	s15, [r3]
 800366e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003672:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
 800367e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	3304      	adds	r3, #4
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4413      	add	r3, r2
 800368a:	ed93 7a00 	vldr	s14, [r3]
 800368e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	3304      	adds	r3, #4
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4413      	add	r3, r2
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80036a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	3304      	adds	r3, #4
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	ed93 7a00 	vldr	s14, [r3]
 80036b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	3304      	adds	r3, #4
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4413      	add	r3, r2
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ca:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80036ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3304      	adds	r3, #4
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	ed93 7a00 	vldr	s14, [r3]
 80036de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3304      	adds	r3, #4
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80036f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	3304      	adds	r3, #4
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	ed93 7a00 	vldr	s14, [r3]
 8003706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	3304      	adds	r3, #4
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 800371e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	3304      	adds	r3, #4
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	ed93 7a00 	vldr	s14, [r3]
 800372e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	3304      	adds	r3, #4
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003742:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 8003746:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	3304      	adds	r3, #4
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	ed93 7a00 	vldr	s14, [r3]
 8003756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	3304      	adds	r3, #4
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800376a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 800376e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3304      	adds	r3, #4
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	ed93 7a00 	vldr	s14, [r3]
 800377e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	3304      	adds	r3, #4
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003792:	edc7 7a08 	vstr	s15, [r7, #32]
 8003796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	3304      	adds	r3, #4
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	ed93 7a00 	vldr	s14, [r3]
 80037a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	3304      	adds	r3, #4
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ba:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 80037be:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80037c2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80037c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ca:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 80037ce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80037d2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80037de:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80037e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80037e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ea:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 80037ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80037f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80037f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80037fe:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003802:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 800380e:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003812:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
 800381e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	3304      	adds	r3, #4
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800382e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003836:	edc3 7a00 	vstr	s15, [r3]
 800383a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800383e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003846:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800384a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800384e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003856:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 800385a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800385e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003866:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 800386a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800386e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003876:	edc7 7a07 	vstr	s15, [r7, #28]
 800387a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800387e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a06 	vstr	s15, [r7, #24]
 800388a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800388e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003896:	edc7 7a05 	vstr	s15, [r7, #20]
 800389a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800389e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a04 	vstr	s15, [r7, #16]
 80038aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80038b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80038bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c0:	edc3 7a00 	vstr	s15, [r3]
 80038c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	3304      	adds	r3, #4
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80038d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038dc:	edc3 7a00 	vstr	s15, [r3]
 80038e0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80038e4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80038e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ec:	edc7 7a07 	vstr	s15, [r7, #28]
 80038f0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80038f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	edc7 7a06 	vstr	s15, [r7, #24]
 8003900:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003904:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390c:	edc7 7a05 	vstr	s15, [r7, #20]
 8003910:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003914:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391c:	edc7 7a04 	vstr	s15, [r7, #16]
 8003920:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	ed97 7a07 	vldr	s14, [r7, #28]
 800392e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003936:	edc3 7a00 	vstr	s15, [r3]
 800393a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	3304      	adds	r3, #4
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	ed97 7a05 	vldr	s14, [r7, #20]
 800394a:	edd7 7a04 	vldr	s15, [r7, #16]
 800394e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003952:	edc3 7a00 	vstr	s15, [r3]
 8003956:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800395a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc7 7a07 	vstr	s15, [r7, #28]
 8003966:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800396a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a06 	vstr	s15, [r7, #24]
 8003976:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800397a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800397e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003982:	edc7 7a05 	vstr	s15, [r7, #20]
 8003986:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800398a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800398e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003992:	edc7 7a04 	vstr	s15, [r7, #16]
 8003996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80039a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ac:	edc3 7a00 	vstr	s15, [r3]
 80039b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	3304      	adds	r3, #4
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80039c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80039c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c8:	edc3 7a00 	vstr	s15, [r3]
 80039cc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80039d0:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80039d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d8:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80039dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 80039e4:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80039e8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80039ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f0:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80039f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
 80039fc:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003a00:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a08:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a10:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8003a14:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003a18:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a20:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8003a2c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003a30:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a38:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
 8003a3c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003a40:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a48:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 8003a4c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003a50:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a58:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
 8003a5c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003a60:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a68:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 8003a6c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003a70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a78:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8003a7c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003a80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a88:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003a8c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003a90:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a98:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8003a9c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003aa0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 8003aac:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003ab0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab8:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
 8003abc:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003ac0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 8003acc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003ad0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
 8003adc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003ae0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae8:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
 8003aec:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003af0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8003afc:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003b00:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b08:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003b0c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003b10:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b18:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8003b1c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003b20:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b28:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8003b2c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003b30:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b38:	edc7 7a07 	vstr	s15, [r7, #28]
 8003b3c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003b40:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	edc7 7a06 	vstr	s15, [r7, #24]
 8003b4c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003b50:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	edc7 7a05 	vstr	s15, [r7, #20]
 8003b5c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003b60:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	edc7 7a04 	vstr	s15, [r7, #16]
 8003b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b82:	edc3 7a00 	vstr	s15, [r3]
 8003b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
 8003ba2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003ba6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
 8003bb2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003bb6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a06 	vstr	s15, [r7, #24]
 8003bc2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003bc6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a05 	vstr	s15, [r7, #20]
 8003bd2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003bd6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a04 	vstr	s15, [r7, #16]
 8003be2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf8:	edc3 7a00 	vstr	s15, [r3]
 8003bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	3304      	adds	r3, #4
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c14:	edc3 7a00 	vstr	s15, [r3]
 8003c18:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003c1c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c24:	edc7 7a07 	vstr	s15, [r7, #28]
 8003c28:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003c2c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	edc7 7a06 	vstr	s15, [r7, #24]
 8003c38:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003c3c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c44:	edc7 7a05 	vstr	s15, [r7, #20]
 8003c48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003c4c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c54:	edc7 7a04 	vstr	s15, [r7, #16]
 8003c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6e:	edc3 7a00 	vstr	s15, [r3]
 8003c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3304      	adds	r3, #4
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8a:	edc3 7a00 	vstr	s15, [r3]
 8003c8e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003c92:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
 8003c9e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003ca2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a06 	vstr	s15, [r7, #24]
 8003cae:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003cb2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a05 	vstr	s15, [r7, #20]
 8003cbe:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003cc2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a04 	vstr	s15, [r7, #16]
 8003cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce4:	edc3 7a00 	vstr	s15, [r3]
 8003ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	3304      	adds	r3, #4
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d00:	edc3 7a00 	vstr	s15, [r3]
 8003d04:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f4ff abba 	bcc.w	8003492 <arm_radix8_butterfly_f32+0x746>
 8003d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d22:	3301      	adds	r3, #1
 8003d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d28:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f4ff ab2c 	bcc.w	800338e <arm_radix8_butterfly_f32+0x642>
 8003d36:	893b      	ldrh	r3, [r7, #8]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	813b      	strh	r3, [r7, #8]
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	f63f a813 	bhi.w	8002d6c <arm_radix8_butterfly_f32+0x20>
 8003d46:	e000      	b.n	8003d4a <arm_radix8_butterfly_f32+0xffe>
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	37f4      	adds	r7, #244	@ 0xf4
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
	...

08003d60 <memchr>:
 8003d60:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8003d64:	2a10      	cmp	r2, #16
 8003d66:	db2b      	blt.n	8003dc0 <memchr+0x60>
 8003d68:	f010 0f07 	tst.w	r0, #7
 8003d6c:	d008      	beq.n	8003d80 <memchr+0x20>
 8003d6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d72:	3a01      	subs	r2, #1
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d02d      	beq.n	8003dd4 <memchr+0x74>
 8003d78:	f010 0f07 	tst.w	r0, #7
 8003d7c:	b342      	cbz	r2, 8003dd0 <memchr+0x70>
 8003d7e:	d1f6      	bne.n	8003d6e <memchr+0xe>
 8003d80:	b4f0      	push	{r4, r5, r6, r7}
 8003d82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003d86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003d8a:	f022 0407 	bic.w	r4, r2, #7
 8003d8e:	f07f 0700 	mvns.w	r7, #0
 8003d92:	2300      	movs	r3, #0
 8003d94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003d98:	3c08      	subs	r4, #8
 8003d9a:	ea85 0501 	eor.w	r5, r5, r1
 8003d9e:	ea86 0601 	eor.w	r6, r6, r1
 8003da2:	fa85 f547 	uadd8	r5, r5, r7
 8003da6:	faa3 f587 	sel	r5, r3, r7
 8003daa:	fa86 f647 	uadd8	r6, r6, r7
 8003dae:	faa5 f687 	sel	r6, r5, r7
 8003db2:	b98e      	cbnz	r6, 8003dd8 <memchr+0x78>
 8003db4:	d1ee      	bne.n	8003d94 <memchr+0x34>
 8003db6:	bcf0      	pop	{r4, r5, r6, r7}
 8003db8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8003dbc:	f002 0207 	and.w	r2, r2, #7
 8003dc0:	b132      	cbz	r2, 8003dd0 <memchr+0x70>
 8003dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	ea83 0301 	eor.w	r3, r3, r1
 8003dcc:	b113      	cbz	r3, 8003dd4 <memchr+0x74>
 8003dce:	d1f8      	bne.n	8003dc2 <memchr+0x62>
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4770      	bx	lr
 8003dd4:	3801      	subs	r0, #1
 8003dd6:	4770      	bx	lr
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	bf06      	itte	eq
 8003ddc:	4635      	moveq	r5, r6
 8003dde:	3803      	subeq	r0, #3
 8003de0:	3807      	subne	r0, #7
 8003de2:	f015 0f01 	tst.w	r5, #1
 8003de6:	d107      	bne.n	8003df8 <memchr+0x98>
 8003de8:	3001      	adds	r0, #1
 8003dea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8003dee:	bf02      	ittt	eq
 8003df0:	3001      	addeq	r0, #1
 8003df2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8003df6:	3001      	addeq	r0, #1
 8003df8:	bcf0      	pop	{r4, r5, r6, r7}
 8003dfa:	3801      	subs	r0, #1
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <strlen>:
 8003e00:	4603      	mov	r3, r0
 8003e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d1fb      	bne.n	8003e02 <strlen+0x2>
 8003e0a:	1a18      	subs	r0, r3, r0
 8003e0c:	3801      	subs	r0, #1
 8003e0e:	4770      	bx	lr

08003e10 <__aeabi_drsub>:
 8003e10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8003e14:	e002      	b.n	8003e1c <__adddf3>
 8003e16:	bf00      	nop

08003e18 <__aeabi_dsub>:
 8003e18:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08003e1c <__adddf3>:
 8003e1c:	b530      	push	{r4, r5, lr}
 8003e1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003e22:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003e26:	ea94 0f05 	teq	r4, r5
 8003e2a:	bf08      	it	eq
 8003e2c:	ea90 0f02 	teqeq	r0, r2
 8003e30:	bf1f      	itttt	ne
 8003e32:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003e36:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003e3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003e3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003e42:	f000 80e2 	beq.w	800400a <__adddf3+0x1ee>
 8003e46:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003e4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003e4e:	bfb8      	it	lt
 8003e50:	426d      	neglt	r5, r5
 8003e52:	dd0c      	ble.n	8003e6e <__adddf3+0x52>
 8003e54:	442c      	add	r4, r5
 8003e56:	ea80 0202 	eor.w	r2, r0, r2
 8003e5a:	ea81 0303 	eor.w	r3, r1, r3
 8003e5e:	ea82 0000 	eor.w	r0, r2, r0
 8003e62:	ea83 0101 	eor.w	r1, r3, r1
 8003e66:	ea80 0202 	eor.w	r2, r0, r2
 8003e6a:	ea81 0303 	eor.w	r3, r1, r3
 8003e6e:	2d36      	cmp	r5, #54	@ 0x36
 8003e70:	bf88      	it	hi
 8003e72:	bd30      	pophi	{r4, r5, pc}
 8003e74:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8003e78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003e7c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8003e80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003e84:	d002      	beq.n	8003e8c <__adddf3+0x70>
 8003e86:	4240      	negs	r0, r0
 8003e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003e8c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8003e90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003e94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003e98:	d002      	beq.n	8003ea0 <__adddf3+0x84>
 8003e9a:	4252      	negs	r2, r2
 8003e9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003ea0:	ea94 0f05 	teq	r4, r5
 8003ea4:	f000 80a7 	beq.w	8003ff6 <__adddf3+0x1da>
 8003ea8:	f1a4 0401 	sub.w	r4, r4, #1
 8003eac:	f1d5 0e20 	rsbs	lr, r5, #32
 8003eb0:	db0d      	blt.n	8003ece <__adddf3+0xb2>
 8003eb2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003eb6:	fa22 f205 	lsr.w	r2, r2, r5
 8003eba:	1880      	adds	r0, r0, r2
 8003ebc:	f141 0100 	adc.w	r1, r1, #0
 8003ec0:	fa03 f20e 	lsl.w	r2, r3, lr
 8003ec4:	1880      	adds	r0, r0, r2
 8003ec6:	fa43 f305 	asr.w	r3, r3, r5
 8003eca:	4159      	adcs	r1, r3
 8003ecc:	e00e      	b.n	8003eec <__adddf3+0xd0>
 8003ece:	f1a5 0520 	sub.w	r5, r5, #32
 8003ed2:	f10e 0e20 	add.w	lr, lr, #32
 8003ed6:	2a01      	cmp	r2, #1
 8003ed8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003edc:	bf28      	it	cs
 8003ede:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003ee2:	fa43 f305 	asr.w	r3, r3, r5
 8003ee6:	18c0      	adds	r0, r0, r3
 8003ee8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003eec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003ef0:	d507      	bpl.n	8003f02 <__adddf3+0xe6>
 8003ef2:	f04f 0e00 	mov.w	lr, #0
 8003ef6:	f1dc 0c00 	rsbs	ip, ip, #0
 8003efa:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003efe:	eb6e 0101 	sbc.w	r1, lr, r1
 8003f02:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003f06:	d31b      	bcc.n	8003f40 <__adddf3+0x124>
 8003f08:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003f0c:	d30c      	bcc.n	8003f28 <__adddf3+0x10c>
 8003f0e:	0849      	lsrs	r1, r1, #1
 8003f10:	ea5f 0030 	movs.w	r0, r0, rrx
 8003f14:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003f18:	f104 0401 	add.w	r4, r4, #1
 8003f1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003f20:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8003f24:	f080 809a 	bcs.w	800405c <__adddf3+0x240>
 8003f28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8003f2c:	bf08      	it	eq
 8003f2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003f32:	f150 0000 	adcs.w	r0, r0, #0
 8003f36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f3a:	ea41 0105 	orr.w	r1, r1, r5
 8003f3e:	bd30      	pop	{r4, r5, pc}
 8003f40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003f44:	4140      	adcs	r0, r0
 8003f46:	eb41 0101 	adc.w	r1, r1, r1
 8003f4a:	3c01      	subs	r4, #1
 8003f4c:	bf28      	it	cs
 8003f4e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8003f52:	d2e9      	bcs.n	8003f28 <__adddf3+0x10c>
 8003f54:	f091 0f00 	teq	r1, #0
 8003f58:	bf04      	itt	eq
 8003f5a:	4601      	moveq	r1, r0
 8003f5c:	2000      	moveq	r0, #0
 8003f5e:	fab1 f381 	clz	r3, r1
 8003f62:	bf08      	it	eq
 8003f64:	3320      	addeq	r3, #32
 8003f66:	f1a3 030b 	sub.w	r3, r3, #11
 8003f6a:	f1b3 0220 	subs.w	r2, r3, #32
 8003f6e:	da0c      	bge.n	8003f8a <__adddf3+0x16e>
 8003f70:	320c      	adds	r2, #12
 8003f72:	dd08      	ble.n	8003f86 <__adddf3+0x16a>
 8003f74:	f102 0c14 	add.w	ip, r2, #20
 8003f78:	f1c2 020c 	rsb	r2, r2, #12
 8003f7c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003f80:	fa21 f102 	lsr.w	r1, r1, r2
 8003f84:	e00c      	b.n	8003fa0 <__adddf3+0x184>
 8003f86:	f102 0214 	add.w	r2, r2, #20
 8003f8a:	bfd8      	it	le
 8003f8c:	f1c2 0c20 	rsble	ip, r2, #32
 8003f90:	fa01 f102 	lsl.w	r1, r1, r2
 8003f94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003f98:	bfdc      	itt	le
 8003f9a:	ea41 010c 	orrle.w	r1, r1, ip
 8003f9e:	4090      	lslle	r0, r2
 8003fa0:	1ae4      	subs	r4, r4, r3
 8003fa2:	bfa2      	ittt	ge
 8003fa4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003fa8:	4329      	orrge	r1, r5
 8003faa:	bd30      	popge	{r4, r5, pc}
 8003fac:	ea6f 0404 	mvn.w	r4, r4
 8003fb0:	3c1f      	subs	r4, #31
 8003fb2:	da1c      	bge.n	8003fee <__adddf3+0x1d2>
 8003fb4:	340c      	adds	r4, #12
 8003fb6:	dc0e      	bgt.n	8003fd6 <__adddf3+0x1ba>
 8003fb8:	f104 0414 	add.w	r4, r4, #20
 8003fbc:	f1c4 0220 	rsb	r2, r4, #32
 8003fc0:	fa20 f004 	lsr.w	r0, r0, r4
 8003fc4:	fa01 f302 	lsl.w	r3, r1, r2
 8003fc8:	ea40 0003 	orr.w	r0, r0, r3
 8003fcc:	fa21 f304 	lsr.w	r3, r1, r4
 8003fd0:	ea45 0103 	orr.w	r1, r5, r3
 8003fd4:	bd30      	pop	{r4, r5, pc}
 8003fd6:	f1c4 040c 	rsb	r4, r4, #12
 8003fda:	f1c4 0220 	rsb	r2, r4, #32
 8003fde:	fa20 f002 	lsr.w	r0, r0, r2
 8003fe2:	fa01 f304 	lsl.w	r3, r1, r4
 8003fe6:	ea40 0003 	orr.w	r0, r0, r3
 8003fea:	4629      	mov	r1, r5
 8003fec:	bd30      	pop	{r4, r5, pc}
 8003fee:	fa21 f004 	lsr.w	r0, r1, r4
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	bd30      	pop	{r4, r5, pc}
 8003ff6:	f094 0f00 	teq	r4, #0
 8003ffa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8003ffe:	bf06      	itte	eq
 8004000:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004004:	3401      	addeq	r4, #1
 8004006:	3d01      	subne	r5, #1
 8004008:	e74e      	b.n	8003ea8 <__adddf3+0x8c>
 800400a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800400e:	bf18      	it	ne
 8004010:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004014:	d029      	beq.n	800406a <__adddf3+0x24e>
 8004016:	ea94 0f05 	teq	r4, r5
 800401a:	bf08      	it	eq
 800401c:	ea90 0f02 	teqeq	r0, r2
 8004020:	d005      	beq.n	800402e <__adddf3+0x212>
 8004022:	ea54 0c00 	orrs.w	ip, r4, r0
 8004026:	bf04      	itt	eq
 8004028:	4619      	moveq	r1, r3
 800402a:	4610      	moveq	r0, r2
 800402c:	bd30      	pop	{r4, r5, pc}
 800402e:	ea91 0f03 	teq	r1, r3
 8004032:	bf1e      	ittt	ne
 8004034:	2100      	movne	r1, #0
 8004036:	2000      	movne	r0, #0
 8004038:	bd30      	popne	{r4, r5, pc}
 800403a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800403e:	d105      	bne.n	800404c <__adddf3+0x230>
 8004040:	0040      	lsls	r0, r0, #1
 8004042:	4149      	adcs	r1, r1
 8004044:	bf28      	it	cs
 8004046:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800404a:	bd30      	pop	{r4, r5, pc}
 800404c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8004050:	bf3c      	itt	cc
 8004052:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8004056:	bd30      	popcc	{r4, r5, pc}
 8004058:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800405c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8004060:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	bd30      	pop	{r4, r5, pc}
 800406a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800406e:	bf1a      	itte	ne
 8004070:	4619      	movne	r1, r3
 8004072:	4610      	movne	r0, r2
 8004074:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004078:	bf1c      	itt	ne
 800407a:	460b      	movne	r3, r1
 800407c:	4602      	movne	r2, r0
 800407e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004082:	bf06      	itte	eq
 8004084:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004088:	ea91 0f03 	teqeq	r1, r3
 800408c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8004090:	bd30      	pop	{r4, r5, pc}
 8004092:	bf00      	nop

08004094 <__aeabi_ui2d>:
 8004094:	f090 0f00 	teq	r0, #0
 8004098:	bf04      	itt	eq
 800409a:	2100      	moveq	r1, #0
 800409c:	4770      	bxeq	lr
 800409e:	b530      	push	{r4, r5, lr}
 80040a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80040a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80040a8:	f04f 0500 	mov.w	r5, #0
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	e750      	b.n	8003f54 <__adddf3+0x138>
 80040b2:	bf00      	nop

080040b4 <__aeabi_i2d>:
 80040b4:	f090 0f00 	teq	r0, #0
 80040b8:	bf04      	itt	eq
 80040ba:	2100      	moveq	r1, #0
 80040bc:	4770      	bxeq	lr
 80040be:	b530      	push	{r4, r5, lr}
 80040c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80040c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80040c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80040cc:	bf48      	it	mi
 80040ce:	4240      	negmi	r0, r0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	e73e      	b.n	8003f54 <__adddf3+0x138>
 80040d6:	bf00      	nop

080040d8 <__aeabi_f2d>:
 80040d8:	0042      	lsls	r2, r0, #1
 80040da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80040de:	ea4f 0131 	mov.w	r1, r1, rrx
 80040e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80040e6:	bf1f      	itttt	ne
 80040e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80040ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80040f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80040f4:	4770      	bxne	lr
 80040f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80040fa:	bf08      	it	eq
 80040fc:	4770      	bxeq	lr
 80040fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004102:	bf04      	itt	eq
 8004104:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004108:	4770      	bxeq	lr
 800410a:	b530      	push	{r4, r5, lr}
 800410c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004110:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004114:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004118:	e71c      	b.n	8003f54 <__adddf3+0x138>
 800411a:	bf00      	nop

0800411c <__aeabi_ul2d>:
 800411c:	ea50 0201 	orrs.w	r2, r0, r1
 8004120:	bf08      	it	eq
 8004122:	4770      	bxeq	lr
 8004124:	b530      	push	{r4, r5, lr}
 8004126:	f04f 0500 	mov.w	r5, #0
 800412a:	e00a      	b.n	8004142 <__aeabi_l2d+0x16>

0800412c <__aeabi_l2d>:
 800412c:	ea50 0201 	orrs.w	r2, r0, r1
 8004130:	bf08      	it	eq
 8004132:	4770      	bxeq	lr
 8004134:	b530      	push	{r4, r5, lr}
 8004136:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800413a:	d502      	bpl.n	8004142 <__aeabi_l2d+0x16>
 800413c:	4240      	negs	r0, r0
 800413e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004142:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004146:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800414a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800414e:	f43f aed8 	beq.w	8003f02 <__adddf3+0xe6>
 8004152:	f04f 0203 	mov.w	r2, #3
 8004156:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800415a:	bf18      	it	ne
 800415c:	3203      	addne	r2, #3
 800415e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004162:	bf18      	it	ne
 8004164:	3203      	addne	r2, #3
 8004166:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800416a:	f1c2 0320 	rsb	r3, r2, #32
 800416e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004172:	fa20 f002 	lsr.w	r0, r0, r2
 8004176:	fa01 fe03 	lsl.w	lr, r1, r3
 800417a:	ea40 000e 	orr.w	r0, r0, lr
 800417e:	fa21 f102 	lsr.w	r1, r1, r2
 8004182:	4414      	add	r4, r2
 8004184:	e6bd      	b.n	8003f02 <__adddf3+0xe6>
 8004186:	bf00      	nop

08004188 <__aeabi_dmul>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800418e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004196:	bf1d      	ittte	ne
 8004198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800419c:	ea94 0f0c 	teqne	r4, ip
 80041a0:	ea95 0f0c 	teqne	r5, ip
 80041a4:	f000 f8de 	bleq	8004364 <__aeabi_dmul+0x1dc>
 80041a8:	442c      	add	r4, r5
 80041aa:	ea81 0603 	eor.w	r6, r1, r3
 80041ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80041b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80041b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80041ba:	bf18      	it	ne
 80041bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80041c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80041c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041c8:	d038      	beq.n	800423c <__aeabi_dmul+0xb4>
 80041ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80041ce:	f04f 0500 	mov.w	r5, #0
 80041d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80041d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80041da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80041de:	f04f 0600 	mov.w	r6, #0
 80041e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80041e6:	f09c 0f00 	teq	ip, #0
 80041ea:	bf18      	it	ne
 80041ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80041f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80041f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80041f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80041fc:	d204      	bcs.n	8004208 <__aeabi_dmul+0x80>
 80041fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004202:	416d      	adcs	r5, r5
 8004204:	eb46 0606 	adc.w	r6, r6, r6
 8004208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800420c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800421c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004220:	bf88      	it	hi
 8004222:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004226:	d81e      	bhi.n	8004266 <__aeabi_dmul+0xde>
 8004228:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800422c:	bf08      	it	eq
 800422e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004232:	f150 0000 	adcs.w	r0, r0, #0
 8004236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004240:	ea46 0101 	orr.w	r1, r6, r1
 8004244:	ea40 0002 	orr.w	r0, r0, r2
 8004248:	ea81 0103 	eor.w	r1, r1, r3
 800424c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004250:	bfc2      	ittt	gt
 8004252:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800425a:	bd70      	popgt	{r4, r5, r6, pc}
 800425c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004260:	f04f 0e00 	mov.w	lr, #0
 8004264:	3c01      	subs	r4, #1
 8004266:	f300 80ab 	bgt.w	80043c0 <__aeabi_dmul+0x238>
 800426a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800426e:	bfde      	ittt	le
 8004270:	2000      	movle	r0, #0
 8004272:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8004276:	bd70      	pople	{r4, r5, r6, pc}
 8004278:	f1c4 0400 	rsb	r4, r4, #0
 800427c:	3c20      	subs	r4, #32
 800427e:	da35      	bge.n	80042ec <__aeabi_dmul+0x164>
 8004280:	340c      	adds	r4, #12
 8004282:	dc1b      	bgt.n	80042bc <__aeabi_dmul+0x134>
 8004284:	f104 0414 	add.w	r4, r4, #20
 8004288:	f1c4 0520 	rsb	r5, r4, #32
 800428c:	fa00 f305 	lsl.w	r3, r0, r5
 8004290:	fa20 f004 	lsr.w	r0, r0, r4
 8004294:	fa01 f205 	lsl.w	r2, r1, r5
 8004298:	ea40 0002 	orr.w	r0, r0, r2
 800429c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80042a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80042a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80042a8:	fa21 f604 	lsr.w	r6, r1, r4
 80042ac:	eb42 0106 	adc.w	r1, r2, r6
 80042b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80042b4:	bf08      	it	eq
 80042b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	f1c4 040c 	rsb	r4, r4, #12
 80042c0:	f1c4 0520 	rsb	r5, r4, #32
 80042c4:	fa00 f304 	lsl.w	r3, r0, r4
 80042c8:	fa20 f005 	lsr.w	r0, r0, r5
 80042cc:	fa01 f204 	lsl.w	r2, r1, r4
 80042d0:	ea40 0002 	orr.w	r0, r0, r2
 80042d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80042d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80042dc:	f141 0100 	adc.w	r1, r1, #0
 80042e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80042e4:	bf08      	it	eq
 80042e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f1c4 0520 	rsb	r5, r4, #32
 80042f0:	fa00 f205 	lsl.w	r2, r0, r5
 80042f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80042f8:	fa20 f304 	lsr.w	r3, r0, r4
 80042fc:	fa01 f205 	lsl.w	r2, r1, r5
 8004300:	ea43 0302 	orr.w	r3, r3, r2
 8004304:	fa21 f004 	lsr.w	r0, r1, r4
 8004308:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800430c:	fa21 f204 	lsr.w	r2, r1, r4
 8004310:	ea20 0002 	bic.w	r0, r0, r2
 8004314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800431c:	bf08      	it	eq
 800431e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f094 0f00 	teq	r4, #0
 8004328:	d10f      	bne.n	800434a <__aeabi_dmul+0x1c2>
 800432a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800432e:	0040      	lsls	r0, r0, #1
 8004330:	eb41 0101 	adc.w	r1, r1, r1
 8004334:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004338:	bf08      	it	eq
 800433a:	3c01      	subeq	r4, #1
 800433c:	d0f7      	beq.n	800432e <__aeabi_dmul+0x1a6>
 800433e:	ea41 0106 	orr.w	r1, r1, r6
 8004342:	f095 0f00 	teq	r5, #0
 8004346:	bf18      	it	ne
 8004348:	4770      	bxne	lr
 800434a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800434e:	0052      	lsls	r2, r2, #1
 8004350:	eb43 0303 	adc.w	r3, r3, r3
 8004354:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004358:	bf08      	it	eq
 800435a:	3d01      	subeq	r5, #1
 800435c:	d0f7      	beq.n	800434e <__aeabi_dmul+0x1c6>
 800435e:	ea43 0306 	orr.w	r3, r3, r6
 8004362:	4770      	bx	lr
 8004364:	ea94 0f0c 	teq	r4, ip
 8004368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800436c:	bf18      	it	ne
 800436e:	ea95 0f0c 	teqne	r5, ip
 8004372:	d00c      	beq.n	800438e <__aeabi_dmul+0x206>
 8004374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004378:	bf18      	it	ne
 800437a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800437e:	d1d1      	bne.n	8004324 <__aeabi_dmul+0x19c>
 8004380:	ea81 0103 	eor.w	r1, r1, r3
 8004384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	bd70      	pop	{r4, r5, r6, pc}
 800438e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004392:	bf06      	itte	eq
 8004394:	4610      	moveq	r0, r2
 8004396:	4619      	moveq	r1, r3
 8004398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800439c:	d019      	beq.n	80043d2 <__aeabi_dmul+0x24a>
 800439e:	ea94 0f0c 	teq	r4, ip
 80043a2:	d102      	bne.n	80043aa <__aeabi_dmul+0x222>
 80043a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80043a8:	d113      	bne.n	80043d2 <__aeabi_dmul+0x24a>
 80043aa:	ea95 0f0c 	teq	r5, ip
 80043ae:	d105      	bne.n	80043bc <__aeabi_dmul+0x234>
 80043b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80043b4:	bf1c      	itt	ne
 80043b6:	4610      	movne	r0, r2
 80043b8:	4619      	movne	r1, r3
 80043ba:	d10a      	bne.n	80043d2 <__aeabi_dmul+0x24a>
 80043bc:	ea81 0103 	eor.w	r1, r1, r3
 80043c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80043c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80043c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
 80043d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80043d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80043da:	bd70      	pop	{r4, r5, r6, pc}

080043dc <__aeabi_ddiv>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80043e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80043e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80043ea:	bf1d      	ittte	ne
 80043ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80043f0:	ea94 0f0c 	teqne	r4, ip
 80043f4:	ea95 0f0c 	teqne	r5, ip
 80043f8:	f000 f8a7 	bleq	800454a <__aeabi_ddiv+0x16e>
 80043fc:	eba4 0405 	sub.w	r4, r4, r5
 8004400:	ea81 0e03 	eor.w	lr, r1, r3
 8004404:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800440c:	f000 8088 	beq.w	8004520 <__aeabi_ddiv+0x144>
 8004410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004414:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004418:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800441c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004420:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004424:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004428:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800442c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004430:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004434:	429d      	cmp	r5, r3
 8004436:	bf08      	it	eq
 8004438:	4296      	cmpeq	r6, r2
 800443a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800443e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004442:	d202      	bcs.n	800444a <__aeabi_ddiv+0x6e>
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	ea4f 0232 	mov.w	r2, r2, rrx
 800444a:	1ab6      	subs	r6, r6, r2
 800444c:	eb65 0503 	sbc.w	r5, r5, r3
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	ea4f 0232 	mov.w	r2, r2, rrx
 8004456:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800445a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800445e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004462:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004466:	bf22      	ittt	cs
 8004468:	1ab6      	subcs	r6, r6, r2
 800446a:	4675      	movcs	r5, lr
 800446c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	ea4f 0232 	mov.w	r2, r2, rrx
 8004476:	ebb6 0e02 	subs.w	lr, r6, r2
 800447a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800447e:	bf22      	ittt	cs
 8004480:	1ab6      	subcs	r6, r6, r2
 8004482:	4675      	movcs	r5, lr
 8004484:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	ea4f 0232 	mov.w	r2, r2, rrx
 800448e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004492:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004496:	bf22      	ittt	cs
 8004498:	1ab6      	subcs	r6, r6, r2
 800449a:	4675      	movcs	r5, lr
 800449c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80044a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80044aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80044ae:	bf22      	ittt	cs
 80044b0:	1ab6      	subcs	r6, r6, r2
 80044b2:	4675      	movcs	r5, lr
 80044b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80044b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80044bc:	d018      	beq.n	80044f0 <__aeabi_ddiv+0x114>
 80044be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80044c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80044c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80044ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80044ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80044d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80044d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80044da:	d1c0      	bne.n	800445e <__aeabi_ddiv+0x82>
 80044dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80044e0:	d10b      	bne.n	80044fa <__aeabi_ddiv+0x11e>
 80044e2:	ea41 0100 	orr.w	r1, r1, r0
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80044ee:	e7b6      	b.n	800445e <__aeabi_ddiv+0x82>
 80044f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80044f4:	bf04      	itt	eq
 80044f6:	4301      	orreq	r1, r0
 80044f8:	2000      	moveq	r0, #0
 80044fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80044fe:	bf88      	it	hi
 8004500:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004504:	f63f aeaf 	bhi.w	8004266 <__aeabi_dmul+0xde>
 8004508:	ebb5 0c03 	subs.w	ip, r5, r3
 800450c:	bf04      	itt	eq
 800450e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004516:	f150 0000 	adcs.w	r0, r0, #0
 800451a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004524:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004528:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800452c:	bfc2      	ittt	gt
 800452e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004532:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004536:	bd70      	popgt	{r4, r5, r6, pc}
 8004538:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800453c:	f04f 0e00 	mov.w	lr, #0
 8004540:	3c01      	subs	r4, #1
 8004542:	e690      	b.n	8004266 <__aeabi_dmul+0xde>
 8004544:	ea45 0e06 	orr.w	lr, r5, r6
 8004548:	e68d      	b.n	8004266 <__aeabi_dmul+0xde>
 800454a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800454e:	ea94 0f0c 	teq	r4, ip
 8004552:	bf08      	it	eq
 8004554:	ea95 0f0c 	teqeq	r5, ip
 8004558:	f43f af3b 	beq.w	80043d2 <__aeabi_dmul+0x24a>
 800455c:	ea94 0f0c 	teq	r4, ip
 8004560:	d10a      	bne.n	8004578 <__aeabi_ddiv+0x19c>
 8004562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004566:	f47f af34 	bne.w	80043d2 <__aeabi_dmul+0x24a>
 800456a:	ea95 0f0c 	teq	r5, ip
 800456e:	f47f af25 	bne.w	80043bc <__aeabi_dmul+0x234>
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	e72c      	b.n	80043d2 <__aeabi_dmul+0x24a>
 8004578:	ea95 0f0c 	teq	r5, ip
 800457c:	d106      	bne.n	800458c <__aeabi_ddiv+0x1b0>
 800457e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004582:	f43f aefd 	beq.w	8004380 <__aeabi_dmul+0x1f8>
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	e722      	b.n	80043d2 <__aeabi_dmul+0x24a>
 800458c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004590:	bf18      	it	ne
 8004592:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004596:	f47f aec5 	bne.w	8004324 <__aeabi_dmul+0x19c>
 800459a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800459e:	f47f af0d 	bne.w	80043bc <__aeabi_dmul+0x234>
 80045a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80045a6:	f47f aeeb 	bne.w	8004380 <__aeabi_dmul+0x1f8>
 80045aa:	e712      	b.n	80043d2 <__aeabi_dmul+0x24a>

080045ac <__gedf2>:
 80045ac:	f04f 3cff 	mov.w	ip, #4294967295
 80045b0:	e006      	b.n	80045c0 <__cmpdf2+0x4>
 80045b2:	bf00      	nop

080045b4 <__ledf2>:
 80045b4:	f04f 0c01 	mov.w	ip, #1
 80045b8:	e002      	b.n	80045c0 <__cmpdf2+0x4>
 80045ba:	bf00      	nop

080045bc <__cmpdf2>:
 80045bc:	f04f 0c01 	mov.w	ip, #1
 80045c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80045c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80045c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80045cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80045d0:	bf18      	it	ne
 80045d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80045d6:	d01b      	beq.n	8004610 <__cmpdf2+0x54>
 80045d8:	b001      	add	sp, #4
 80045da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80045de:	bf0c      	ite	eq
 80045e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80045e4:	ea91 0f03 	teqne	r1, r3
 80045e8:	bf02      	ittt	eq
 80045ea:	ea90 0f02 	teqeq	r0, r2
 80045ee:	2000      	moveq	r0, #0
 80045f0:	4770      	bxeq	lr
 80045f2:	f110 0f00 	cmn.w	r0, #0
 80045f6:	ea91 0f03 	teq	r1, r3
 80045fa:	bf58      	it	pl
 80045fc:	4299      	cmppl	r1, r3
 80045fe:	bf08      	it	eq
 8004600:	4290      	cmpeq	r0, r2
 8004602:	bf2c      	ite	cs
 8004604:	17d8      	asrcs	r0, r3, #31
 8004606:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800460a:	f040 0001 	orr.w	r0, r0, #1
 800460e:	4770      	bx	lr
 8004610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004618:	d102      	bne.n	8004620 <__cmpdf2+0x64>
 800461a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800461e:	d107      	bne.n	8004630 <__cmpdf2+0x74>
 8004620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004628:	d1d6      	bne.n	80045d8 <__cmpdf2+0x1c>
 800462a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800462e:	d0d3      	beq.n	80045d8 <__cmpdf2+0x1c>
 8004630:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop

08004638 <__aeabi_cdrcmple>:
 8004638:	4684      	mov	ip, r0
 800463a:	4610      	mov	r0, r2
 800463c:	4662      	mov	r2, ip
 800463e:	468c      	mov	ip, r1
 8004640:	4619      	mov	r1, r3
 8004642:	4663      	mov	r3, ip
 8004644:	e000      	b.n	8004648 <__aeabi_cdcmpeq>
 8004646:	bf00      	nop

08004648 <__aeabi_cdcmpeq>:
 8004648:	b501      	push	{r0, lr}
 800464a:	f7ff ffb7 	bl	80045bc <__cmpdf2>
 800464e:	2800      	cmp	r0, #0
 8004650:	bf48      	it	mi
 8004652:	f110 0f00 	cmnmi.w	r0, #0
 8004656:	bd01      	pop	{r0, pc}

08004658 <__aeabi_dcmpeq>:
 8004658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800465c:	f7ff fff4 	bl	8004648 <__aeabi_cdcmpeq>
 8004660:	bf0c      	ite	eq
 8004662:	2001      	moveq	r0, #1
 8004664:	2000      	movne	r0, #0
 8004666:	f85d fb08 	ldr.w	pc, [sp], #8
 800466a:	bf00      	nop

0800466c <__aeabi_dcmplt>:
 800466c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004670:	f7ff ffea 	bl	8004648 <__aeabi_cdcmpeq>
 8004674:	bf34      	ite	cc
 8004676:	2001      	movcc	r0, #1
 8004678:	2000      	movcs	r0, #0
 800467a:	f85d fb08 	ldr.w	pc, [sp], #8
 800467e:	bf00      	nop

08004680 <__aeabi_dcmple>:
 8004680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004684:	f7ff ffe0 	bl	8004648 <__aeabi_cdcmpeq>
 8004688:	bf94      	ite	ls
 800468a:	2001      	movls	r0, #1
 800468c:	2000      	movhi	r0, #0
 800468e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004692:	bf00      	nop

08004694 <__aeabi_dcmpge>:
 8004694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004698:	f7ff ffce 	bl	8004638 <__aeabi_cdrcmple>
 800469c:	bf94      	ite	ls
 800469e:	2001      	movls	r0, #1
 80046a0:	2000      	movhi	r0, #0
 80046a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80046a6:	bf00      	nop

080046a8 <__aeabi_dcmpgt>:
 80046a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80046ac:	f7ff ffc4 	bl	8004638 <__aeabi_cdrcmple>
 80046b0:	bf34      	ite	cc
 80046b2:	2001      	movcc	r0, #1
 80046b4:	2000      	movcs	r0, #0
 80046b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80046ba:	bf00      	nop

080046bc <__aeabi_dcmpun>:
 80046bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80046c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80046c4:	d102      	bne.n	80046cc <__aeabi_dcmpun+0x10>
 80046c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80046ca:	d10a      	bne.n	80046e2 <__aeabi_dcmpun+0x26>
 80046cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80046d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80046d4:	d102      	bne.n	80046dc <__aeabi_dcmpun+0x20>
 80046d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80046da:	d102      	bne.n	80046e2 <__aeabi_dcmpun+0x26>
 80046dc:	f04f 0000 	mov.w	r0, #0
 80046e0:	4770      	bx	lr
 80046e2:	f04f 0001 	mov.w	r0, #1
 80046e6:	4770      	bx	lr

080046e8 <__aeabi_d2iz>:
 80046e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80046ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80046f0:	d215      	bcs.n	800471e <__aeabi_d2iz+0x36>
 80046f2:	d511      	bpl.n	8004718 <__aeabi_d2iz+0x30>
 80046f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80046f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80046fc:	d912      	bls.n	8004724 <__aeabi_d2iz+0x3c>
 80046fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004706:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800470a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800470e:	fa23 f002 	lsr.w	r0, r3, r2
 8004712:	bf18      	it	ne
 8004714:	4240      	negne	r0, r0
 8004716:	4770      	bx	lr
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	4770      	bx	lr
 800471e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004722:	d105      	bne.n	8004730 <__aeabi_d2iz+0x48>
 8004724:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004728:	bf08      	it	eq
 800472a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800472e:	4770      	bx	lr
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <__aeabi_uldivmod>:
 8004738:	b953      	cbnz	r3, 8004750 <__aeabi_uldivmod+0x18>
 800473a:	b94a      	cbnz	r2, 8004750 <__aeabi_uldivmod+0x18>
 800473c:	2900      	cmp	r1, #0
 800473e:	bf08      	it	eq
 8004740:	2800      	cmpeq	r0, #0
 8004742:	bf1c      	itt	ne
 8004744:	f04f 31ff 	movne.w	r1, #4294967295
 8004748:	f04f 30ff 	movne.w	r0, #4294967295
 800474c:	f000 b96a 	b.w	8004a24 <__aeabi_idiv0>
 8004750:	f1ad 0c08 	sub.w	ip, sp, #8
 8004754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004758:	f000 f806 	bl	8004768 <__udivmoddi4>
 800475c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004764:	b004      	add	sp, #16
 8004766:	4770      	bx	lr

08004768 <__udivmoddi4>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	9d08      	ldr	r5, [sp, #32]
 800476e:	460c      	mov	r4, r1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d14e      	bne.n	8004812 <__udivmoddi4+0xaa>
 8004774:	4694      	mov	ip, r2
 8004776:	458c      	cmp	ip, r1
 8004778:	4686      	mov	lr, r0
 800477a:	fab2 f282 	clz	r2, r2
 800477e:	d962      	bls.n	8004846 <__udivmoddi4+0xde>
 8004780:	b14a      	cbz	r2, 8004796 <__udivmoddi4+0x2e>
 8004782:	f1c2 0320 	rsb	r3, r2, #32
 8004786:	4091      	lsls	r1, r2
 8004788:	fa20 f303 	lsr.w	r3, r0, r3
 800478c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004790:	4319      	orrs	r1, r3
 8004792:	fa00 fe02 	lsl.w	lr, r0, r2
 8004796:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800479a:	fa1f f68c 	uxth.w	r6, ip
 800479e:	fbb1 f4f7 	udiv	r4, r1, r7
 80047a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80047a6:	fb07 1114 	mls	r1, r7, r4, r1
 80047aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80047ae:	fb04 f106 	mul.w	r1, r4, r6
 80047b2:	4299      	cmp	r1, r3
 80047b4:	d90a      	bls.n	80047cc <__udivmoddi4+0x64>
 80047b6:	eb1c 0303 	adds.w	r3, ip, r3
 80047ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80047be:	f080 8112 	bcs.w	80049e6 <__udivmoddi4+0x27e>
 80047c2:	4299      	cmp	r1, r3
 80047c4:	f240 810f 	bls.w	80049e6 <__udivmoddi4+0x27e>
 80047c8:	3c02      	subs	r4, #2
 80047ca:	4463      	add	r3, ip
 80047cc:	1a59      	subs	r1, r3, r1
 80047ce:	fa1f f38e 	uxth.w	r3, lr
 80047d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80047d6:	fb07 1110 	mls	r1, r7, r0, r1
 80047da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80047de:	fb00 f606 	mul.w	r6, r0, r6
 80047e2:	429e      	cmp	r6, r3
 80047e4:	d90a      	bls.n	80047fc <__udivmoddi4+0x94>
 80047e6:	eb1c 0303 	adds.w	r3, ip, r3
 80047ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80047ee:	f080 80fc 	bcs.w	80049ea <__udivmoddi4+0x282>
 80047f2:	429e      	cmp	r6, r3
 80047f4:	f240 80f9 	bls.w	80049ea <__udivmoddi4+0x282>
 80047f8:	4463      	add	r3, ip
 80047fa:	3802      	subs	r0, #2
 80047fc:	1b9b      	subs	r3, r3, r6
 80047fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8004802:	2100      	movs	r1, #0
 8004804:	b11d      	cbz	r5, 800480e <__udivmoddi4+0xa6>
 8004806:	40d3      	lsrs	r3, r2
 8004808:	2200      	movs	r2, #0
 800480a:	e9c5 3200 	strd	r3, r2, [r5]
 800480e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004812:	428b      	cmp	r3, r1
 8004814:	d905      	bls.n	8004822 <__udivmoddi4+0xba>
 8004816:	b10d      	cbz	r5, 800481c <__udivmoddi4+0xb4>
 8004818:	e9c5 0100 	strd	r0, r1, [r5]
 800481c:	2100      	movs	r1, #0
 800481e:	4608      	mov	r0, r1
 8004820:	e7f5      	b.n	800480e <__udivmoddi4+0xa6>
 8004822:	fab3 f183 	clz	r1, r3
 8004826:	2900      	cmp	r1, #0
 8004828:	d146      	bne.n	80048b8 <__udivmoddi4+0x150>
 800482a:	42a3      	cmp	r3, r4
 800482c:	d302      	bcc.n	8004834 <__udivmoddi4+0xcc>
 800482e:	4290      	cmp	r0, r2
 8004830:	f0c0 80f0 	bcc.w	8004a14 <__udivmoddi4+0x2ac>
 8004834:	1a86      	subs	r6, r0, r2
 8004836:	eb64 0303 	sbc.w	r3, r4, r3
 800483a:	2001      	movs	r0, #1
 800483c:	2d00      	cmp	r5, #0
 800483e:	d0e6      	beq.n	800480e <__udivmoddi4+0xa6>
 8004840:	e9c5 6300 	strd	r6, r3, [r5]
 8004844:	e7e3      	b.n	800480e <__udivmoddi4+0xa6>
 8004846:	2a00      	cmp	r2, #0
 8004848:	f040 8090 	bne.w	800496c <__udivmoddi4+0x204>
 800484c:	eba1 040c 	sub.w	r4, r1, ip
 8004850:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004854:	fa1f f78c 	uxth.w	r7, ip
 8004858:	2101      	movs	r1, #1
 800485a:	fbb4 f6f8 	udiv	r6, r4, r8
 800485e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004862:	fb08 4416 	mls	r4, r8, r6, r4
 8004866:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800486a:	fb07 f006 	mul.w	r0, r7, r6
 800486e:	4298      	cmp	r0, r3
 8004870:	d908      	bls.n	8004884 <__udivmoddi4+0x11c>
 8004872:	eb1c 0303 	adds.w	r3, ip, r3
 8004876:	f106 34ff 	add.w	r4, r6, #4294967295
 800487a:	d202      	bcs.n	8004882 <__udivmoddi4+0x11a>
 800487c:	4298      	cmp	r0, r3
 800487e:	f200 80cd 	bhi.w	8004a1c <__udivmoddi4+0x2b4>
 8004882:	4626      	mov	r6, r4
 8004884:	1a1c      	subs	r4, r3, r0
 8004886:	fa1f f38e 	uxth.w	r3, lr
 800488a:	fbb4 f0f8 	udiv	r0, r4, r8
 800488e:	fb08 4410 	mls	r4, r8, r0, r4
 8004892:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004896:	fb00 f707 	mul.w	r7, r0, r7
 800489a:	429f      	cmp	r7, r3
 800489c:	d908      	bls.n	80048b0 <__udivmoddi4+0x148>
 800489e:	eb1c 0303 	adds.w	r3, ip, r3
 80048a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80048a6:	d202      	bcs.n	80048ae <__udivmoddi4+0x146>
 80048a8:	429f      	cmp	r7, r3
 80048aa:	f200 80b0 	bhi.w	8004a0e <__udivmoddi4+0x2a6>
 80048ae:	4620      	mov	r0, r4
 80048b0:	1bdb      	subs	r3, r3, r7
 80048b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80048b6:	e7a5      	b.n	8004804 <__udivmoddi4+0x9c>
 80048b8:	f1c1 0620 	rsb	r6, r1, #32
 80048bc:	408b      	lsls	r3, r1
 80048be:	fa22 f706 	lsr.w	r7, r2, r6
 80048c2:	431f      	orrs	r7, r3
 80048c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80048c8:	fa04 f301 	lsl.w	r3, r4, r1
 80048cc:	ea43 030c 	orr.w	r3, r3, ip
 80048d0:	40f4      	lsrs	r4, r6
 80048d2:	fa00 f801 	lsl.w	r8, r0, r1
 80048d6:	0c38      	lsrs	r0, r7, #16
 80048d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80048dc:	fbb4 fef0 	udiv	lr, r4, r0
 80048e0:	fa1f fc87 	uxth.w	ip, r7
 80048e4:	fb00 441e 	mls	r4, r0, lr, r4
 80048e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80048ec:	fb0e f90c 	mul.w	r9, lr, ip
 80048f0:	45a1      	cmp	r9, r4
 80048f2:	fa02 f201 	lsl.w	r2, r2, r1
 80048f6:	d90a      	bls.n	800490e <__udivmoddi4+0x1a6>
 80048f8:	193c      	adds	r4, r7, r4
 80048fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80048fe:	f080 8084 	bcs.w	8004a0a <__udivmoddi4+0x2a2>
 8004902:	45a1      	cmp	r9, r4
 8004904:	f240 8081 	bls.w	8004a0a <__udivmoddi4+0x2a2>
 8004908:	f1ae 0e02 	sub.w	lr, lr, #2
 800490c:	443c      	add	r4, r7
 800490e:	eba4 0409 	sub.w	r4, r4, r9
 8004912:	fa1f f983 	uxth.w	r9, r3
 8004916:	fbb4 f3f0 	udiv	r3, r4, r0
 800491a:	fb00 4413 	mls	r4, r0, r3, r4
 800491e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004922:	fb03 fc0c 	mul.w	ip, r3, ip
 8004926:	45a4      	cmp	ip, r4
 8004928:	d907      	bls.n	800493a <__udivmoddi4+0x1d2>
 800492a:	193c      	adds	r4, r7, r4
 800492c:	f103 30ff 	add.w	r0, r3, #4294967295
 8004930:	d267      	bcs.n	8004a02 <__udivmoddi4+0x29a>
 8004932:	45a4      	cmp	ip, r4
 8004934:	d965      	bls.n	8004a02 <__udivmoddi4+0x29a>
 8004936:	3b02      	subs	r3, #2
 8004938:	443c      	add	r4, r7
 800493a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800493e:	fba0 9302 	umull	r9, r3, r0, r2
 8004942:	eba4 040c 	sub.w	r4, r4, ip
 8004946:	429c      	cmp	r4, r3
 8004948:	46ce      	mov	lr, r9
 800494a:	469c      	mov	ip, r3
 800494c:	d351      	bcc.n	80049f2 <__udivmoddi4+0x28a>
 800494e:	d04e      	beq.n	80049ee <__udivmoddi4+0x286>
 8004950:	b155      	cbz	r5, 8004968 <__udivmoddi4+0x200>
 8004952:	ebb8 030e 	subs.w	r3, r8, lr
 8004956:	eb64 040c 	sbc.w	r4, r4, ip
 800495a:	fa04 f606 	lsl.w	r6, r4, r6
 800495e:	40cb      	lsrs	r3, r1
 8004960:	431e      	orrs	r6, r3
 8004962:	40cc      	lsrs	r4, r1
 8004964:	e9c5 6400 	strd	r6, r4, [r5]
 8004968:	2100      	movs	r1, #0
 800496a:	e750      	b.n	800480e <__udivmoddi4+0xa6>
 800496c:	f1c2 0320 	rsb	r3, r2, #32
 8004970:	fa20 f103 	lsr.w	r1, r0, r3
 8004974:	fa0c fc02 	lsl.w	ip, ip, r2
 8004978:	fa24 f303 	lsr.w	r3, r4, r3
 800497c:	4094      	lsls	r4, r2
 800497e:	430c      	orrs	r4, r1
 8004980:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004984:	fa00 fe02 	lsl.w	lr, r0, r2
 8004988:	fa1f f78c 	uxth.w	r7, ip
 800498c:	fbb3 f0f8 	udiv	r0, r3, r8
 8004990:	fb08 3110 	mls	r1, r8, r0, r3
 8004994:	0c23      	lsrs	r3, r4, #16
 8004996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800499a:	fb00 f107 	mul.w	r1, r0, r7
 800499e:	4299      	cmp	r1, r3
 80049a0:	d908      	bls.n	80049b4 <__udivmoddi4+0x24c>
 80049a2:	eb1c 0303 	adds.w	r3, ip, r3
 80049a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80049aa:	d22c      	bcs.n	8004a06 <__udivmoddi4+0x29e>
 80049ac:	4299      	cmp	r1, r3
 80049ae:	d92a      	bls.n	8004a06 <__udivmoddi4+0x29e>
 80049b0:	3802      	subs	r0, #2
 80049b2:	4463      	add	r3, ip
 80049b4:	1a5b      	subs	r3, r3, r1
 80049b6:	b2a4      	uxth	r4, r4
 80049b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80049bc:	fb08 3311 	mls	r3, r8, r1, r3
 80049c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80049c4:	fb01 f307 	mul.w	r3, r1, r7
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d908      	bls.n	80049de <__udivmoddi4+0x276>
 80049cc:	eb1c 0404 	adds.w	r4, ip, r4
 80049d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80049d4:	d213      	bcs.n	80049fe <__udivmoddi4+0x296>
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	d911      	bls.n	80049fe <__udivmoddi4+0x296>
 80049da:	3902      	subs	r1, #2
 80049dc:	4464      	add	r4, ip
 80049de:	1ae4      	subs	r4, r4, r3
 80049e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80049e4:	e739      	b.n	800485a <__udivmoddi4+0xf2>
 80049e6:	4604      	mov	r4, r0
 80049e8:	e6f0      	b.n	80047cc <__udivmoddi4+0x64>
 80049ea:	4608      	mov	r0, r1
 80049ec:	e706      	b.n	80047fc <__udivmoddi4+0x94>
 80049ee:	45c8      	cmp	r8, r9
 80049f0:	d2ae      	bcs.n	8004950 <__udivmoddi4+0x1e8>
 80049f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80049f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80049fa:	3801      	subs	r0, #1
 80049fc:	e7a8      	b.n	8004950 <__udivmoddi4+0x1e8>
 80049fe:	4631      	mov	r1, r6
 8004a00:	e7ed      	b.n	80049de <__udivmoddi4+0x276>
 8004a02:	4603      	mov	r3, r0
 8004a04:	e799      	b.n	800493a <__udivmoddi4+0x1d2>
 8004a06:	4630      	mov	r0, r6
 8004a08:	e7d4      	b.n	80049b4 <__udivmoddi4+0x24c>
 8004a0a:	46d6      	mov	lr, sl
 8004a0c:	e77f      	b.n	800490e <__udivmoddi4+0x1a6>
 8004a0e:	4463      	add	r3, ip
 8004a10:	3802      	subs	r0, #2
 8004a12:	e74d      	b.n	80048b0 <__udivmoddi4+0x148>
 8004a14:	4606      	mov	r6, r0
 8004a16:	4623      	mov	r3, r4
 8004a18:	4608      	mov	r0, r1
 8004a1a:	e70f      	b.n	800483c <__udivmoddi4+0xd4>
 8004a1c:	3e02      	subs	r6, #2
 8004a1e:	4463      	add	r3, ip
 8004a20:	e730      	b.n	8004884 <__udivmoddi4+0x11c>
 8004a22:	bf00      	nop

08004a24 <__aeabi_idiv0>:
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop

08004a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <MX_DMA_Init+0x4c>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	4a0f      	ldr	r2, [pc, #60]	@ (8004a74 <MX_DMA_Init+0x4c>)
 8004a38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <MX_DMA_Init+0x4c>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	200e      	movs	r0, #14
 8004a50:	f001 fb35 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004a54:	200e      	movs	r0, #14
 8004a56:	f001 fb4e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2011      	movs	r0, #17
 8004a60:	f001 fb2d 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004a64:	2011      	movs	r0, #17
 8004a66:	f001 fb46 	bl	80060f6 <HAL_NVIC_EnableIRQ>

}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800

08004a78 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	@ 0x30
 8004a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7e:	f107 031c 	add.w	r3, r7, #28
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	4b89      	ldr	r3, [pc, #548]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	4a88      	ldr	r2, [pc, #544]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004a98:	f043 0310 	orr.w	r3, r3, #16
 8004a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a9e:	4b86      	ldr	r3, [pc, #536]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	4b82      	ldr	r3, [pc, #520]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	4a81      	ldr	r2, [pc, #516]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aba:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4a7a      	ldr	r2, [pc, #488]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad6:	4b78      	ldr	r3, [pc, #480]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b74      	ldr	r3, [pc, #464]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	4a73      	ldr	r2, [pc, #460]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004af2:	4b71      	ldr	r3, [pc, #452]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	4a6c      	ldr	r2, [pc, #432]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	4b66      	ldr	r3, [pc, #408]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	4a65      	ldr	r2, [pc, #404]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004b24:	f043 0308 	orr.w	r3, r3, #8
 8004b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b2a:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <MX_GPIO_Init+0x240>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2108      	movs	r1, #8
 8004b3a:	4860      	ldr	r0, [pc, #384]	@ (8004cbc <MX_GPIO_Init+0x244>)
 8004b3c:	f002 f802 	bl	8006b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004b40:	2201      	movs	r2, #1
 8004b42:	2101      	movs	r1, #1
 8004b44:	485e      	ldr	r0, [pc, #376]	@ (8004cc0 <MX_GPIO_Init+0x248>)
 8004b46:	f001 fffd 	bl	8006b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8004b50:	485c      	ldr	r0, [pc, #368]	@ (8004cc4 <MX_GPIO_Init+0x24c>)
 8004b52:	f001 fff7 	bl	8006b44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004b56:	2308      	movs	r3, #8
 8004b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b62:	2300      	movs	r3, #0
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004b66:	f107 031c 	add.w	r3, r7, #28
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4853      	ldr	r0, [pc, #332]	@ (8004cbc <MX_GPIO_Init+0x244>)
 8004b6e:	f001 fe4d 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b76:	2301      	movs	r3, #1
 8004b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004b82:	f107 031c 	add.w	r3, r7, #28
 8004b86:	4619      	mov	r1, r3
 8004b88:	484d      	ldr	r0, [pc, #308]	@ (8004cc0 <MX_GPIO_Init+0x248>)
 8004b8a:	f001 fe3f 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004b92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b9c:	f107 031c 	add.w	r3, r7, #28
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4849      	ldr	r0, [pc, #292]	@ (8004cc8 <MX_GPIO_Init+0x250>)
 8004ba4:	f001 fe32 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004ba8:	2310      	movs	r3, #16
 8004baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bac:	2302      	movs	r3, #2
 8004bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004bb8:	2306      	movs	r3, #6
 8004bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004bbc:	f107 031c 	add.w	r3, r7, #28
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4841      	ldr	r0, [pc, #260]	@ (8004cc8 <MX_GPIO_Init+0x250>)
 8004bc4:	f001 fe22 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004bc8:	2304      	movs	r3, #4
 8004bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	4619      	mov	r1, r3
 8004bda:	483c      	ldr	r0, [pc, #240]	@ (8004ccc <MX_GPIO_Init+0x254>)
 8004bdc:	f001 fe16 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004be0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8004be4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004be6:	2301      	movs	r3, #1
 8004be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bf2:	f107 031c 	add.w	r3, r7, #28
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4832      	ldr	r0, [pc, #200]	@ (8004cc4 <MX_GPIO_Init+0x24c>)
 8004bfa:	f001 fe07 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004bfe:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8004c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c04:	2302      	movs	r3, #2
 8004c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c10:	2306      	movs	r3, #6
 8004c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c14:	f107 031c 	add.w	r3, r7, #28
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4829      	ldr	r0, [pc, #164]	@ (8004cc0 <MX_GPIO_Init+0x248>)
 8004c1c:	f001 fdf6 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004c2e:	f107 031c 	add.w	r3, r7, #28
 8004c32:	4619      	mov	r1, r3
 8004c34:	4824      	ldr	r0, [pc, #144]	@ (8004cc8 <MX_GPIO_Init+0x250>)
 8004c36:	f001 fde9 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004c3a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c40:	2302      	movs	r3, #2
 8004c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c4c:	230a      	movs	r3, #10
 8004c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c50:	f107 031c 	add.w	r3, r7, #28
 8004c54:	4619      	mov	r1, r3
 8004c56:	481c      	ldr	r0, [pc, #112]	@ (8004cc8 <MX_GPIO_Init+0x250>)
 8004c58:	f001 fdd8 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c60:	2300      	movs	r3, #0
 8004c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4815      	ldr	r0, [pc, #84]	@ (8004cc4 <MX_GPIO_Init+0x24c>)
 8004c70:	f001 fdcc 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004c74:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8004c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c7a:	2312      	movs	r3, #18
 8004c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c82:	2300      	movs	r3, #0
 8004c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c86:	2304      	movs	r3, #4
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8a:	f107 031c 	add.w	r3, r7, #28
 8004c8e:	4619      	mov	r1, r3
 8004c90:	480e      	ldr	r0, [pc, #56]	@ (8004ccc <MX_GPIO_Init+0x254>)
 8004c92:	f001 fdbb 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004c96:	2302      	movs	r3, #2
 8004c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004c9a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8004c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4804      	ldr	r0, [pc, #16]	@ (8004cbc <MX_GPIO_Init+0x244>)
 8004cac:	f001 fdae 	bl	800680c <HAL_GPIO_Init>

}
 8004cb0:	bf00      	nop
 8004cb2:	3730      	adds	r7, #48	@ 0x30
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40020800 	.word	0x40020800
 8004cc4:	40020c00 	.word	0x40020c00
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40020400 	.word	0x40020400

08004cd0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8004cd4:	4b13      	ldr	r3, [pc, #76]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004cd6:	4a14      	ldr	r2, [pc, #80]	@ (8004d28 <MX_I2S2_Init+0x58>)
 8004cd8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004cdc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004ce0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8004ce2:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004cea:	2203      	movs	r2, #3
 8004cec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004cee:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004cf6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004cfa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8004cfc:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8004d0e:	4805      	ldr	r0, [pc, #20]	@ (8004d24 <MX_I2S2_Init+0x54>)
 8004d10:	f001 ff32 	bl	8006b78 <HAL_I2S_Init>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8004d1a:	f000 fdb9 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	200001f0 	.word	0x200001f0
 8004d28:	40003800 	.word	0x40003800

08004d2c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	@ 0x38
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4a      	ldr	r2, [pc, #296]	@ (8004e80 <HAL_I2S_MspInit+0x154>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	f040 808c 	bne.w	8004e76 <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8004d62:	23c0      	movs	r3, #192	@ 0xc0
 8004d64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004d66:	2302      	movs	r3, #2
 8004d68:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d6a:	f107 0314 	add.w	r3, r7, #20
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f003 f93c 	bl	8007fec <HAL_RCCEx_PeriphCLKConfig>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004d7a:	f000 fd89 	bl	8005890 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	4b40      	ldr	r3, [pc, #256]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	4a3f      	ldr	r2, [pc, #252]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	4b39      	ldr	r3, [pc, #228]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	4a38      	ldr	r2, [pc, #224]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004daa:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	4b32      	ldr	r3, [pc, #200]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	4a31      	ldr	r2, [pc, #196]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004dc0:	f043 0302 	orr.w	r3, r3, #2
 8004dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e84 <HAL_I2S_MspInit+0x158>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dde:	2300      	movs	r3, #0
 8004de0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004de2:	2305      	movs	r3, #5
 8004de4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dea:	4619      	mov	r1, r3
 8004dec:	4826      	ldr	r0, [pc, #152]	@ (8004e88 <HAL_I2S_MspInit+0x15c>)
 8004dee:	f001 fd0d 	bl	800680c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8004df2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e00:	2300      	movs	r3, #0
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e04:	2305      	movs	r3, #5
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	481f      	ldr	r0, [pc, #124]	@ (8004e8c <HAL_I2S_MspInit+0x160>)
 8004e10:	f001 fcfc 	bl	800680c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004e14:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <HAL_I2S_MspInit+0x168>)
 8004e18:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e20:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e26:	4b1a      	ldr	r3, [pc, #104]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e2c:	4b18      	ldr	r3, [pc, #96]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e32:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e34:	4b16      	ldr	r3, [pc, #88]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e3c:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e42:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004e44:	4b12      	ldr	r3, [pc, #72]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e4a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e52:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e54:	4b0e      	ldr	r3, [pc, #56]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004e5a:	480d      	ldr	r0, [pc, #52]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e5c:	f001 f966 	bl	800612c <HAL_DMA_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8004e66:	f000 fd13 	bl	8005890 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a08      	ldr	r2, [pc, #32]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e70:	4a07      	ldr	r2, [pc, #28]	@ (8004e90 <HAL_I2S_MspInit+0x164>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004e76:	bf00      	nop
 8004e78:	3738      	adds	r7, #56	@ 0x38
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40003800 	.word	0x40003800
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020800 	.word	0x40020800
 8004e8c:	40020400 	.word	0x40020400
 8004e90:	20000238 	.word	0x20000238
 8004e94:	40026058 	.word	0x40026058

08004e98 <HAL_I2S_RxHalfCpltCallback>:
arm_fir_instance_f32 fir_instance;

void SystemClock_Config(void);

// DMA Callbacks
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
    active_buffer = 0;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
    fft_ready = 1;
 8004ea6:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_I2S_RxHalfCpltCallback+0x24>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	701a      	strb	r2, [r3, #0]
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	20004aac 	.word	0x20004aac
 8004ebc:	20004aad 	.word	0x20004aad

08004ec0 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
    active_buffer = 1;
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_I2S_RxCpltCallback+0x20>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
    fft_ready = 1;
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_I2S_RxCpltCallback+0x24>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	20004aac 	.word	0x20004aac
 8004ee4:	20004aad 	.word	0x20004aad

08004ee8 <init_filters>:

void init_filters() {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af02      	add	r7, sp, #8
    arm_fir_init_f32(&fir_instance, FILTER_TAP_NUM, bp_filter, fir_state, FFT_SIZE);
 8004eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4b04      	ldr	r3, [pc, #16]	@ (8004f08 <init_filters+0x20>)
 8004ef6:	4a05      	ldr	r2, [pc, #20]	@ (8004f0c <init_filters+0x24>)
 8004ef8:	2120      	movs	r1, #32
 8004efa:	4805      	ldr	r0, [pc, #20]	@ (8004f10 <init_filters+0x28>)
 8004efc:	f7fb ffa4 	bl	8000e48 <arm_fir_init_f32>
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20005ab0 	.word	0x20005ab0
 8004f0c:	080ecf4c 	.word	0x080ecf4c
 8004f10:	20006b44 	.word	0x20006b44

08004f14 <bandpass_filter>:

void bandpass_filter(float32_t *input, float32_t *output) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    arm_fir_f32(&fir_instance, input, output, FFT_SIZE);
 8004f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4803      	ldr	r0, [pc, #12]	@ (8004f34 <bandpass_filter+0x20>)
 8004f28:	f7fb fa5b 	bl	80003e2 <arm_fir_f32>
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20006b44 	.word	0x20006b44

08004f38 <send_frequency_data>:

void send_frequency_data(float* mag_output) {
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	f5ad 6d86 	sub.w	sp, sp, #1072	@ 0x430
 8004f40:	af04      	add	r7, sp, #16
 8004f42:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8004f46:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8004f4a:	6018      	str	r0, [r3, #0]
    const int start_bin = (int)(MIN_FREQ * FFT_SIZE / SAMPLING_RATE);
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    const int end_bin = (int)(MAX_FREQ * FFT_SIZE / SAMPLING_RATE);
 8004f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f56:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
    char buffer[1024];
    int offset = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c

    // Skip bin 0 if it's below the desired frequency range
    for (int i = (start_bin > 0 ? start_bin : 1); i <= end_bin; i++) {
 8004f60:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	bfb8      	it	lt
 8004f68:	2301      	movlt	r3, #1
 8004f6a:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8004f6e:	e04a      	b.n	8005006 <send_frequency_data+0xce>
        float freq = i * (SAMPLING_RATE / FFT_SIZE);  // 125Hz per bin
 8004f70:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8004f74:	ee07 3a90 	vmov	s15, r3
 8004f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8005064 <send_frequency_data+0x12c>
 8004f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f84:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8004f88:	edc3 7a00 	vstr	s15, [r3]
        float mag = mag_output[i];
 8004f8c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8004f96:	f2a2 421c 	subw	r2, r2, #1052	@ 0x41c
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8004fa4:	6013      	str	r3, [r2, #0]
        offset += snprintf(buffer + offset, sizeof(buffer) - offset,
 8004fa6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8004faa:	f107 0208 	add.w	r2, r7, #8
 8004fae:	18d6      	adds	r6, r2, r3
 8004fb0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8004fb4:	f5c3 6880 	rsb	r8, r3, #1024	@ 0x400
 8004fb8:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	f7ff f88b 	bl	80040d8 <__aeabi_f2d>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	460d      	mov	r5, r1
 8004fc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	f7ff f884 	bl	80040d8 <__aeabi_f2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fd8:	e9cd 4500 	strd	r4, r5, [sp]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	@ (8005068 <send_frequency_data+0x130>)
 8004fde:	4641      	mov	r1, r8
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f004 faf3 	bl	80095cc <sniprintf>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8004fec:	4413      	add	r3, r2
 8004fee:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
                           "%.1fhz:%.2f ", freq, mag);
        if (offset >= sizeof(buffer) - 20) break; // Prevent overflow
 8004ff2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8004ff6:	f5b3 7f7b 	cmp.w	r3, #1004	@ 0x3ec
 8004ffa:	d20b      	bcs.n	8005014 <send_frequency_data+0xdc>
    for (int i = (start_bin > 0 ? start_bin : 1); i <= end_bin; i++) {
 8004ffc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8005000:	3301      	adds	r3, #1
 8005002:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8005006:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 800500a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 800500e:	429a      	cmp	r2, r3
 8005010:	ddae      	ble.n	8004f70 <send_frequency_data+0x38>
 8005012:	e000      	b.n	8005016 <send_frequency_data+0xde>
        if (offset >= sizeof(buffer) - 20) break; // Prevent overflow
 8005014:	bf00      	nop
    }

    if (offset > 0) {
 8005016:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800501a:	2b00      	cmp	r3, #0
 800501c:	dd1c      	ble.n	8005058 <send_frequency_data+0x120>
        buffer[offset-1] = '\r'; // Replace last space
 800501e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8005022:	3b01      	subs	r3, #1
 8005024:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8005028:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 800502c:	210d      	movs	r1, #13
 800502e:	54d1      	strb	r1, [r2, r3]
        buffer[offset] = '\n';
 8005030:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8005034:	f5a3 6283 	sub.w	r2, r3, #1048	@ 0x418
 8005038:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800503c:	4413      	add	r3, r2
 800503e:	220a      	movs	r2, #10
 8005040:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, offset+1, 100);
 8005042:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8005046:	b29b      	uxth	r3, r3
 8005048:	3301      	adds	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	f107 0108 	add.w	r1, r7, #8
 8005050:	2364      	movs	r3, #100	@ 0x64
 8005052:	4806      	ldr	r0, [pc, #24]	@ (800506c <send_frequency_data+0x134>)
 8005054:	f003 f9e5 	bl	8008422 <HAL_UART_Transmit>
    }
}
 8005058:	bf00      	nop
 800505a:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 800505e:	46bd      	mov	sp, r7
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005064:	40fa0000 	.word	0x40fa0000
 8005068:	0800c318 	.word	0x0800c318
 800506c:	20006bac 	.word	0x20006bac

08005070 <main>:


int main(void) {
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	f5ad 5d84 	sub.w	sp, sp, #4224	@ 0x1080
 8005076:	b086      	sub	sp, #24
 8005078:	af04      	add	r7, sp, #16
    HAL_Init();
 800507a:	f000 feaf 	bl	8005ddc <HAL_Init>
    SystemClock_Config();
 800507e:	f000 fb9d 	bl	80057bc <SystemClock_Config>
    MX_GPIO_Init();
 8005082:	f7ff fcf9 	bl	8004a78 <MX_GPIO_Init>
    MX_DMA_Init();
 8005086:	f7ff fccf 	bl	8004a28 <MX_DMA_Init>
    MX_SPI1_Init();
 800508a:	f000 fc15 	bl	80058b8 <MX_SPI1_Init>
    MX_I2S2_Init();
 800508e:	f7ff fe1f 	bl	8004cd0 <MX_I2S2_Init>
    MX_USART2_UART_Init();
 8005092:	f000 fdd3 	bl	8005c3c <MX_USART2_UART_Init>
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8005096:	4bc0      	ldr	r3, [pc, #768]	@ (8005398 <main+0x328>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]

    // FFT initialization
    if (arm_rfft_fast_init_1024_f32(&fft_instance) != ARM_MATH_SUCCESS) {
 800509c:	48bf      	ldr	r0, [pc, #764]	@ (800539c <main+0x32c>)
 800509e:	f7fc f987 	bl	80013b0 <arm_rfft_fast_init_1024_f32>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d017      	beq.n	80050d8 <main+0x68>
        char debug_buf[50];
        sprintf(debug_buf, "FFT Init Failed!\r\n");
 80050a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80050ac:	3b04      	subs	r3, #4
 80050ae:	49bc      	ldr	r1, [pc, #752]	@ (80053a0 <main+0x330>)
 80050b0:	4618      	mov	r0, r3
 80050b2:	f004 fabf 	bl	8009634 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), 100);
 80050b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80050ba:	3b04      	subs	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe fe9f 	bl	8003e00 <strlen>
 80050c2:	4603      	mov	r3, r0
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80050ca:	3904      	subs	r1, #4
 80050cc:	2364      	movs	r3, #100	@ 0x64
 80050ce:	48b2      	ldr	r0, [pc, #712]	@ (8005398 <main+0x328>)
 80050d0:	f003 f9a7 	bl	8008422 <HAL_UART_Transmit>
        while(1);
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <main+0x64>
    }
    init_filters();
 80050d8:	f7ff ff06 	bl	8004ee8 <init_filters>
    HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)i2s_rx_buffer, BUFFER_SIZE * 2);
 80050dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050e0:	49b0      	ldr	r1, [pc, #704]	@ (80053a4 <main+0x334>)
 80050e2:	48b1      	ldr	r0, [pc, #708]	@ (80053a8 <main+0x338>)
 80050e4:	f001 fe88 	bl	8006df8 <HAL_I2S_Receive_DMA>

    while(1) {
        if(fft_ready) {
 80050e8:	4bb0      	ldr	r3, [pc, #704]	@ (80053ac <main+0x33c>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8358 	beq.w	80057a4 <main+0x734>
            fft_ready = 0;
 80050f4:	4bad      	ldr	r3, [pc, #692]	@ (80053ac <main+0x33c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
            int32_t *processing_buffer = i2s_rx_buffer[active_buffer];
 80050fa:	4bad      	ldr	r3, [pc, #692]	@ (80053b0 <main+0x340>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	4aa8      	ldr	r2, [pc, #672]	@ (80053a4 <main+0x334>)
 8005104:	4413      	add	r3, r2
 8005106:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800510a:	f102 0210 	add.w	r2, r2, #16
 800510e:	6013      	str	r3, [r2, #0]

            // DC offset calculation
            int32_t dc_offset = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8005116:	f102 0204 	add.w	r2, r2, #4
 800511a:	6013      	str	r3, [r2, #0]
            for(int i=0; i<FFT_SIZE; i++) {
 800511c:	2300      	movs	r3, #0
 800511e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e01e      	b.n	8005164 <main+0xf4>
                dc_offset += (processing_buffer[i] << 8) >> 8;
 8005126:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005132:	f102 0210 	add.w	r2, r2, #16
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	4413      	add	r3, r2
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	121b      	asrs	r3, r3, #8
 8005140:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8005144:	f102 0204 	add.w	r2, r2, #4
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4413      	add	r3, r2
 800514c:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8005150:	f102 0204 	add.w	r2, r2, #4
 8005154:	6013      	str	r3, [r2, #0]
            for(int i=0; i<FFT_SIZE; i++) {
 8005156:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800516e:	dbda      	blt.n	8005126 <main+0xb6>
            }
            dc_offset /= FFT_SIZE;
 8005170:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8005174:	f103 0304 	add.w	r3, r3, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da01      	bge.n	8005182 <main+0x112>
 800517e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8005182:	129b      	asrs	r3, r3, #10
 8005184:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8005188:	f102 0204 	add.w	r2, r2, #4
 800518c:	6013      	str	r3, [r2, #0]

            // Convert to float
            for(int i=0; i<FFT_SIZE; i++) {
 800518e:	2300      	movs	r3, #0
 8005190:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005194:	f102 021c 	add.w	r2, r2, #28
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e049      	b.n	8005230 <main+0x1c0>
                int32_t pcm_data = ((processing_buffer[i] << 8) >> 8) - dc_offset;
 800519c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80051a0:	f103 031c 	add.w	r3, r3, #28
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80051ac:	f102 0210 	add.w	r2, r2, #16
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	121a      	asrs	r2, r3, #8
 80051ba:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 80051be:	f103 0304 	add.w	r3, r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80051ca:	f102 0204 	add.w	r2, r2, #4
 80051ce:	6013      	str	r3, [r2, #0]
                pcm_data *= GAIN;
 80051d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80051d4:	f103 0304 	add.w	r3, r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80051e6:	f102 0204 	add.w	r2, r2, #4
 80051ea:	6013      	str	r3, [r2, #0]
                fft_input[i] = (float32_t)pcm_data / 8388608.0f;
 80051ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80051f0:	f103 0304 	add.w	r3, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fe:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80053b4 <main+0x344>
 8005202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005206:	4a6c      	ldr	r2, [pc, #432]	@ (80053b8 <main+0x348>)
 8005208:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800520c:	f103 031c 	add.w	r3, r3, #28
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	edc3 7a00 	vstr	s15, [r3]
            for(int i=0; i<FFT_SIZE; i++) {
 800521a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800521e:	f103 031c 	add.w	r3, r3, #28
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800522a:	f102 021c 	add.w	r2, r2, #28
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005234:	f103 031c 	add.w	r3, r3, #28
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	dbad      	blt.n	800519c <main+0x12c>
            }

            // Filtering and windowing
            float32_t filtered_output[FFT_SIZE];
            bandpass_filter(fft_input, filtered_output);
 8005240:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005244:	3b04      	subs	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	485b      	ldr	r0, [pc, #364]	@ (80053b8 <main+0x348>)
 800524a:	f7ff fe63 	bl	8004f14 <bandpass_filter>
            arm_hanning_f32(hanning_window, FFT_SIZE);
 800524e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005252:	485a      	ldr	r0, [pc, #360]	@ (80053bc <main+0x34c>)
 8005254:	f7fc f986 	bl	8001564 <arm_hanning_f32>
            for(int i=0; i<FFT_SIZE; i++) {
 8005258:	2300      	movs	r3, #0
 800525a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800525e:	f102 0218 	add.w	r2, r2, #24
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e02d      	b.n	80052c2 <main+0x252>
                fft_input[i] = filtered_output[i] * hanning_window[i];
 8005266:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800526a:	461a      	mov	r2, r3
 800526c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005270:	f103 0318 	add.w	r3, r3, #24
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	3b44      	subs	r3, #68	@ 0x44
 800527c:	ed93 7a00 	vldr	s14, [r3]
 8005280:	4a4e      	ldr	r2, [pc, #312]	@ (80053bc <main+0x34c>)
 8005282:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005286:	f103 0318 	add.w	r3, r3, #24
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005298:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <main+0x348>)
 800529a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800529e:	f103 0318 	add.w	r3, r3, #24
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	edc3 7a00 	vstr	s15, [r3]
            for(int i=0; i<FFT_SIZE; i++) {
 80052ac:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80052b0:	f103 0318 	add.w	r3, r3, #24
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80052bc:	f102 0218 	add.w	r2, r2, #24
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80052c6:	f103 0318 	add.w	r3, r3, #24
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d0:	dbc9      	blt.n	8005266 <main+0x1f6>
            }

            // FFT processing
            arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 80052d2:	2300      	movs	r3, #0
 80052d4:	4a3a      	ldr	r2, [pc, #232]	@ (80053c0 <main+0x350>)
 80052d6:	4938      	ldr	r1, [pc, #224]	@ (80053b8 <main+0x348>)
 80052d8:	4830      	ldr	r0, [pc, #192]	@ (800539c <main+0x32c>)
 80052da:	f7fb ff89 	bl	80011f0 <arm_rfft_fast_f32>
            arm_cmplx_mag_f32(fft_output, mag_output, FFT_SIZE/2);
 80052de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052e2:	4938      	ldr	r1, [pc, #224]	@ (80053c4 <main+0x354>)
 80052e4:	4836      	ldr	r0, [pc, #216]	@ (80053c0 <main+0x350>)
 80052e6:	f7fa ff73 	bl	80001d0 <arm_cmplx_mag_f32>

            for(int i=0; i<FFT_SIZE/2; i++) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80052f0:	f102 0214 	add.w	r2, r2, #20
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e022      	b.n	800533e <main+0x2ce>
                mag_output[i] *= FFT_SCALE_FACTOR * GAIN;
 80052f8:	4a32      	ldr	r2, [pc, #200]	@ (80053c4 <main+0x354>)
 80052fa:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80052fe:	f103 0314 	add.w	r3, r3, #20
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	edd3 7a00 	vldr	s15, [r3]
 800530c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80053c8 <main+0x358>
 8005310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005314:	4a2b      	ldr	r2, [pc, #172]	@ (80053c4 <main+0x354>)
 8005316:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800531a:	f103 0314 	add.w	r3, r3, #20
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	edc3 7a00 	vstr	s15, [r3]
            for(int i=0; i<FFT_SIZE/2; i++) {
 8005328:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800532c:	f103 0314 	add.w	r3, r3, #20
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3301      	adds	r3, #1
 8005334:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005338:	f102 0214 	add.w	r2, r2, #20
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005342:	f103 0314 	add.w	r3, r3, #20
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800534c:	dbd4      	blt.n	80052f8 <main+0x288>
            }

            send_frequency_data(mag_output);
 800534e:	481d      	ldr	r0, [pc, #116]	@ (80053c4 <main+0x354>)
 8005350:	f7ff fdf2 	bl	8004f38 <send_frequency_data>

            if(!calibrated) {
 8005354:	4b1d      	ldr	r3, [pc, #116]	@ (80053cc <main+0x35c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f040 80d4 	bne.w	8005506 <main+0x496>
                if(HAL_GetTick() <= CALIBRATION_TIME) {
 800535e:	f000 fda3 	bl	8005ea8 <HAL_GetTick>
 8005362:	4603      	mov	r3, r0
 8005364:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005368:	4293      	cmp	r3, r2
 800536a:	f200 809c 	bhi.w	80054a6 <main+0x436>
                    // Store baseline for each bin group
                    for(int i=VOCAL_START_BIN; i<VOCAL_END_BIN; i+=BIN_GROUP_SIZE) {
 800536e:	2307      	movs	r3, #7
 8005370:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005374:	f102 0210 	add.w	r2, r2, #16
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e08b      	b.n	8005494 <main+0x424>
                        float group_sum = 0;
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005384:	f102 020c 	add.w	r2, r2, #12
 8005388:	6013      	str	r3, [r2, #0]
                        for(int j=0; j<BIN_GROUP_SIZE; j++){
 800538a:	2300      	movs	r3, #0
 800538c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005390:	f102 0208 	add.w	r2, r2, #8
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e052      	b.n	800543e <main+0x3ce>
 8005398:	20006bac 	.word	0x20006bac
 800539c:	20006b2c 	.word	0x20006b2c
 80053a0:	0800c328 	.word	0x0800c328
 80053a4:	200002ac 	.word	0x200002ac
 80053a8:	200001f0 	.word	0x200001f0
 80053ac:	20004aad 	.word	0x20004aad
 80053b0:	20004aac 	.word	0x20004aac
 80053b4:	4b000000 	.word	0x4b000000
 80053b8:	200022ac 	.word	0x200022ac
 80053bc:	20004ab0 	.word	0x20004ab0
 80053c0:	200032ac 	.word	0x200032ac
 80053c4:	200042ac 	.word	0x200042ac
 80053c8:	409c4000 	.word	0x409c4000
 80053cc:	200002a4 	.word	0x200002a4
                            if(i+j >= FFT_SIZE/2) break;
 80053d0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80053d4:	f103 0310 	add.w	r3, r3, #16
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80053de:	f103 0308 	add.w	r3, r3, #8
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ea:	da30      	bge.n	800544e <main+0x3de>
                            group_sum += mag_output[i+j];
 80053ec:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80053f0:	f103 0310 	add.w	r3, r3, #16
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80053fa:	f103 0308 	add.w	r3, r3, #8
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4413      	add	r3, r2
 8005402:	4acb      	ldr	r2, [pc, #812]	@ (8005730 <main+0x6c0>)
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	edd3 7a00 	vldr	s15, [r3]
 800540c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005410:	f103 030c 	add.w	r3, r3, #12
 8005414:	ed93 7a00 	vldr	s14, [r3]
 8005418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800541c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005420:	f103 030c 	add.w	r3, r3, #12
 8005424:	edc3 7a00 	vstr	s15, [r3]
                        for(int j=0; j<BIN_GROUP_SIZE; j++){
 8005428:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800542c:	f103 0308 	add.w	r3, r3, #8
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005438:	f102 0208 	add.w	r2, r2, #8
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005442:	f103 0308 	add.w	r3, r3, #8
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b02      	cmp	r3, #2
 800544a:	ddc1      	ble.n	80053d0 <main+0x360>
 800544c:	e000      	b.n	8005450 <main+0x3e0>
                            if(i+j >= FFT_SIZE/2) break;
 800544e:	bf00      	nop
                        }
                        calibration_sum += group_sum/BIN_GROUP_SIZE;
 8005450:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005454:	f103 030c 	add.w	r3, r3, #12
 8005458:	edd3 7a00 	vldr	s15, [r3]
 800545c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8005460:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005464:	4bb3      	ldr	r3, [pc, #716]	@ (8005734 <main+0x6c4>)
 8005466:	edd3 7a00 	vldr	s15, [r3]
 800546a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800546e:	4bb1      	ldr	r3, [pc, #708]	@ (8005734 <main+0x6c4>)
 8005470:	edc3 7a00 	vstr	s15, [r3]
                        calibration_samples++;
 8005474:	4bb0      	ldr	r3, [pc, #704]	@ (8005738 <main+0x6c8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	4aaf      	ldr	r2, [pc, #700]	@ (8005738 <main+0x6c8>)
 800547c:	6013      	str	r3, [r2, #0]
                    for(int i=VOCAL_START_BIN; i<VOCAL_END_BIN; i+=BIN_GROUP_SIZE) {
 800547e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005482:	f103 0310 	add.w	r3, r3, #16
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3303      	adds	r3, #3
 800548a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800548e:	f102 0210 	add.w	r2, r2, #16
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005498:	f103 0310 	add.w	r3, r3, #16
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b26      	cmp	r3, #38	@ 0x26
 80054a0:	f77f af6c 	ble.w	800537c <main+0x30c>
 80054a4:	e17e      	b.n	80057a4 <main+0x734>
                    }
                }
                else {
                    // Calculate average per bin group
                    prev_average_magnitude = calibration_sum / calibration_samples;
 80054a6:	4ba3      	ldr	r3, [pc, #652]	@ (8005734 <main+0x6c4>)
 80054a8:	edd3 6a00 	vldr	s13, [r3]
 80054ac:	4ba2      	ldr	r3, [pc, #648]	@ (8005738 <main+0x6c8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054bc:	4b9f      	ldr	r3, [pc, #636]	@ (800573c <main+0x6cc>)
 80054be:	edc3 7a00 	vstr	s15, [r3]
                    calibrated = 1;
 80054c2:	4b9f      	ldr	r3, [pc, #636]	@ (8005740 <main+0x6d0>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

                    char cal_msg[64];
                    snprintf(cal_msg, sizeof(cal_msg), "CALIBRATED:%.2f\r\n", prev_average_magnitude);
 80054c8:	4b9c      	ldr	r3, [pc, #624]	@ (800573c <main+0x6cc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe fe03 	bl	80040d8 <__aeabi_f2d>
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	3b04      	subs	r3, #4
 80054d8:	e9cd 0100 	strd	r0, r1, [sp]
 80054dc:	4a99      	ldr	r2, [pc, #612]	@ (8005744 <main+0x6d4>)
 80054de:	2140      	movs	r1, #64	@ 0x40
 80054e0:	4618      	mov	r0, r3
 80054e2:	f004 f873 	bl	80095cc <sniprintf>

                    HAL_UART_Transmit(&huart2, (uint8_t*)cal_msg, strlen(cal_msg), 100);
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	3b04      	subs	r3, #4
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fc87 	bl	8003e00 <strlen>
 80054f2:	4603      	mov	r3, r0
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	f107 0108 	add.w	r1, r7, #8
 80054fa:	3904      	subs	r1, #4
 80054fc:	2364      	movs	r3, #100	@ 0x64
 80054fe:	4892      	ldr	r0, [pc, #584]	@ (8005748 <main+0x6d8>)
 8005500:	f002 ff8f 	bl	8008422 <HAL_UART_Transmit>
 8005504:	e14e      	b.n	80057a4 <main+0x734>
                }
            }
            else {
                float current_spike_sum = 0;
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800550e:	f102 0204 	add.w	r2, r2, #4
 8005512:	6013      	str	r3, [r2, #0]
                uint8_t spiked_groups = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800551a:	f102 0203 	add.w	r2, r2, #3
 800551e:	7013      	strb	r3, [r2, #0]

                // Check each bin group in vocal range
                for(int i=VOCAL_START_BIN; i<VOCAL_END_BIN; i+=BIN_GROUP_SIZE) {
 8005520:	2307      	movs	r3, #7
 8005522:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005526:	f102 021c 	add.w	r2, r2, #28
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	e0a3      	b.n	8005676 <main+0x606>
                    float group_sum = 0;
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005536:	f102 0218 	add.w	r2, r2, #24
 800553a:	6013      	str	r3, [r2, #0]

                    // Calculate current group average
                    for(int j=0; j<BIN_GROUP_SIZE; j++){
 800553c:	2300      	movs	r3, #0
 800553e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005542:	f102 0214 	add.w	r2, r2, #20
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e036      	b.n	80055b8 <main+0x548>
                        if(i+j >= FFT_SIZE/2) break;
 800554a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800554e:	f103 031c 	add.w	r3, r3, #28
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005558:	f103 0314 	add.w	r3, r3, #20
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4413      	add	r3, r2
 8005560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005564:	da30      	bge.n	80055c8 <main+0x558>
                        group_sum += mag_output[i+j];
 8005566:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800556a:	f103 031c 	add.w	r3, r3, #28
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005574:	f103 0314 	add.w	r3, r3, #20
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4413      	add	r3, r2
 800557c:	4a6c      	ldr	r2, [pc, #432]	@ (8005730 <main+0x6c0>)
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	edd3 7a00 	vldr	s15, [r3]
 8005586:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800558a:	f103 0318 	add.w	r3, r3, #24
 800558e:	ed93 7a00 	vldr	s14, [r3]
 8005592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005596:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800559a:	f103 0318 	add.w	r3, r3, #24
 800559e:	edc3 7a00 	vstr	s15, [r3]
                    for(int j=0; j<BIN_GROUP_SIZE; j++){
 80055a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055a6:	f103 0314 	add.w	r3, r3, #20
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80055b2:	f102 0214 	add.w	r2, r2, #20
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055bc:	f103 0314 	add.w	r3, r3, #20
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	ddc1      	ble.n	800554a <main+0x4da>
 80055c6:	e000      	b.n	80055ca <main+0x55a>
                        if(i+j >= FFT_SIZE/2) break;
 80055c8:	bf00      	nop
                    }
                    float group_avg = group_sum/BIN_GROUP_SIZE;
 80055ca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055ce:	f103 0318 	add.w	r3, r3, #24
 80055d2:	ed93 7a00 	vldr	s14, [r3]
 80055d6:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80055da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055e2:	f103 0308 	add.w	r3, r3, #8
 80055e6:	edc3 7a00 	vstr	s15, [r3]

                    // Detect spikes in this bin group
                    if(group_avg > (prev_average_magnitude * SPIKE_THRESHOLD)) {
 80055ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80055ee:	f103 0308 	add.w	r3, r3, #8
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	f7fe fd70 	bl	80040d8 <__aeabi_f2d>
 80055f8:	4604      	mov	r4, r0
 80055fa:	460d      	mov	r5, r1
 80055fc:	4b4f      	ldr	r3, [pc, #316]	@ (800573c <main+0x6cc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fd69 	bl	80040d8 <__aeabi_f2d>
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	4b50      	ldr	r3, [pc, #320]	@ (800574c <main+0x6dc>)
 800560c:	f7fe fdbc 	bl	8004188 <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7ff f846 	bl	80046a8 <__aeabi_dcmpgt>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01e      	beq.n	8005660 <main+0x5f0>
                        spiked_groups++;
 8005622:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005626:	f103 0303 	add.w	r3, r3, #3
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005632:	f102 0203 	add.w	r2, r2, #3
 8005636:	7013      	strb	r3, [r2, #0]
                        current_spike_sum += group_avg;
 8005638:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800563c:	f103 0304 	add.w	r3, r3, #4
 8005640:	ed93 7a00 	vldr	s14, [r3]
 8005644:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005648:	f103 0308 	add.w	r3, r3, #8
 800564c:	edd3 7a00 	vldr	s15, [r3]
 8005650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005654:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005658:	f103 0304 	add.w	r3, r3, #4
 800565c:	edc3 7a00 	vstr	s15, [r3]
                for(int i=VOCAL_START_BIN; i<VOCAL_END_BIN; i+=BIN_GROUP_SIZE) {
 8005660:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005664:	f103 031c 	add.w	r3, r3, #28
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3303      	adds	r3, #3
 800566c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005670:	f102 021c 	add.w	r2, r2, #28
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800567a:	f103 031c 	add.w	r3, r3, #28
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b26      	cmp	r3, #38	@ 0x26
 8005682:	f77f af54 	ble.w	800552e <main+0x4be>
                    }
                }

                // If at least 2 bin groups spiked
                if(spiked_groups >= 2) {
 8005686:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800568a:	f103 0303 	add.w	r3, r3, #3
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d961      	bls.n	8005758 <main+0x6e8>
                    spike_counter++;
 8005694:	4b2e      	ldr	r3, [pc, #184]	@ (8005750 <main+0x6e0>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b2c      	ldr	r3, [pc, #176]	@ (8005750 <main+0x6e0>)
 800569e:	701a      	strb	r2, [r3, #0]

                    // Require 3 consecutive detections
                    if(spike_counter >= 3) {
 80056a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005750 <main+0x6e0>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d963      	bls.n	8005770 <main+0x700>
                        float current_avg = current_spike_sum/spiked_groups;
 80056a8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80056ac:	f103 0303 	add.w	r3, r3, #3
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ba:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80056be:	f103 0304 	add.w	r3, r3, #4
 80056c2:	edd3 6a00 	vldr	s13, [r3]
 80056c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80056ce:	f103 030c 	add.w	r3, r3, #12
 80056d2:	edc3 7a00 	vstr	s15, [r3]
                        char alert_msg[64];
                        snprintf(alert_msg, sizeof(alert_msg),"ALERT:%.2f/%.2f\r\n",
 80056d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80056da:	f103 030c 	add.w	r3, r3, #12
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	f7fe fcfa 	bl	80040d8 <__aeabi_f2d>
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	4b14      	ldr	r3, [pc, #80]	@ (800573c <main+0x6cc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe fcf3 	bl	80040d8 <__aeabi_f2d>
 80056f2:	f107 0308 	add.w	r3, r7, #8
 80056f6:	3b04      	subs	r3, #4
 80056f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fc:	e9cd 4500 	strd	r4, r5, [sp]
 8005700:	4a14      	ldr	r2, [pc, #80]	@ (8005754 <main+0x6e4>)
 8005702:	2140      	movs	r1, #64	@ 0x40
 8005704:	4618      	mov	r0, r3
 8005706:	f003 ff61 	bl	80095cc <sniprintf>
                                current_avg, prev_average_magnitude);
                        HAL_UART_Transmit(&huart2, (uint8_t*)alert_msg, strlen(alert_msg), 100);
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	3b04      	subs	r3, #4
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fb75 	bl	8003e00 <strlen>
 8005716:	4603      	mov	r3, r0
 8005718:	b29a      	uxth	r2, r3
 800571a:	f107 0108 	add.w	r1, r7, #8
 800571e:	3904      	subs	r1, #4
 8005720:	2364      	movs	r3, #100	@ 0x64
 8005722:	4809      	ldr	r0, [pc, #36]	@ (8005748 <main+0x6d8>)
 8005724:	f002 fe7d 	bl	8008422 <HAL_UART_Transmit>
                        spike_counter = 0;
 8005728:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <main+0x6e0>)
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e01f      	b.n	8005770 <main+0x700>
 8005730:	200042ac 	.word	0x200042ac
 8005734:	2000029c 	.word	0x2000029c
 8005738:	200002a0 	.word	0x200002a0
 800573c:	20000298 	.word	0x20000298
 8005740:	200002a4 	.word	0x200002a4
 8005744:	0800c33c 	.word	0x0800c33c
 8005748:	20006bac 	.word	0x20006bac
 800574c:	40040000 	.word	0x40040000
 8005750:	200002a8 	.word	0x200002a8
 8005754:	0800c350 	.word	0x0800c350
                    }
                }
                else {
                    // Decay spike counter
                    spike_counter = spike_counter > 0 ? spike_counter-1 : 0;
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <main+0x73c>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <main+0x6fa>
 8005760:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <main+0x73c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e000      	b.n	800576c <main+0x6fc>
 800576a:	2300      	movs	r3, #0
 800576c:	4a0f      	ldr	r2, [pc, #60]	@ (80057ac <main+0x73c>)
 800576e:	7013      	strb	r3, [r2, #0]
                }

                // Adaptive baseline update (slowly follow quiet moments)
                if(spike_counter == 0) {
 8005770:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <main+0x73c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d115      	bne.n	80057a4 <main+0x734>
                    prev_average_magnitude = 0.95f * prev_average_magnitude + 0.05f * current_spike_sum;
 8005778:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <main+0x740>)
 800577a:	edd3 7a00 	vldr	s15, [r3]
 800577e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80057b4 <main+0x744>
 8005782:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005786:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800578a:	f103 0304 	add.w	r3, r3, #4
 800578e:	edd3 7a00 	vldr	s15, [r3]
 8005792:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80057b8 <main+0x748>
 8005796:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800579a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579e:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <main+0x740>)
 80057a0:	edc3 7a00 	vstr	s15, [r3]
                }
            }


        }
        HAL_Delay(1);
 80057a4:	2001      	movs	r0, #1
 80057a6:	f000 fb8b 	bl	8005ec0 <HAL_Delay>
        if(fft_ready) {
 80057aa:	e49d      	b.n	80050e8 <main+0x78>
 80057ac:	200002a8 	.word	0x200002a8
 80057b0:	20000298 	.word	0x20000298
 80057b4:	3f733333 	.word	0x3f733333
 80057b8:	3d4ccccd 	.word	0x3d4ccccd

080057bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b094      	sub	sp, #80	@ 0x50
 80057c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057c2:	f107 0320 	add.w	r3, r7, #32
 80057c6:	2230      	movs	r2, #48	@ 0x30
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f003 ff95 	bl	80096fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057d0:	f107 030c 	add.w	r3, r7, #12
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e0:	2300      	movs	r3, #0
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <SystemClock_Config+0xcc>)
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	4a27      	ldr	r2, [pc, #156]	@ (8005888 <SystemClock_Config+0xcc>)
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80057f0:	4b25      	ldr	r3, [pc, #148]	@ (8005888 <SystemClock_Config+0xcc>)
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80057fc:	2300      	movs	r3, #0
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	4b22      	ldr	r3, [pc, #136]	@ (800588c <SystemClock_Config+0xd0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a21      	ldr	r2, [pc, #132]	@ (800588c <SystemClock_Config+0xd0>)
 8005806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b1f      	ldr	r3, [pc, #124]	@ (800588c <SystemClock_Config+0xd0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005818:	2301      	movs	r3, #1
 800581a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800581c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005822:	2302      	movs	r3, #2
 8005824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005826:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800582c:	2308      	movs	r3, #8
 800582e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005830:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005836:	2302      	movs	r3, #2
 8005838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800583a:	2307      	movs	r3, #7
 800583c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800583e:	f107 0320 	add.w	r3, r7, #32
 8005842:	4618      	mov	r0, r3
 8005844:	f001 ff3a 	bl	80076bc <HAL_RCC_OscConfig>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800584e:	f000 f81f 	bl	8005890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005852:	230f      	movs	r3, #15
 8005854:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005856:	2302      	movs	r3, #2
 8005858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800585e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	2105      	movs	r1, #5
 8005870:	4618      	mov	r0, r3
 8005872:	f002 f99b 	bl	8007bac <HAL_RCC_ClockConfig>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800587c:	f000 f808 	bl	8005890 <Error_Handler>
  }
}
 8005880:	bf00      	nop
 8005882:	3750      	adds	r7, #80	@ 0x50
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000

08005890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005894:	b672      	cpsid	i
}
 8005896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)"FATAL_ERROR\r\n", 13, 100);
 8005898:	2364      	movs	r3, #100	@ 0x64
 800589a:	220d      	movs	r2, #13
 800589c:	4904      	ldr	r1, [pc, #16]	@ (80058b0 <Error_Handler+0x20>)
 800589e:	4805      	ldr	r0, [pc, #20]	@ (80058b4 <Error_Handler+0x24>)
 80058a0:	f002 fdbf 	bl	8008422 <HAL_UART_Transmit>
      HAL_Delay(1000);
 80058a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80058a8:	f000 fb0a 	bl	8005ec0 <HAL_Delay>
      HAL_UART_Transmit(&huart2, (uint8_t*)"FATAL_ERROR\r\n", 13, 100);
 80058ac:	bf00      	nop
 80058ae:	e7f3      	b.n	8005898 <Error_Handler+0x8>
 80058b0:	0800c364 	.word	0x0800c364
 80058b4:	20006bac 	.word	0x20006bac

080058b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80058bc:	4b17      	ldr	r3, [pc, #92]	@ (800591c <MX_SPI1_Init+0x64>)
 80058be:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <MX_SPI1_Init+0x68>)
 80058c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058c2:	4b16      	ldr	r3, [pc, #88]	@ (800591c <MX_SPI1_Init+0x64>)
 80058c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80058c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80058ca:	4b14      	ldr	r3, [pc, #80]	@ (800591c <MX_SPI1_Init+0x64>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80058d0:	4b12      	ldr	r3, [pc, #72]	@ (800591c <MX_SPI1_Init+0x64>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058d6:	4b11      	ldr	r3, [pc, #68]	@ (800591c <MX_SPI1_Init+0x64>)
 80058d8:	2200      	movs	r2, #0
 80058da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058dc:	4b0f      	ldr	r3, [pc, #60]	@ (800591c <MX_SPI1_Init+0x64>)
 80058de:	2200      	movs	r2, #0
 80058e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058e2:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <MX_SPI1_Init+0x64>)
 80058e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ea:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <MX_SPI1_Init+0x64>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <MX_SPI1_Init+0x64>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80058f6:	4b09      	ldr	r3, [pc, #36]	@ (800591c <MX_SPI1_Init+0x64>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <MX_SPI1_Init+0x64>)
 80058fe:	2200      	movs	r2, #0
 8005900:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005902:	4b06      	ldr	r3, [pc, #24]	@ (800591c <MX_SPI1_Init+0x64>)
 8005904:	220a      	movs	r2, #10
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005908:	4804      	ldr	r0, [pc, #16]	@ (800591c <MX_SPI1_Init+0x64>)
 800590a:	f002 fcb1 	bl	8008270 <HAL_SPI_Init>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005914:	f7ff ffbc 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005918:	bf00      	nop
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20006b50 	.word	0x20006b50
 8005920:	40013000 	.word	0x40013000

08005924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	@ 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a19      	ldr	r2, [pc, #100]	@ (80059a8 <HAL_SPI_MspInit+0x84>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d12b      	bne.n	800599e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	4b18      	ldr	r3, [pc, #96]	@ (80059ac <HAL_SPI_MspInit+0x88>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	4a17      	ldr	r2, [pc, #92]	@ (80059ac <HAL_SPI_MspInit+0x88>)
 8005950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005954:	6453      	str	r3, [r2, #68]	@ 0x44
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <HAL_SPI_MspInit+0x88>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4b11      	ldr	r3, [pc, #68]	@ (80059ac <HAL_SPI_MspInit+0x88>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	4a10      	ldr	r2, [pc, #64]	@ (80059ac <HAL_SPI_MspInit+0x88>)
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	6313      	str	r3, [r2, #48]	@ 0x30
 8005972:	4b0e      	ldr	r3, [pc, #56]	@ (80059ac <HAL_SPI_MspInit+0x88>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800597e:	23e0      	movs	r3, #224	@ 0xe0
 8005980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005982:	2302      	movs	r3, #2
 8005984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800598a:	2300      	movs	r3, #0
 800598c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800598e:	2305      	movs	r3, #5
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	4619      	mov	r1, r3
 8005998:	4805      	ldr	r0, [pc, #20]	@ (80059b0 <HAL_SPI_MspInit+0x8c>)
 800599a:	f000 ff37 	bl	800680c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800599e:	bf00      	nop
 80059a0:	3728      	adds	r7, #40	@ 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40013000 	.word	0x40013000
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40020000 	.word	0x40020000

080059b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	4b10      	ldr	r3, [pc, #64]	@ (8005a00 <HAL_MspInit+0x4c>)
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005a00 <HAL_MspInit+0x4c>)
 80059c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80059ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005a00 <HAL_MspInit+0x4c>)
 80059cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4b09      	ldr	r3, [pc, #36]	@ (8005a00 <HAL_MspInit+0x4c>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	4a08      	ldr	r2, [pc, #32]	@ (8005a00 <HAL_MspInit+0x4c>)
 80059e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_MspInit+0x4c>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80059f2:	2007      	movs	r0, #7
 80059f4:	f000 fb58 	bl	80060a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40023800 	.word	0x40023800

08005a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <NMI_Handler+0x4>

08005a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a10:	bf00      	nop
 8005a12:	e7fd      	b.n	8005a10 <HardFault_Handler+0x4>

08005a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <MemManage_Handler+0x4>

08005a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <BusFault_Handler+0x4>

08005a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <UsageFault_Handler+0x4>

08005a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a5a:	f000 fa11 	bl	8005e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a68:	4802      	ldr	r0, [pc, #8]	@ (8005a74 <DMA1_Stream3_IRQHandler+0x10>)
 8005a6a:	f000 fc65 	bl	8006338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000238 	.word	0x20000238

08005a78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005a7c:	4802      	ldr	r0, [pc, #8]	@ (8005a88 <DMA1_Stream6_IRQHandler+0x10>)
 8005a7e:	f000 fc5b 	bl	8006338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20006bf4 	.word	0x20006bf4

08005a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return 1;
 8005a90:	2301      	movs	r3, #1
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <_kill>:

int _kill(int pid, int sig)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005aa6:	f003 fe7b 	bl	80097a0 <__errno>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2216      	movs	r2, #22
 8005aae:	601a      	str	r2, [r3, #0]
  return -1;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <_exit>:

void _exit (int status)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ffe7 	bl	8005a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <_exit+0x12>

08005ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e00a      	b.n	8005afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	4601      	mov	r1, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	60ba      	str	r2, [r7, #8]
 8005af0:	b2ca      	uxtb	r2, r1
 8005af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3301      	adds	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	dbf0      	blt.n	8005ae4 <_read+0x12>
  }

  return len;
 8005b02:	687b      	ldr	r3, [r7, #4]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	e009      	b.n	8005b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	60ba      	str	r2, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	dbf1      	blt.n	8005b1e <_write+0x12>
  }
  return len;
 8005b3a:	687b      	ldr	r3, [r7, #4]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_close>:

int _close(int file)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <_isatty>:

int _isatty(int file)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b84:	2301      	movs	r3, #1
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bb4:	4a14      	ldr	r2, [pc, #80]	@ (8005c08 <_sbrk+0x5c>)
 8005bb6:	4b15      	ldr	r3, [pc, #84]	@ (8005c0c <_sbrk+0x60>)
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bc0:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <_sbrk+0x64>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bc8:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <_sbrk+0x64>)
 8005bca:	4a12      	ldr	r2, [pc, #72]	@ (8005c14 <_sbrk+0x68>)
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bce:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <_sbrk+0x64>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d207      	bcs.n	8005bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bdc:	f003 fde0 	bl	80097a0 <__errno>
 8005be0:	4603      	mov	r3, r0
 8005be2:	220c      	movs	r2, #12
 8005be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	e009      	b.n	8005c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bec:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <_sbrk+0x64>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <_sbrk+0x64>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	4a05      	ldr	r2, [pc, #20]	@ (8005c10 <_sbrk+0x64>)
 8005bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20020000 	.word	0x20020000
 8005c0c:	00000400 	.word	0x00000400
 8005c10:	20006ba8 	.word	0x20006ba8
 8005c14:	20006da8 	.word	0x20006da8

08005c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c1c:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <SystemInit+0x20>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	4a05      	ldr	r2, [pc, #20]	@ (8005c38 <SystemInit+0x20>)
 8005c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c40:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c42:	4a12      	ldr	r2, [pc, #72]	@ (8005c8c <MX_USART2_UART_Init+0x50>)
 8005c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005c46:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c62:	220c      	movs	r2, #12
 8005c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c66:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c72:	4805      	ldr	r0, [pc, #20]	@ (8005c88 <MX_USART2_UART_Init+0x4c>)
 8005c74:	f002 fb85 	bl	8008382 <HAL_UART_Init>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005c7e:	f7ff fe07 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c82:	bf00      	nop
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20006bac 	.word	0x20006bac
 8005c8c:	40004400 	.word	0x40004400

08005c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c98:	f107 0314 	add.w	r3, r7, #20
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a31      	ldr	r2, [pc, #196]	@ (8005d74 <HAL_UART_MspInit+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d15b      	bne.n	8005d6a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <HAL_UART_MspInit+0xe8>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	4a2f      	ldr	r2, [pc, #188]	@ (8005d78 <HAL_UART_MspInit+0xe8>)
 8005cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d78 <HAL_UART_MspInit+0xe8>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <HAL_UART_MspInit+0xe8>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	4a28      	ldr	r2, [pc, #160]	@ (8005d78 <HAL_UART_MspInit+0xe8>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cde:	4b26      	ldr	r3, [pc, #152]	@ (8005d78 <HAL_UART_MspInit+0xe8>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005cea:	230c      	movs	r3, #12
 8005cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cfa:	2307      	movs	r3, #7
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cfe:	f107 0314 	add.w	r3, r7, #20
 8005d02:	4619      	mov	r1, r3
 8005d04:	481d      	ldr	r0, [pc, #116]	@ (8005d7c <HAL_UART_MspInit+0xec>)
 8005d06:	f000 fd81 	bl	800680c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d84 <HAL_UART_MspInit+0xf4>)
 8005d0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005d16:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d18:	4b19      	ldr	r3, [pc, #100]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d1a:	2240      	movs	r2, #64	@ 0x40
 8005d1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d1e:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d24:	4b16      	ldr	r3, [pc, #88]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d2c:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d32:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8005d38:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d40:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d46:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d48:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d4e:	480c      	ldr	r0, [pc, #48]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d50:	f000 f9ec 	bl	800612c <HAL_DMA_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005d5a:	f7ff fd99 	bl	8005890 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a07      	ldr	r2, [pc, #28]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d64:	4a06      	ldr	r2, [pc, #24]	@ (8005d80 <HAL_UART_MspInit+0xf0>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	3728      	adds	r7, #40	@ 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40004400 	.word	0x40004400
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40020000 	.word	0x40020000
 8005d80:	20006bf4 	.word	0x20006bf4
 8005d84:	400260a0 	.word	0x400260a0

08005d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005d8c:	f7ff ff44 	bl	8005c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d90:	480c      	ldr	r0, [pc, #48]	@ (8005dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d92:	490d      	ldr	r1, [pc, #52]	@ (8005dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d94:	4a0d      	ldr	r2, [pc, #52]	@ (8005dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d98:	e002      	b.n	8005da0 <LoopCopyDataInit>

08005d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d9e:	3304      	adds	r3, #4

08005da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005da4:	d3f9      	bcc.n	8005d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005da6:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005da8:	4c0a      	ldr	r4, [pc, #40]	@ (8005dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dac:	e001      	b.n	8005db2 <LoopFillZerobss>

08005dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005db0:	3204      	adds	r2, #4

08005db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005db4:	d3fb      	bcc.n	8005dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005db6:	f003 fcf9 	bl	80097ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dba:	f7ff f959 	bl	8005070 <main>
  bx  lr    
 8005dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dc8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005dcc:	080ed740 	.word	0x080ed740
  ldr r2, =_sbss
 8005dd0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8005dd4:	20006da4 	.word	0x20006da4

08005dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dd8:	e7fe      	b.n	8005dd8 <ADC_IRQHandler>
	...

08005ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005de0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e1c <HAL_Init+0x40>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e1c <HAL_Init+0x40>)
 8005de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <HAL_Init+0x40>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <HAL_Init+0x40>)
 8005df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005df8:	4b08      	ldr	r3, [pc, #32]	@ (8005e1c <HAL_Init+0x40>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a07      	ldr	r2, [pc, #28]	@ (8005e1c <HAL_Init+0x40>)
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e04:	2003      	movs	r0, #3
 8005e06:	f000 f94f 	bl	80060a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f000 f808 	bl	8005e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e10:	f7ff fdd0 	bl	80059b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023c00 	.word	0x40023c00

08005e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e28:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <HAL_InitTick+0x54>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <HAL_InitTick+0x58>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	4619      	mov	r1, r3
 8005e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f967 	bl	8006112 <HAL_SYSTICK_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e00e      	b.n	8005e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d80a      	bhi.n	8005e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e54:	2200      	movs	r2, #0
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	f000 f92f 	bl	80060be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e60:	4a06      	ldr	r2, [pc, #24]	@ (8005e7c <HAL_InitTick+0x5c>)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e000      	b.n	8005e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000000 	.word	0x20000000
 8005e78:	20000008 	.word	0x20000008
 8005e7c:	20000004 	.word	0x20000004

08005e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_IncTick+0x20>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <HAL_IncTick+0x24>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4413      	add	r3, r2
 8005e90:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <HAL_IncTick+0x24>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000008 	.word	0x20000008
 8005ea4:	20006c54 	.word	0x20006c54

08005ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8005eac:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <HAL_GetTick+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20006c54 	.word	0x20006c54

08005ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ec8:	f7ff ffee 	bl	8005ea8 <HAL_GetTick>
 8005ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d005      	beq.n	8005ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eda:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <HAL_Delay+0x44>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ee6:	bf00      	nop
 8005ee8:	f7ff ffde 	bl	8005ea8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d8f7      	bhi.n	8005ee8 <HAL_Delay+0x28>
  {
  }
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000008 	.word	0x20000008

08005f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f18:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <__NVIC_SetPriorityGrouping+0x44>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f24:	4013      	ands	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f3a:	4a04      	ldr	r2, [pc, #16]	@ (8005f4c <__NVIC_SetPriorityGrouping+0x44>)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	60d3      	str	r3, [r2, #12]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f54:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <__NVIC_GetPriorityGrouping+0x18>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 0307 	and.w	r3, r3, #7
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	db0b      	blt.n	8005f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	4907      	ldr	r1, [pc, #28]	@ (8005fa4 <__NVIC_EnableIRQ+0x38>)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	e000e100 	.word	0xe000e100

08005fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	db0a      	blt.n	8005fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	490c      	ldr	r1, [pc, #48]	@ (8005ff4 <__NVIC_SetPriority+0x4c>)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	0112      	lsls	r2, r2, #4
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd0:	e00a      	b.n	8005fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	4908      	ldr	r1, [pc, #32]	@ (8005ff8 <__NVIC_SetPriority+0x50>)
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	0112      	lsls	r2, r2, #4
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	761a      	strb	r2, [r3, #24]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	e000e100 	.word	0xe000e100
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	@ 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f1c3 0307 	rsb	r3, r3, #7
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf28      	it	cs
 800601a:	2304      	movcs	r3, #4
 800601c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3304      	adds	r3, #4
 8006022:	2b06      	cmp	r3, #6
 8006024:	d902      	bls.n	800602c <NVIC_EncodePriority+0x30>
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3b03      	subs	r3, #3
 800602a:	e000      	b.n	800602e <NVIC_EncodePriority+0x32>
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	43da      	mvns	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	401a      	ands	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006044:	f04f 31ff 	mov.w	r1, #4294967295
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43d9      	mvns	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006054:	4313      	orrs	r3, r2
         );
}
 8006056:	4618      	mov	r0, r3
 8006058:	3724      	adds	r7, #36	@ 0x24
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006074:	d301      	bcc.n	800607a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006076:	2301      	movs	r3, #1
 8006078:	e00f      	b.n	800609a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800607a:	4a0a      	ldr	r2, [pc, #40]	@ (80060a4 <SysTick_Config+0x40>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006082:	210f      	movs	r1, #15
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	f7ff ff8e 	bl	8005fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800608c:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <SysTick_Config+0x40>)
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006092:	4b04      	ldr	r3, [pc, #16]	@ (80060a4 <SysTick_Config+0x40>)
 8006094:	2207      	movs	r2, #7
 8006096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	e000e010 	.word	0xe000e010

080060a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ff29 	bl	8005f08 <__NVIC_SetPriorityGrouping>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	4603      	mov	r3, r0
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060d0:	f7ff ff3e 	bl	8005f50 <__NVIC_GetPriorityGrouping>
 80060d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7ff ff8e 	bl	8005ffc <NVIC_EncodePriority>
 80060e0:	4602      	mov	r2, r0
 80060e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e6:	4611      	mov	r1, r2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff5d 	bl	8005fa8 <__NVIC_SetPriority>
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	4603      	mov	r3, r0
 80060fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff ff31 	bl	8005f6c <__NVIC_EnableIRQ>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ffa2 	bl	8006064 <SysTick_Config>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006138:	f7ff feb6 	bl	8005ea8 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e099      	b.n	800627c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006168:	e00f      	b.n	800618a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800616a:	f7ff fe9d 	bl	8005ea8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b05      	cmp	r3, #5
 8006176:	d908      	bls.n	800618a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2203      	movs	r2, #3
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e078      	b.n	800627c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e8      	bne.n	800616a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <HAL_DMA_Init+0x158>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d107      	bne.n	80061f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ec:	4313      	orrs	r3, r2
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	2b04      	cmp	r3, #4
 800621c:	d117      	bne.n	800624e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fa6f 	bl	8006714 <DMA_CheckFifoParam>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2240      	movs	r2, #64	@ 0x40
 8006240:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800624a:	2301      	movs	r3, #1
 800624c:	e016      	b.n	800627c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fa26 	bl	80066a8 <DMA_CalcBaseAndBitshift>
 800625c:	4603      	mov	r3, r0
 800625e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006264:	223f      	movs	r2, #63	@ 0x3f
 8006266:	409a      	lsls	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	f010803f 	.word	0xf010803f

08006288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_DMA_Start_IT+0x26>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e040      	b.n	8006330 <HAL_DMA_Start_IT+0xa8>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d12f      	bne.n	8006322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f9b8 	bl	800664c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e0:	223f      	movs	r2, #63	@ 0x3f
 80062e2:	409a      	lsls	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0216 	orr.w	r2, r2, #22
 80062f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0208 	orr.w	r2, r2, #8
 800630e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e005      	b.n	800632e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006344:	4b8e      	ldr	r3, [pc, #568]	@ (8006580 <HAL_DMA_IRQHandler+0x248>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a8e      	ldr	r2, [pc, #568]	@ (8006584 <HAL_DMA_IRQHandler+0x24c>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0a9b      	lsrs	r3, r3, #10
 8006350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006362:	2208      	movs	r2, #8
 8006364:	409a      	lsls	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01a      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d013      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0204 	bic.w	r2, r2, #4
 800638a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006390:	2208      	movs	r2, #8
 8006392:	409a      	lsls	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639c:	f043 0201 	orr.w	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a8:	2201      	movs	r2, #1
 80063aa:	409a      	lsls	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d012      	beq.n	80063da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c6:	2201      	movs	r2, #1
 80063c8:	409a      	lsls	r2, r3
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063de:	2204      	movs	r2, #4
 80063e0:	409a      	lsls	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d012      	beq.n	8006410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fc:	2204      	movs	r2, #4
 80063fe:	409a      	lsls	r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006414:	2210      	movs	r2, #16
 8006416:	409a      	lsls	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d043      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d03c      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006432:	2210      	movs	r2, #16
 8006434:	409a      	lsls	r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d018      	beq.n	800647a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d024      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	e01f      	b.n	80064a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01b      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
 8006478:	e016      	b.n	80064a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0208 	bic.w	r2, r2, #8
 8006496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ac:	2220      	movs	r2, #32
 80064ae:	409a      	lsls	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 808f 	beq.w	80065d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8087 	beq.w	80065d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ce:	2220      	movs	r2, #32
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d136      	bne.n	8006550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0216 	bic.w	r2, r2, #22
 80064f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695a      	ldr	r2, [r3, #20]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <HAL_DMA_IRQHandler+0x1da>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0208 	bic.w	r2, r2, #8
 8006520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006526:	223f      	movs	r2, #63	@ 0x3f
 8006528:	409a      	lsls	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006542:	2b00      	cmp	r3, #0
 8006544:	d07e      	beq.n	8006644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
        }
        return;
 800654e:	e079      	b.n	8006644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01d      	beq.n	800659a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006570:	2b00      	cmp	r3, #0
 8006572:	d031      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
 800657c:	e02c      	b.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
 800657e:	bf00      	nop
 8006580:	20000000 	.word	0x20000000
 8006584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d023      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
 8006598:	e01e      	b.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0210 	bic.w	r2, r2, #16
 80065b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d032      	beq.n	8006646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d022      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2205      	movs	r2, #5
 80065f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	3301      	adds	r3, #1
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d307      	bcc.n	8006620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f2      	bne.n	8006604 <HAL_DMA_IRQHandler+0x2cc>
 800661e:	e000      	b.n	8006622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
 8006642:	e000      	b.n	8006646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006644:	bf00      	nop
    }
  }
}
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b40      	cmp	r3, #64	@ 0x40
 8006678:	d108      	bne.n	800668c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800668a:	e007      	b.n	800669c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	60da      	str	r2, [r3, #12]
}
 800669c:	bf00      	nop
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	3b10      	subs	r3, #16
 80066b8:	4a14      	ldr	r2, [pc, #80]	@ (800670c <DMA_CalcBaseAndBitshift+0x64>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80066c2:	4a13      	ldr	r2, [pc, #76]	@ (8006710 <DMA_CalcBaseAndBitshift+0x68>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d909      	bls.n	80066ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	1d1a      	adds	r2, r3, #4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80066e8:	e007      	b.n	80066fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	aaaaaaab 	.word	0xaaaaaaab
 8006710:	080ecfe4 	.word	0x080ecfe4

08006714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d11f      	bne.n	800676e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d856      	bhi.n	80067e2 <DMA_CheckFifoParam+0xce>
 8006734:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <DMA_CheckFifoParam+0x28>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800675f 	.word	0x0800675f
 8006744:	0800674d 	.word	0x0800674d
 8006748:	080067e3 	.word	0x080067e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d046      	beq.n	80067e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800675c:	e043      	b.n	80067e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006766:	d140      	bne.n	80067ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800676c:	e03d      	b.n	80067ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006776:	d121      	bne.n	80067bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b03      	cmp	r3, #3
 800677c:	d837      	bhi.n	80067ee <DMA_CheckFifoParam+0xda>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <DMA_CheckFifoParam+0x70>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	08006795 	.word	0x08006795
 8006788:	0800679b 	.word	0x0800679b
 800678c:	08006795 	.word	0x08006795
 8006790:	080067ad 	.word	0x080067ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e030      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d025      	beq.n	80067f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067aa:	e022      	b.n	80067f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067b4:	d11f      	bne.n	80067f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067ba:	e01c      	b.n	80067f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d903      	bls.n	80067ca <DMA_CheckFifoParam+0xb6>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d003      	beq.n	80067d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80067c8:	e018      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
      break;
 80067ce:	e015      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00e      	beq.n	80067fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	e00b      	b.n	80067fa <DMA_CheckFifoParam+0xe6>
      break;
 80067e2:	bf00      	nop
 80067e4:	e00a      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067e6:	bf00      	nop
 80067e8:	e008      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067ea:	bf00      	nop
 80067ec:	e006      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;   
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067fa:	bf00      	nop
    }
  } 
  
  return status; 
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	@ 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e16b      	b.n	8006b00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006828:	2201      	movs	r2, #1
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4013      	ands	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	429a      	cmp	r2, r3
 8006842:	f040 815a 	bne.w	8006afa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b01      	cmp	r3, #1
 8006850:	d005      	beq.n	800685e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800685a:	2b02      	cmp	r3, #2
 800685c:	d130      	bne.n	80068c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	2203      	movs	r2, #3
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	4313      	orrs	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006894:	2201      	movs	r2, #1
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4013      	ands	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	f003 0201 	and.w	r2, r3, #1
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d017      	beq.n	80068fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	2203      	movs	r2, #3
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d123      	bne.n	8006950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	08da      	lsrs	r2, r3, #3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3208      	adds	r2, #8
 8006910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	220f      	movs	r2, #15
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	43db      	mvns	r3, r3
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	4013      	ands	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	08da      	lsrs	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3208      	adds	r2, #8
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	2203      	movs	r2, #3
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4013      	ands	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 0203 	and.w	r2, r3, #3
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80b4 	beq.w	8006afa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	4b60      	ldr	r3, [pc, #384]	@ (8006b18 <HAL_GPIO_Init+0x30c>)
 8006998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800699a:	4a5f      	ldr	r2, [pc, #380]	@ (8006b18 <HAL_GPIO_Init+0x30c>)
 800699c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80069a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006b18 <HAL_GPIO_Init+0x30c>)
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069ae:	4a5b      	ldr	r2, [pc, #364]	@ (8006b1c <HAL_GPIO_Init+0x310>)
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	089b      	lsrs	r3, r3, #2
 80069b4:	3302      	adds	r3, #2
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	220f      	movs	r2, #15
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4013      	ands	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a52      	ldr	r2, [pc, #328]	@ (8006b20 <HAL_GPIO_Init+0x314>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d02b      	beq.n	8006a32 <HAL_GPIO_Init+0x226>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a51      	ldr	r2, [pc, #324]	@ (8006b24 <HAL_GPIO_Init+0x318>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d025      	beq.n	8006a2e <HAL_GPIO_Init+0x222>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a50      	ldr	r2, [pc, #320]	@ (8006b28 <HAL_GPIO_Init+0x31c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01f      	beq.n	8006a2a <HAL_GPIO_Init+0x21e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a4f      	ldr	r2, [pc, #316]	@ (8006b2c <HAL_GPIO_Init+0x320>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d019      	beq.n	8006a26 <HAL_GPIO_Init+0x21a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a4e      	ldr	r2, [pc, #312]	@ (8006b30 <HAL_GPIO_Init+0x324>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_GPIO_Init+0x216>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006b34 <HAL_GPIO_Init+0x328>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00d      	beq.n	8006a1e <HAL_GPIO_Init+0x212>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a4c      	ldr	r2, [pc, #304]	@ (8006b38 <HAL_GPIO_Init+0x32c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <HAL_GPIO_Init+0x20e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a4b      	ldr	r2, [pc, #300]	@ (8006b3c <HAL_GPIO_Init+0x330>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <HAL_GPIO_Init+0x20a>
 8006a12:	2307      	movs	r3, #7
 8006a14:	e00e      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a16:	2308      	movs	r3, #8
 8006a18:	e00c      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a1a:	2306      	movs	r3, #6
 8006a1c:	e00a      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a1e:	2305      	movs	r3, #5
 8006a20:	e008      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a22:	2304      	movs	r3, #4
 8006a24:	e006      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a26:	2303      	movs	r3, #3
 8006a28:	e004      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e002      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <HAL_GPIO_Init+0x228>
 8006a32:	2300      	movs	r3, #0
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	f002 0203 	and.w	r2, r2, #3
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	4093      	lsls	r3, r2
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a44:	4935      	ldr	r1, [pc, #212]	@ (8006b1c <HAL_GPIO_Init+0x310>)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	089b      	lsrs	r3, r3, #2
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a52:	4b3b      	ldr	r3, [pc, #236]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a76:	4a32      	ldr	r2, [pc, #200]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a7c:	4b30      	ldr	r3, [pc, #192]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006aa0:	4a27      	ldr	r2, [pc, #156]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006aa6:	4b26      	ldr	r3, [pc, #152]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006aca:	4a1d      	ldr	r2, [pc, #116]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4013      	ands	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006af4:	4a12      	ldr	r2, [pc, #72]	@ (8006b40 <HAL_GPIO_Init+0x334>)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3301      	adds	r3, #1
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	f67f ae90 	bls.w	8006828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	3724      	adds	r7, #36	@ 0x24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	40013800 	.word	0x40013800
 8006b20:	40020000 	.word	0x40020000
 8006b24:	40020400 	.word	0x40020400
 8006b28:	40020800 	.word	0x40020800
 8006b2c:	40020c00 	.word	0x40020c00
 8006b30:	40021000 	.word	0x40021000
 8006b34:	40021400 	.word	0x40021400
 8006b38:	40021800 	.word	0x40021800
 8006b3c:	40021c00 	.word	0x40021c00
 8006b40:	40013c00 	.word	0x40013c00

08006b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	807b      	strh	r3, [r7, #2]
 8006b50:	4613      	mov	r3, r2
 8006b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b54:	787b      	ldrb	r3, [r7, #1]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b60:	e003      	b.n	8006b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b62:	887b      	ldrh	r3, [r7, #2]
 8006b64:	041a      	lsls	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	619a      	str	r2, [r3, #24]
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e128      	b.n	8006ddc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a90      	ldr	r2, [pc, #576]	@ (8006de4 <HAL_I2S_Init+0x26c>)
 8006ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7fe f8c1 	bl	8004d2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006bc0:	f023 030f 	bic.w	r3, r3, #15
 8006bc4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d060      	beq.n	8006c98 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006bde:	2310      	movs	r3, #16
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e001      	b.n	8006be8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006be4:	2320      	movs	r3, #32
 8006be6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d802      	bhi.n	8006bf6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f001 fada 	bl	80081b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bfc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c06:	d125      	bne.n	8006c54 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d010      	beq.n	8006c32 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	3305      	adds	r3, #5
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e01f      	b.n	8006c72 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	3305      	adds	r3, #5
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	e00e      	b.n	8006c72 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	3305      	adds	r3, #5
 8006c70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4a5c      	ldr	r2, [pc, #368]	@ (8006de8 <HAL_I2S_Init+0x270>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	08db      	lsrs	r3, r3, #3
 8006c7c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e003      	b.n	8006ca0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d902      	bls.n	8006cac <HAL_I2S_Init+0x134>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2bff      	cmp	r3, #255	@ 0xff
 8006caa:	d907      	bls.n	8006cbc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb0:	f043 0210 	orr.w	r2, r3, #16
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e08f      	b.n	8006ddc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	ea42 0103 	orr.w	r1, r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006cda:	f023 030f 	bic.w	r3, r3, #15
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6851      	ldr	r1, [r2, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	4311      	orrs	r1, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	68d2      	ldr	r2, [r2, #12]
 8006cec:	4311      	orrs	r1, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6992      	ldr	r2, [r2, #24]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d161      	bne.n	8006dcc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a38      	ldr	r2, [pc, #224]	@ (8006dec <HAL_I2S_Init+0x274>)
 8006d0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a37      	ldr	r2, [pc, #220]	@ (8006df0 <HAL_I2S_Init+0x278>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d101      	bne.n	8006d1c <HAL_I2S_Init+0x1a4>
 8006d18:	4b36      	ldr	r3, [pc, #216]	@ (8006df4 <HAL_I2S_Init+0x27c>)
 8006d1a:	e001      	b.n	8006d20 <HAL_I2S_Init+0x1a8>
 8006d1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	4932      	ldr	r1, [pc, #200]	@ (8006df0 <HAL_I2S_Init+0x278>)
 8006d28:	428a      	cmp	r2, r1
 8006d2a:	d101      	bne.n	8006d30 <HAL_I2S_Init+0x1b8>
 8006d2c:	4a31      	ldr	r2, [pc, #196]	@ (8006df4 <HAL_I2S_Init+0x27c>)
 8006d2e:	e001      	b.n	8006d34 <HAL_I2S_Init+0x1bc>
 8006d30:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006d34:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006d38:	f023 030f 	bic.w	r3, r3, #15
 8006d3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2b      	ldr	r2, [pc, #172]	@ (8006df0 <HAL_I2S_Init+0x278>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_I2S_Init+0x1d4>
 8006d48:	4b2a      	ldr	r3, [pc, #168]	@ (8006df4 <HAL_I2S_Init+0x27c>)
 8006d4a:	e001      	b.n	8006d50 <HAL_I2S_Init+0x1d8>
 8006d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d50:	2202      	movs	r2, #2
 8006d52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a25      	ldr	r2, [pc, #148]	@ (8006df0 <HAL_I2S_Init+0x278>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d101      	bne.n	8006d62 <HAL_I2S_Init+0x1ea>
 8006d5e:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <HAL_I2S_Init+0x27c>)
 8006d60:	e001      	b.n	8006d66 <HAL_I2S_Init+0x1ee>
 8006d62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d72:	d003      	beq.n	8006d7c <HAL_I2S_Init+0x204>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e001      	b.n	8006d88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006d84:	2300      	movs	r3, #0
 8006d86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d92:	4313      	orrs	r3, r2
 8006d94:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	897b      	ldrh	r3, [r7, #10]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006db4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0d      	ldr	r2, [pc, #52]	@ (8006df0 <HAL_I2S_Init+0x278>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d101      	bne.n	8006dc4 <HAL_I2S_Init+0x24c>
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <HAL_I2S_Init+0x27c>)
 8006dc2:	e001      	b.n	8006dc8 <HAL_I2S_Init+0x250>
 8006dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dc8:	897a      	ldrh	r2, [r7, #10]
 8006dca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	080070f5 	.word	0x080070f5
 8006de8:	cccccccd 	.word	0xcccccccd
 8006dec:	08007209 	.word	0x08007209
 8006df0:	40003800 	.word	0x40003800
 8006df4:	40003400 	.word	0x40003400

08006df8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_I2S_Receive_DMA+0x1a>
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e09d      	b.n	8006f52 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d001      	beq.n	8006e26 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
 8006e24:	e095      	b.n	8006f52 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_I2S_Receive_DMA+0x3e>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e08d      	b.n	8006f52 <HAL_I2S_Receive_DMA+0x15a>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2204      	movs	r2, #4
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d002      	beq.n	8006e6a <HAL_I2S_Receive_DMA+0x72>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	d10a      	bne.n	8006e80 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	865a      	strh	r2, [r3, #50]	@ 0x32
 8006e7e:	e005      	b.n	8006e8c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	88fa      	ldrh	r2, [r7, #6]
 8006e8a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	4a32      	ldr	r2, [pc, #200]	@ (8006f5c <HAL_I2S_Receive_DMA+0x164>)
 8006e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	4a31      	ldr	r2, [pc, #196]	@ (8006f60 <HAL_I2S_Receive_DMA+0x168>)
 8006e9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	4a30      	ldr	r2, [pc, #192]	@ (8006f64 <HAL_I2S_Receive_DMA+0x16c>)
 8006ea2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eb2:	d10a      	bne.n	8006eca <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006ee0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006ee2:	f7ff f9d1 	bl	8006288 <HAL_DMA_Start_IT>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef0:	f043 0208 	orr.w	r2, r3, #8
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e022      	b.n	8006f52 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d107      	bne.n	8006f50 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69da      	ldr	r2, [r3, #28]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f4e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08006fd3 	.word	0x08006fd3
 8006f60:	08006f91 	.word	0x08006f91
 8006f64:	08006fef 	.word	0x08006fef

08006f68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10e      	bne.n	8006fc4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7fd ff7b 	bl	8004ec0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7fd ff59 	bl	8004e98 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0203 	bic.w	r2, r2, #3
 800700a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007024:	f043 0208 	orr.w	r2, r3, #8
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff ffa5 	bl	8006f7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	881a      	ldrh	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	1c9a      	adds	r2, r3, #2
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10e      	bne.n	800708e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800707e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff ff6d 	bl	8006f68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	b292      	uxth	r2, r2
 80070aa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10e      	bne.n	80070ec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fd feea 	bl	8004ec0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b04      	cmp	r3, #4
 800710e:	d13a      	bne.n	8007186 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d109      	bne.n	800712e <I2S_IRQHandler+0x3a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	d102      	bne.n	800712e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ffb4 	bl	8007096 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007134:	2b40      	cmp	r3, #64	@ 0x40
 8007136:	d126      	bne.n	8007186 <I2S_IRQHandler+0x92>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b20      	cmp	r3, #32
 8007144:	d11f      	bne.n	8007186 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007154:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007178:	f043 0202 	orr.w	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fefb 	bl	8006f7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	d136      	bne.n	8007200 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d109      	bne.n	80071b0 <I2S_IRQHandler+0xbc>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a6:	2b80      	cmp	r3, #128	@ 0x80
 80071a8:	d102      	bne.n	80071b0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff ff45 	bl	800703a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d122      	bne.n	8007200 <I2S_IRQHandler+0x10c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d11b      	bne.n	8007200 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80071d6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff febe 	bl	8006f7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007200:	bf00      	nop
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a92      	ldr	r2, [pc, #584]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007222:	4b92      	ldr	r3, [pc, #584]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007224:	e001      	b.n	800722a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a8b      	ldr	r2, [pc, #556]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d101      	bne.n	8007244 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007240:	4b8a      	ldr	r3, [pc, #552]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007242:	e001      	b.n	8007248 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007254:	d004      	beq.n	8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 8099 	bne.w	8007392 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d107      	bne.n	800727a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f925 	bl	80074c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b01      	cmp	r3, #1
 8007282:	d107      	bne.n	8007294 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9c8 	bl	8007624 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d13a      	bne.n	8007314 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d035      	beq.n	8007314 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d101      	bne.n	80072b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80072b2:	4b6e      	ldr	r3, [pc, #440]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072b4:	e001      	b.n	80072ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80072b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4969      	ldr	r1, [pc, #420]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072c2:	428b      	cmp	r3, r1
 80072c4:	d101      	bne.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80072c6:	4b69      	ldr	r3, [pc, #420]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072c8:	e001      	b.n	80072ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80072ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80072e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007306:	f043 0202 	orr.w	r2, r3, #2
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fe34 	bl	8006f7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b08      	cmp	r3, #8
 800731c:	f040 80c3 	bne.w	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80bd 	beq.w	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800733a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a49      	ldr	r2, [pc, #292]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d101      	bne.n	800734a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007346:	4b49      	ldr	r3, [pc, #292]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007348:	e001      	b.n	800734e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800734a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4944      	ldr	r1, [pc, #272]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007356:	428b      	cmp	r3, r1
 8007358:	d101      	bne.n	800735e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800735a:	4b44      	ldr	r3, [pc, #272]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800735c:	e001      	b.n	8007362 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800735e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007362:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007366:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007368:	2300      	movs	r3, #0
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	f043 0204 	orr.w	r2, r3, #4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff fdf6 	bl	8006f7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007390:	e089      	b.n	80074a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d107      	bne.n	80073ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f8be 	bl	8007528 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d107      	bne.n	80073c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8fd 	bl	80075c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d12f      	bne.n	8007430 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d02a      	beq.n	8007430 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d101      	bne.n	80073f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80073f4:	4b1d      	ldr	r3, [pc, #116]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073f6:	e001      	b.n	80073fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80073f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4919      	ldr	r1, [pc, #100]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007404:	428b      	cmp	r3, r1
 8007406:	d101      	bne.n	800740c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007408:	4b18      	ldr	r3, [pc, #96]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800740a:	e001      	b.n	8007410 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800740c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007410:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007414:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007422:	f043 0202 	orr.w	r2, r3, #2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff fda6 	bl	8006f7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b08      	cmp	r3, #8
 8007438:	d136      	bne.n	80074a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d031      	beq.n	80074a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a07      	ldr	r2, [pc, #28]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800744e:	4b07      	ldr	r3, [pc, #28]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007450:	e001      	b.n	8007456 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007452:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4902      	ldr	r1, [pc, #8]	@ (8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800745e:	428b      	cmp	r3, r1
 8007460:	d106      	bne.n	8007470 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007462:	4b02      	ldr	r3, [pc, #8]	@ (800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007464:	e006      	b.n	8007474 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007466:	bf00      	nop
 8007468:	40003800 	.word	0x40003800
 800746c:	40003400 	.word	0x40003400
 8007470:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007474:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007478:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007488:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fd6c 	bl	8006f7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074a4:	e000      	b.n	80074a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074a6:	bf00      	nop
}
 80074a8:	bf00      	nop
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d0:	1c99      	adds	r1, r3, #2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d113      	bne.n	800751e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007504:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ffc9 	bl	80074b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007534:	1c99      	adds	r1, r3, #2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6251      	str	r1, [r2, #36]	@ 0x24
 800753a:	8819      	ldrh	r1, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1d      	ldr	r2, [pc, #116]	@ (80075b8 <I2SEx_TxISR_I2SExt+0x90>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d101      	bne.n	800754a <I2SEx_TxISR_I2SExt+0x22>
 8007546:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <I2SEx_TxISR_I2SExt+0x94>)
 8007548:	e001      	b.n	800754e <I2SEx_TxISR_I2SExt+0x26>
 800754a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800754e:	460a      	mov	r2, r1
 8007550:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d121      	bne.n	80075ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a12      	ldr	r2, [pc, #72]	@ (80075b8 <I2SEx_TxISR_I2SExt+0x90>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d101      	bne.n	8007578 <I2SEx_TxISR_I2SExt+0x50>
 8007574:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <I2SEx_TxISR_I2SExt+0x94>)
 8007576:	e001      	b.n	800757c <I2SEx_TxISR_I2SExt+0x54>
 8007578:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	490d      	ldr	r1, [pc, #52]	@ (80075b8 <I2SEx_TxISR_I2SExt+0x90>)
 8007584:	428b      	cmp	r3, r1
 8007586:	d101      	bne.n	800758c <I2SEx_TxISR_I2SExt+0x64>
 8007588:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <I2SEx_TxISR_I2SExt+0x94>)
 800758a:	e001      	b.n	8007590 <I2SEx_TxISR_I2SExt+0x68>
 800758c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007590:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007594:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff ff81 	bl	80074b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	40003800 	.word	0x40003800
 80075bc:	40003400 	.word	0x40003400

080075c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68d8      	ldr	r0, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	1c99      	adds	r1, r3, #2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80075d8:	b282      	uxth	r2, r0
 80075da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d113      	bne.n	800761c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007602:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff ff4a 	bl	80074b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a20      	ldr	r2, [pc, #128]	@ (80076b4 <I2SEx_RxISR_I2SExt+0x90>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d101      	bne.n	800763a <I2SEx_RxISR_I2SExt+0x16>
 8007636:	4b20      	ldr	r3, [pc, #128]	@ (80076b8 <I2SEx_RxISR_I2SExt+0x94>)
 8007638:	e001      	b.n	800763e <I2SEx_RxISR_I2SExt+0x1a>
 800763a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800763e:	68d8      	ldr	r0, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	1c99      	adds	r1, r3, #2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800764a:	b282      	uxth	r2, r0
 800764c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d121      	bne.n	80076aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a12      	ldr	r2, [pc, #72]	@ (80076b4 <I2SEx_RxISR_I2SExt+0x90>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d101      	bne.n	8007674 <I2SEx_RxISR_I2SExt+0x50>
 8007670:	4b11      	ldr	r3, [pc, #68]	@ (80076b8 <I2SEx_RxISR_I2SExt+0x94>)
 8007672:	e001      	b.n	8007678 <I2SEx_RxISR_I2SExt+0x54>
 8007674:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	490d      	ldr	r1, [pc, #52]	@ (80076b4 <I2SEx_RxISR_I2SExt+0x90>)
 8007680:	428b      	cmp	r3, r1
 8007682:	d101      	bne.n	8007688 <I2SEx_RxISR_I2SExt+0x64>
 8007684:	4b0c      	ldr	r3, [pc, #48]	@ (80076b8 <I2SEx_RxISR_I2SExt+0x94>)
 8007686:	e001      	b.n	800768c <I2SEx_RxISR_I2SExt+0x68>
 8007688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800768c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007690:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff03 	bl	80074b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40003800 	.word	0x40003800
 80076b8:	40003400 	.word	0x40003400

080076bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e267      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d075      	beq.n	80077c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80076da:	4b88      	ldr	r3, [pc, #544]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d00c      	beq.n	8007700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076e6:	4b85      	ldr	r3, [pc, #532]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d112      	bne.n	8007718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076f2:	4b82      	ldr	r3, [pc, #520]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fe:	d10b      	bne.n	8007718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007700:	4b7e      	ldr	r3, [pc, #504]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d05b      	beq.n	80077c4 <HAL_RCC_OscConfig+0x108>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d157      	bne.n	80077c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e242      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007720:	d106      	bne.n	8007730 <HAL_RCC_OscConfig+0x74>
 8007722:	4b76      	ldr	r3, [pc, #472]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a75      	ldr	r2, [pc, #468]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e01d      	b.n	800776c <HAL_RCC_OscConfig+0xb0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007738:	d10c      	bne.n	8007754 <HAL_RCC_OscConfig+0x98>
 800773a:	4b70      	ldr	r3, [pc, #448]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6f      	ldr	r2, [pc, #444]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	4b6d      	ldr	r3, [pc, #436]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a6c      	ldr	r2, [pc, #432]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 800774c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	e00b      	b.n	800776c <HAL_RCC_OscConfig+0xb0>
 8007754:	4b69      	ldr	r3, [pc, #420]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a68      	ldr	r2, [pc, #416]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 800775a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	4b66      	ldr	r3, [pc, #408]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a65      	ldr	r2, [pc, #404]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800776a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d013      	beq.n	800779c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007774:	f7fe fb98 	bl	8005ea8 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800777c:	f7fe fb94 	bl	8005ea8 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b64      	cmp	r3, #100	@ 0x64
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e207      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800778e:	4b5b      	ldr	r3, [pc, #364]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <HAL_RCC_OscConfig+0xc0>
 800779a:	e014      	b.n	80077c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779c:	f7fe fb84 	bl	8005ea8 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077a4:	f7fe fb80 	bl	8005ea8 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b64      	cmp	r3, #100	@ 0x64
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e1f3      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077b6:	4b51      	ldr	r3, [pc, #324]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0xe8>
 80077c2:	e000      	b.n	80077c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d063      	beq.n	800789a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80077d2:	4b4a      	ldr	r3, [pc, #296]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077de:	4b47      	ldr	r3, [pc, #284]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d11c      	bne.n	8007824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ea:	4b44      	ldr	r3, [pc, #272]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d116      	bne.n	8007824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077f6:	4b41      	ldr	r3, [pc, #260]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <HAL_RCC_OscConfig+0x152>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d001      	beq.n	800780e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e1c7      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780e:	4b3b      	ldr	r3, [pc, #236]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4937      	ldr	r1, [pc, #220]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 800781e:	4313      	orrs	r3, r2
 8007820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007822:	e03a      	b.n	800789a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d020      	beq.n	800786e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800782c:	4b34      	ldr	r3, [pc, #208]	@ (8007900 <HAL_RCC_OscConfig+0x244>)
 800782e:	2201      	movs	r2, #1
 8007830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007832:	f7fe fb39 	bl	8005ea8 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007838:	e008      	b.n	800784c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800783a:	f7fe fb35 	bl	8005ea8 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e1a8      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800784c:	4b2b      	ldr	r3, [pc, #172]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0f0      	beq.n	800783a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007858:	4b28      	ldr	r3, [pc, #160]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	4925      	ldr	r1, [pc, #148]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007868:	4313      	orrs	r3, r2
 800786a:	600b      	str	r3, [r1, #0]
 800786c:	e015      	b.n	800789a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800786e:	4b24      	ldr	r3, [pc, #144]	@ (8007900 <HAL_RCC_OscConfig+0x244>)
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007874:	f7fe fb18 	bl	8005ea8 <HAL_GetTick>
 8007878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800787a:	e008      	b.n	800788e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800787c:	f7fe fb14 	bl	8005ea8 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d901      	bls.n	800788e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e187      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800788e:	4b1b      	ldr	r3, [pc, #108]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1f0      	bne.n	800787c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d036      	beq.n	8007914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d016      	beq.n	80078dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ae:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <HAL_RCC_OscConfig+0x248>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fe faf8 	bl	8005ea8 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078bc:	f7fe faf4 	bl	8005ea8 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e167      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ce:	4b0b      	ldr	r3, [pc, #44]	@ (80078fc <HAL_RCC_OscConfig+0x240>)
 80078d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f0      	beq.n	80078bc <HAL_RCC_OscConfig+0x200>
 80078da:	e01b      	b.n	8007914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078dc:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <HAL_RCC_OscConfig+0x248>)
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e2:	f7fe fae1 	bl	8005ea8 <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e8:	e00e      	b.n	8007908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078ea:	f7fe fadd 	bl	8005ea8 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d907      	bls.n	8007908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e150      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
 80078fc:	40023800 	.word	0x40023800
 8007900:	42470000 	.word	0x42470000
 8007904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007908:	4b88      	ldr	r3, [pc, #544]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 800790a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1ea      	bne.n	80078ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 8097 	beq.w	8007a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007926:	4b81      	ldr	r3, [pc, #516]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10f      	bne.n	8007952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	4b7d      	ldr	r3, [pc, #500]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793a:	4a7c      	ldr	r2, [pc, #496]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 800793c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007940:	6413      	str	r3, [r2, #64]	@ 0x40
 8007942:	4b7a      	ldr	r3, [pc, #488]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800794e:	2301      	movs	r3, #1
 8007950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007952:	4b77      	ldr	r3, [pc, #476]	@ (8007b30 <HAL_RCC_OscConfig+0x474>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795a:	2b00      	cmp	r3, #0
 800795c:	d118      	bne.n	8007990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800795e:	4b74      	ldr	r3, [pc, #464]	@ (8007b30 <HAL_RCC_OscConfig+0x474>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a73      	ldr	r2, [pc, #460]	@ (8007b30 <HAL_RCC_OscConfig+0x474>)
 8007964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800796a:	f7fe fa9d 	bl	8005ea8 <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007970:	e008      	b.n	8007984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007972:	f7fe fa99 	bl	8005ea8 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d901      	bls.n	8007984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e10c      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007984:	4b6a      	ldr	r3, [pc, #424]	@ (8007b30 <HAL_RCC_OscConfig+0x474>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0f0      	beq.n	8007972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d106      	bne.n	80079a6 <HAL_RCC_OscConfig+0x2ea>
 8007998:	4b64      	ldr	r3, [pc, #400]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 800799a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799c:	4a63      	ldr	r2, [pc, #396]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079a4:	e01c      	b.n	80079e0 <HAL_RCC_OscConfig+0x324>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d10c      	bne.n	80079c8 <HAL_RCC_OscConfig+0x30c>
 80079ae:	4b5f      	ldr	r3, [pc, #380]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b2:	4a5e      	ldr	r2, [pc, #376]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079b4:	f043 0304 	orr.w	r3, r3, #4
 80079b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80079ba:	4b5c      	ldr	r3, [pc, #368]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079be:	4a5b      	ldr	r2, [pc, #364]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80079c6:	e00b      	b.n	80079e0 <HAL_RCC_OscConfig+0x324>
 80079c8:	4b58      	ldr	r3, [pc, #352]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079cc:	4a57      	ldr	r2, [pc, #348]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079d4:	4b55      	ldr	r3, [pc, #340]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d8:	4a54      	ldr	r2, [pc, #336]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 80079da:	f023 0304 	bic.w	r3, r3, #4
 80079de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d015      	beq.n	8007a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e8:	f7fe fa5e 	bl	8005ea8 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ee:	e00a      	b.n	8007a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f0:	f7fe fa5a 	bl	8005ea8 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e0cb      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a06:	4b49      	ldr	r3, [pc, #292]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0ee      	beq.n	80079f0 <HAL_RCC_OscConfig+0x334>
 8007a12:	e014      	b.n	8007a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a14:	f7fe fa48 	bl	8005ea8 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a1a:	e00a      	b.n	8007a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a1c:	f7fe fa44 	bl	8005ea8 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e0b5      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a32:	4b3e      	ldr	r3, [pc, #248]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1ee      	bne.n	8007a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d105      	bne.n	8007a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a44:	4b39      	ldr	r3, [pc, #228]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a48:	4a38      	ldr	r2, [pc, #224]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80a1 	beq.w	8007b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a5a:	4b34      	ldr	r3, [pc, #208]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
 8007a62:	2b08      	cmp	r3, #8
 8007a64:	d05c      	beq.n	8007b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d141      	bne.n	8007af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a6e:	4b31      	ldr	r3, [pc, #196]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a74:	f7fe fa18 	bl	8005ea8 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a7c:	f7fe fa14 	bl	8005ea8 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e087      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8e:	4b27      	ldr	r3, [pc, #156]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f0      	bne.n	8007a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	019b      	lsls	r3, r3, #6
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	491b      	ldr	r1, [pc, #108]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aca:	f7fe f9ed 	bl	8005ea8 <HAL_GetTick>
 8007ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ad0:	e008      	b.n	8007ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ad2:	f7fe f9e9 	bl	8005ea8 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d901      	bls.n	8007ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e05c      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae4:	4b11      	ldr	r3, [pc, #68]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0f0      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x416>
 8007af0:	e054      	b.n	8007b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af2:	4b10      	ldr	r3, [pc, #64]	@ (8007b34 <HAL_RCC_OscConfig+0x478>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af8:	f7fe f9d6 	bl	8005ea8 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b00:	f7fe f9d2 	bl	8005ea8 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e045      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b12:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <HAL_RCC_OscConfig+0x470>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x444>
 8007b1e:	e03d      	b.n	8007b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d107      	bne.n	8007b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e038      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	40007000 	.word	0x40007000
 8007b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <HAL_RCC_OscConfig+0x4ec>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d028      	beq.n	8007b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d121      	bne.n	8007b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d11a      	bne.n	8007b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b68:	4013      	ands	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d111      	bne.n	8007b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	3b01      	subs	r3, #1
 8007b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d107      	bne.n	8007b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d001      	beq.n	8007b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40023800 	.word	0x40023800

08007bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0cc      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bc0:	4b68      	ldr	r3, [pc, #416]	@ (8007d64 <HAL_RCC_ClockConfig+0x1b8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d90c      	bls.n	8007be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bce:	4b65      	ldr	r3, [pc, #404]	@ (8007d64 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd6:	4b63      	ldr	r3, [pc, #396]	@ (8007d64 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d001      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0b8      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d020      	beq.n	8007c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c00:	4b59      	ldr	r3, [pc, #356]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	4a58      	ldr	r2, [pc, #352]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c18:	4b53      	ldr	r3, [pc, #332]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	4a52      	ldr	r2, [pc, #328]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c24:	4b50      	ldr	r3, [pc, #320]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	494d      	ldr	r1, [pc, #308]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d044      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d107      	bne.n	8007c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c4a:	4b47      	ldr	r3, [pc, #284]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d119      	bne.n	8007c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e07f      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d003      	beq.n	8007c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d107      	bne.n	8007c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e06f      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e067      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c8a:	4b37      	ldr	r3, [pc, #220]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f023 0203 	bic.w	r2, r3, #3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	4934      	ldr	r1, [pc, #208]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c9c:	f7fe f904 	bl	8005ea8 <HAL_GetTick>
 8007ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca2:	e00a      	b.n	8007cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca4:	f7fe f900 	bl	8005ea8 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e04f      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cba:	4b2b      	ldr	r3, [pc, #172]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 020c 	and.w	r2, r3, #12
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d1eb      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ccc:	4b25      	ldr	r3, [pc, #148]	@ (8007d64 <HAL_RCC_ClockConfig+0x1b8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d20c      	bcs.n	8007cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cda:	4b22      	ldr	r3, [pc, #136]	@ (8007d64 <HAL_RCC_ClockConfig+0x1b8>)
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce2:	4b20      	ldr	r3, [pc, #128]	@ (8007d64 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e032      	b.n	8007d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d00:	4b19      	ldr	r3, [pc, #100]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4916      	ldr	r1, [pc, #88]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d1e:	4b12      	ldr	r3, [pc, #72]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	490e      	ldr	r1, [pc, #56]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d32:	f000 f821 	bl	8007d78 <HAL_RCC_GetSysClockFreq>
 8007d36:	4602      	mov	r2, r0
 8007d38:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	490a      	ldr	r1, [pc, #40]	@ (8007d6c <HAL_RCC_ClockConfig+0x1c0>)
 8007d44:	5ccb      	ldrb	r3, [r1, r3]
 8007d46:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4a:	4a09      	ldr	r2, [pc, #36]	@ (8007d70 <HAL_RCC_ClockConfig+0x1c4>)
 8007d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007d4e:	4b09      	ldr	r3, [pc, #36]	@ (8007d74 <HAL_RCC_ClockConfig+0x1c8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe f864 	bl	8005e20 <HAL_InitTick>

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40023c00 	.word	0x40023c00
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	080ecfcc 	.word	0x080ecfcc
 8007d70:	20000000 	.word	0x20000000
 8007d74:	20000004 	.word	0x20000004

08007d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d7c:	b094      	sub	sp, #80	@ 0x50
 8007d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d90:	4b79      	ldr	r3, [pc, #484]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 030c 	and.w	r3, r3, #12
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d00d      	beq.n	8007db8 <HAL_RCC_GetSysClockFreq+0x40>
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	f200 80e1 	bhi.w	8007f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_RCC_GetSysClockFreq+0x34>
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d003      	beq.n	8007db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007daa:	e0db      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dac:	4b73      	ldr	r3, [pc, #460]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8007dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007db0:	e0db      	b.n	8007f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007db2:	4b73      	ldr	r3, [pc, #460]	@ (8007f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8007db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007db6:	e0d8      	b.n	8007f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007db8:	4b6f      	ldr	r3, [pc, #444]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d063      	beq.n	8007e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dce:	4b6a      	ldr	r3, [pc, #424]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	099b      	lsrs	r3, r3, #6
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007de2:	2300      	movs	r3, #0
 8007de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007dea:	4622      	mov	r2, r4
 8007dec:	462b      	mov	r3, r5
 8007dee:	f04f 0000 	mov.w	r0, #0
 8007df2:	f04f 0100 	mov.w	r1, #0
 8007df6:	0159      	lsls	r1, r3, #5
 8007df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dfc:	0150      	lsls	r0, r2, #5
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4621      	mov	r1, r4
 8007e04:	1a51      	subs	r1, r2, r1
 8007e06:	6139      	str	r1, [r7, #16]
 8007e08:	4629      	mov	r1, r5
 8007e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	018b      	lsls	r3, r1, #6
 8007e20:	4651      	mov	r1, sl
 8007e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e26:	4651      	mov	r1, sl
 8007e28:	018a      	lsls	r2, r1, #6
 8007e2a:	4651      	mov	r1, sl
 8007e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8007e30:	4659      	mov	r1, fp
 8007e32:	eb63 0901 	sbc.w	r9, r3, r1
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e4a:	4690      	mov	r8, r2
 8007e4c:	4699      	mov	r9, r3
 8007e4e:	4623      	mov	r3, r4
 8007e50:	eb18 0303 	adds.w	r3, r8, r3
 8007e54:	60bb      	str	r3, [r7, #8]
 8007e56:	462b      	mov	r3, r5
 8007e58:	eb49 0303 	adc.w	r3, r9, r3
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	024b      	lsls	r3, r1, #9
 8007e6e:	4621      	mov	r1, r4
 8007e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e74:	4621      	mov	r1, r4
 8007e76:	024a      	lsls	r2, r1, #9
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e7e:	2200      	movs	r2, #0
 8007e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e88:	f7fc fc56 	bl	8004738 <__aeabi_uldivmod>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4613      	mov	r3, r2
 8007e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e94:	e058      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e96:	4b38      	ldr	r3, [pc, #224]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	099b      	lsrs	r3, r3, #6
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ea6:	623b      	str	r3, [r7, #32]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	0159      	lsls	r1, r3, #5
 8007ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ec2:	0150      	lsls	r0, r2, #5
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4641      	mov	r1, r8
 8007eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ece:	4649      	mov	r1, r9
 8007ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8007eec:	eb63 050b 	sbc.w	r5, r3, fp
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	00eb      	lsls	r3, r5, #3
 8007efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007efe:	00e2      	lsls	r2, r4, #3
 8007f00:	4614      	mov	r4, r2
 8007f02:	461d      	mov	r5, r3
 8007f04:	4643      	mov	r3, r8
 8007f06:	18e3      	adds	r3, r4, r3
 8007f08:	603b      	str	r3, [r7, #0]
 8007f0a:	464b      	mov	r3, r9
 8007f0c:	eb45 0303 	adc.w	r3, r5, r3
 8007f10:	607b      	str	r3, [r7, #4]
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f1e:	4629      	mov	r1, r5
 8007f20:	028b      	lsls	r3, r1, #10
 8007f22:	4621      	mov	r1, r4
 8007f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f28:	4621      	mov	r1, r4
 8007f2a:	028a      	lsls	r2, r1, #10
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f32:	2200      	movs	r2, #0
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	61fa      	str	r2, [r7, #28]
 8007f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f3c:	f7fc fbfc 	bl	8004738 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4613      	mov	r3, r2
 8007f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007f48:	4b0b      	ldr	r3, [pc, #44]	@ (8007f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	0c1b      	lsrs	r3, r3, #16
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	3301      	adds	r3, #1
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f62:	e002      	b.n	8007f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f64:	4b05      	ldr	r3, [pc, #20]	@ (8007f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3750      	adds	r7, #80	@ 0x50
 8007f70:	46bd      	mov	sp, r7
 8007f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f76:	bf00      	nop
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	00f42400 	.word	0x00f42400
 8007f80:	007a1200 	.word	0x007a1200

08007f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f88:	4b03      	ldr	r3, [pc, #12]	@ (8007f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000000 	.word	0x20000000

08007f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fa0:	f7ff fff0 	bl	8007f84 <HAL_RCC_GetHCLKFreq>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	0a9b      	lsrs	r3, r3, #10
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	4903      	ldr	r1, [pc, #12]	@ (8007fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fb2:	5ccb      	ldrb	r3, [r1, r3]
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	080ecfdc 	.word	0x080ecfdc

08007fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fc8:	f7ff ffdc 	bl	8007f84 <HAL_RCC_GetHCLKFreq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4b05      	ldr	r3, [pc, #20]	@ (8007fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	0b5b      	lsrs	r3, r3, #13
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4903      	ldr	r1, [pc, #12]	@ (8007fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fda:	5ccb      	ldrb	r3, [r1, r3]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	080ecfdc 	.word	0x080ecfdc

08007fec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008010:	2b00      	cmp	r3, #0
 8008012:	d035      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008014:	4b62      	ldr	r3, [pc, #392]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800801a:	f7fd ff45 	bl	8005ea8 <HAL_GetTick>
 800801e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008020:	e008      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008022:	f7fd ff41 	bl	8005ea8 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e0b0      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008034:	4b5b      	ldr	r3, [pc, #364]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f0      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	019a      	lsls	r2, r3, #6
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	071b      	lsls	r3, r3, #28
 800804c:	4955      	ldr	r1, [pc, #340]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800804e:	4313      	orrs	r3, r2
 8008050:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008054:	4b52      	ldr	r3, [pc, #328]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800805a:	f7fd ff25 	bl	8005ea8 <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008060:	e008      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008062:	f7fd ff21 	bl	8005ea8 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e090      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008074:	4b4b      	ldr	r3, [pc, #300]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0f0      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8083 	beq.w	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	4b44      	ldr	r3, [pc, #272]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008096:	4a43      	ldr	r2, [pc, #268]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800809c:	6413      	str	r3, [r2, #64]	@ 0x40
 800809e:	4b41      	ldr	r3, [pc, #260]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80080aa:	4b3f      	ldr	r3, [pc, #252]	@ (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a3e      	ldr	r2, [pc, #248]	@ (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080b6:	f7fd fef7 	bl	8005ea8 <HAL_GetTick>
 80080ba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80080bc:	e008      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080be:	f7fd fef3 	bl	8005ea8 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e062      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80080d0:	4b35      	ldr	r3, [pc, #212]	@ (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0f0      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080dc:	4b31      	ldr	r3, [pc, #196]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d02f      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d028      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080fa:	4b2a      	ldr	r3, [pc, #168]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008102:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008104:	4b29      	ldr	r3, [pc, #164]	@ (80081ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008106:	2201      	movs	r2, #1
 8008108:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800810a:	4b28      	ldr	r3, [pc, #160]	@ (80081ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800810c:	2200      	movs	r2, #0
 800810e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008110:	4a24      	ldr	r2, [pc, #144]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008116:	4b23      	ldr	r3, [pc, #140]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b01      	cmp	r3, #1
 8008120:	d114      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008122:	f7fd fec1 	bl	8005ea8 <HAL_GetTick>
 8008126:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008128:	e00a      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800812a:	f7fd febd 	bl	8005ea8 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008138:	4293      	cmp	r3, r2
 800813a:	d901      	bls.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e02a      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0ee      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008158:	d10d      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800815a:	4b12      	ldr	r3, [pc, #72]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800816a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800816e:	490d      	ldr	r1, [pc, #52]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008170:	4313      	orrs	r3, r2
 8008172:	608b      	str	r3, [r1, #8]
 8008174:	e005      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008176:	4b0b      	ldr	r3, [pc, #44]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	4a0a      	ldr	r2, [pc, #40]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800817c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008180:	6093      	str	r3, [r2, #8]
 8008182:	4b08      	ldr	r3, [pc, #32]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008184:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800818e:	4905      	ldr	r1, [pc, #20]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008190:	4313      	orrs	r3, r2
 8008192:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	42470068 	.word	0x42470068
 80081a4:	40023800 	.word	0x40023800
 80081a8:	40007000 	.word	0x40007000
 80081ac:	42470e40 	.word	0x42470e40

080081b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d13f      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80081ce:	4b24      	ldr	r3, [pc, #144]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d006      	beq.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081e4:	d12f      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80081e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80081e8:	617b      	str	r3, [r7, #20]
          break;
 80081ea:	e02f      	b.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081f8:	d108      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081fa:	4b19      	ldr	r3, [pc, #100]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008202:	4a19      	ldr	r2, [pc, #100]	@ (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008204:	fbb2 f3f3 	udiv	r3, r2, r3
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	e007      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800820c:	4b14      	ldr	r3, [pc, #80]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008214:	4a15      	ldr	r2, [pc, #84]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8008216:	fbb2 f3f3 	udiv	r3, r2, r3
 800821a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800821c:	4b10      	ldr	r3, [pc, #64]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800821e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008222:	099b      	lsrs	r3, r3, #6
 8008224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008230:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008236:	0f1b      	lsrs	r3, r3, #28
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008242:	617b      	str	r3, [r7, #20]
          break;
 8008244:	e002      	b.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
          break;
 800824a:	bf00      	nop
        }
      }
      break;
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800824e:	bf00      	nop
    }
  }
  return frequency;
 8008250:	697b      	ldr	r3, [r7, #20]
}
 8008252:	4618      	mov	r0, r3
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40023800 	.word	0x40023800
 8008264:	00bb8000 	.word	0x00bb8000
 8008268:	007a1200 	.word	0x007a1200
 800826c:	00f42400 	.word	0x00f42400

08008270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e07b      	b.n	800837a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d108      	bne.n	800829c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008292:	d009      	beq.n	80082a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	61da      	str	r2, [r3, #28]
 800829a:	e005      	b.n	80082a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fd fb2e 	bl	8005924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832c:	ea42 0103 	orr.w	r1, r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	f003 0104 	and.w	r1, r3, #4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834e:	f003 0210 	and.w	r2, r3, #16
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e042      	b.n	800841a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fd fc71 	bl	8005c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2224      	movs	r2, #36	@ 0x24
 80083b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f972 	bl	80086b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b08a      	sub	sp, #40	@ 0x28
 8008426:	af02      	add	r7, sp, #8
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	603b      	str	r3, [r7, #0]
 800842e:	4613      	mov	r3, r2
 8008430:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b20      	cmp	r3, #32
 8008440:	d175      	bne.n	800852e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_UART_Transmit+0x2c>
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e06e      	b.n	8008530 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2221      	movs	r2, #33	@ 0x21
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008460:	f7fd fd22 	bl	8005ea8 <HAL_GetTick>
 8008464:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	88fa      	ldrh	r2, [r7, #6]
 800846a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847a:	d108      	bne.n	800848e <HAL_UART_Transmit+0x6c>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	e003      	b.n	8008496 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008496:	e02e      	b.n	80084f6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2200      	movs	r2, #0
 80084a0:	2180      	movs	r1, #128	@ 0x80
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f848 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e03a      	b.n	8008530 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	3302      	adds	r3, #2
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	e007      	b.n	80084e8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	3301      	adds	r3, #1
 80084e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1cb      	bne.n	8008498 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2200      	movs	r2, #0
 8008508:	2140      	movs	r1, #64	@ 0x40
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 f814 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e006      	b.n	8008530 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	e000      	b.n	8008530 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800852e:	2302      	movs	r3, #2
  }
}
 8008530:	4618      	mov	r0, r3
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008548:	e03b      	b.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d037      	beq.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7fd fca9 	bl	8005ea8 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	6a3a      	ldr	r2, [r7, #32]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <UART_WaitOnFlagUntilTimeout+0x30>
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e03a      	b.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d023      	beq.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b80      	cmp	r3, #128	@ 0x80
 800857e:	d020      	beq.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b40      	cmp	r3, #64	@ 0x40
 8008584:	d01d      	beq.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b08      	cmp	r3, #8
 8008592:	d116      	bne.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f81d 	bl	80085ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2208      	movs	r2, #8
 80085b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e00f      	b.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4013      	ands	r3, r2
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	bf0c      	ite	eq
 80085d2:	2301      	moveq	r3, #1
 80085d4:	2300      	movne	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d0b4      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b095      	sub	sp, #84	@ 0x54
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	330c      	adds	r3, #12
 8008610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008612:	643a      	str	r2, [r7, #64]	@ 0x40
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e5      	bne.n	80085f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3314      	adds	r3, #20
 800862c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	61fb      	str	r3, [r7, #28]
   return(result);
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f023 0301 	bic.w	r3, r3, #1
 800863c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3314      	adds	r3, #20
 8008644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800864c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e5      	bne.n	8008626 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800865e:	2b01      	cmp	r3, #1
 8008660:	d119      	bne.n	8008696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330c      	adds	r3, #12
 8008668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	60bb      	str	r3, [r7, #8]
   return(result);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f023 0310 	bic.w	r3, r3, #16
 8008678:	647b      	str	r3, [r7, #68]	@ 0x44
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008682:	61ba      	str	r2, [r7, #24]
 8008684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e5      	bne.n	8008662 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80086a4:	bf00      	nop
 80086a6:	3754      	adds	r7, #84	@ 0x54
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b4:	b0c0      	sub	sp, #256	@ 0x100
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086cc:	68d9      	ldr	r1, [r3, #12]
 80086ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	ea40 0301 	orr.w	r3, r0, r1
 80086d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	431a      	orrs	r2, r3
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008708:	f021 010c 	bic.w	r1, r1, #12
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008716:	430b      	orrs	r3, r1
 8008718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800871a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872a:	6999      	ldr	r1, [r3, #24]
 800872c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	ea40 0301 	orr.w	r3, r0, r1
 8008736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4b8f      	ldr	r3, [pc, #572]	@ (800897c <UART_SetConfig+0x2cc>)
 8008740:	429a      	cmp	r2, r3
 8008742:	d005      	beq.n	8008750 <UART_SetConfig+0xa0>
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b8d      	ldr	r3, [pc, #564]	@ (8008980 <UART_SetConfig+0x2d0>)
 800874c:	429a      	cmp	r2, r3
 800874e:	d104      	bne.n	800875a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008750:	f7ff fc38 	bl	8007fc4 <HAL_RCC_GetPCLK2Freq>
 8008754:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008758:	e003      	b.n	8008762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800875a:	f7ff fc1f 	bl	8007f9c <HAL_RCC_GetPCLK1Freq>
 800875e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800876c:	f040 810c 	bne.w	8008988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008774:	2200      	movs	r2, #0
 8008776:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800877a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800877e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008782:	4622      	mov	r2, r4
 8008784:	462b      	mov	r3, r5
 8008786:	1891      	adds	r1, r2, r2
 8008788:	65b9      	str	r1, [r7, #88]	@ 0x58
 800878a:	415b      	adcs	r3, r3
 800878c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800878e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008792:	4621      	mov	r1, r4
 8008794:	eb12 0801 	adds.w	r8, r2, r1
 8008798:	4629      	mov	r1, r5
 800879a:	eb43 0901 	adc.w	r9, r3, r1
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087b2:	4690      	mov	r8, r2
 80087b4:	4699      	mov	r9, r3
 80087b6:	4623      	mov	r3, r4
 80087b8:	eb18 0303 	adds.w	r3, r8, r3
 80087bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087c0:	462b      	mov	r3, r5
 80087c2:	eb49 0303 	adc.w	r3, r9, r3
 80087c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80087da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087de:	460b      	mov	r3, r1
 80087e0:	18db      	adds	r3, r3, r3
 80087e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80087e4:	4613      	mov	r3, r2
 80087e6:	eb42 0303 	adc.w	r3, r2, r3
 80087ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80087ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80087f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80087f4:	f7fb ffa0 	bl	8004738 <__aeabi_uldivmod>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4b61      	ldr	r3, [pc, #388]	@ (8008984 <UART_SetConfig+0x2d4>)
 80087fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008802:	095b      	lsrs	r3, r3, #5
 8008804:	011c      	lsls	r4, r3, #4
 8008806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800880a:	2200      	movs	r2, #0
 800880c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008810:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	1891      	adds	r1, r2, r2
 800881e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008820:	415b      	adcs	r3, r3
 8008822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008828:	4641      	mov	r1, r8
 800882a:	eb12 0a01 	adds.w	sl, r2, r1
 800882e:	4649      	mov	r1, r9
 8008830:	eb43 0b01 	adc.w	fp, r3, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008848:	4692      	mov	sl, r2
 800884a:	469b      	mov	fp, r3
 800884c:	4643      	mov	r3, r8
 800884e:	eb1a 0303 	adds.w	r3, sl, r3
 8008852:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008856:	464b      	mov	r3, r9
 8008858:	eb4b 0303 	adc.w	r3, fp, r3
 800885c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800886c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008874:	460b      	mov	r3, r1
 8008876:	18db      	adds	r3, r3, r3
 8008878:	643b      	str	r3, [r7, #64]	@ 0x40
 800887a:	4613      	mov	r3, r2
 800887c:	eb42 0303 	adc.w	r3, r2, r3
 8008880:	647b      	str	r3, [r7, #68]	@ 0x44
 8008882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800888a:	f7fb ff55 	bl	8004738 <__aeabi_uldivmod>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4611      	mov	r1, r2
 8008894:	4b3b      	ldr	r3, [pc, #236]	@ (8008984 <UART_SetConfig+0x2d4>)
 8008896:	fba3 2301 	umull	r2, r3, r3, r1
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	2264      	movs	r2, #100	@ 0x64
 800889e:	fb02 f303 	mul.w	r3, r2, r3
 80088a2:	1acb      	subs	r3, r1, r3
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088aa:	4b36      	ldr	r3, [pc, #216]	@ (8008984 <UART_SetConfig+0x2d4>)
 80088ac:	fba3 2302 	umull	r2, r3, r3, r2
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80088b8:	441c      	add	r4, r3
 80088ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80088c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	1891      	adds	r1, r2, r2
 80088d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80088d4:	415b      	adcs	r3, r3
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80088dc:	4641      	mov	r1, r8
 80088de:	1851      	adds	r1, r2, r1
 80088e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80088e2:	4649      	mov	r1, r9
 80088e4:	414b      	adcs	r3, r1
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80088f4:	4659      	mov	r1, fp
 80088f6:	00cb      	lsls	r3, r1, #3
 80088f8:	4651      	mov	r1, sl
 80088fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088fe:	4651      	mov	r1, sl
 8008900:	00ca      	lsls	r2, r1, #3
 8008902:	4610      	mov	r0, r2
 8008904:	4619      	mov	r1, r3
 8008906:	4603      	mov	r3, r0
 8008908:	4642      	mov	r2, r8
 800890a:	189b      	adds	r3, r3, r2
 800890c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008910:	464b      	mov	r3, r9
 8008912:	460a      	mov	r2, r1
 8008914:	eb42 0303 	adc.w	r3, r2, r3
 8008918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800891c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008928:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800892c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008930:	460b      	mov	r3, r1
 8008932:	18db      	adds	r3, r3, r3
 8008934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008936:	4613      	mov	r3, r2
 8008938:	eb42 0303 	adc.w	r3, r2, r3
 800893c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800893e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008946:	f7fb fef7 	bl	8004738 <__aeabi_uldivmod>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4b0d      	ldr	r3, [pc, #52]	@ (8008984 <UART_SetConfig+0x2d4>)
 8008950:	fba3 1302 	umull	r1, r3, r3, r2
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	2164      	movs	r1, #100	@ 0x64
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	3332      	adds	r3, #50	@ 0x32
 8008962:	4a08      	ldr	r2, [pc, #32]	@ (8008984 <UART_SetConfig+0x2d4>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	f003 0207 	and.w	r2, r3, #7
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4422      	add	r2, r4
 8008976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008978:	e106      	b.n	8008b88 <UART_SetConfig+0x4d8>
 800897a:	bf00      	nop
 800897c:	40011000 	.word	0x40011000
 8008980:	40011400 	.word	0x40011400
 8008984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800898c:	2200      	movs	r2, #0
 800898e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008992:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800899a:	4642      	mov	r2, r8
 800899c:	464b      	mov	r3, r9
 800899e:	1891      	adds	r1, r2, r2
 80089a0:	6239      	str	r1, [r7, #32]
 80089a2:	415b      	adcs	r3, r3
 80089a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089aa:	4641      	mov	r1, r8
 80089ac:	1854      	adds	r4, r2, r1
 80089ae:	4649      	mov	r1, r9
 80089b0:	eb43 0501 	adc.w	r5, r3, r1
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 0300 	mov.w	r3, #0
 80089bc:	00eb      	lsls	r3, r5, #3
 80089be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089c2:	00e2      	lsls	r2, r4, #3
 80089c4:	4614      	mov	r4, r2
 80089c6:	461d      	mov	r5, r3
 80089c8:	4643      	mov	r3, r8
 80089ca:	18e3      	adds	r3, r4, r3
 80089cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089d0:	464b      	mov	r3, r9
 80089d2:	eb45 0303 	adc.w	r3, r5, r3
 80089d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80089f6:	4629      	mov	r1, r5
 80089f8:	008b      	lsls	r3, r1, #2
 80089fa:	4621      	mov	r1, r4
 80089fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a00:	4621      	mov	r1, r4
 8008a02:	008a      	lsls	r2, r1, #2
 8008a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a08:	f7fb fe96 	bl	8004738 <__aeabi_uldivmod>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4b60      	ldr	r3, [pc, #384]	@ (8008b94 <UART_SetConfig+0x4e4>)
 8008a12:	fba3 2302 	umull	r2, r3, r3, r2
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	011c      	lsls	r4, r3, #4
 8008a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	1891      	adds	r1, r2, r2
 8008a32:	61b9      	str	r1, [r7, #24]
 8008a34:	415b      	adcs	r3, r3
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	1851      	adds	r1, r2, r1
 8008a40:	6139      	str	r1, [r7, #16]
 8008a42:	4649      	mov	r1, r9
 8008a44:	414b      	adcs	r3, r1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a54:	4659      	mov	r1, fp
 8008a56:	00cb      	lsls	r3, r1, #3
 8008a58:	4651      	mov	r1, sl
 8008a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5e:	4651      	mov	r1, sl
 8008a60:	00ca      	lsls	r2, r1, #3
 8008a62:	4610      	mov	r0, r2
 8008a64:	4619      	mov	r1, r3
 8008a66:	4603      	mov	r3, r0
 8008a68:	4642      	mov	r2, r8
 8008a6a:	189b      	adds	r3, r3, r2
 8008a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a70:	464b      	mov	r3, r9
 8008a72:	460a      	mov	r2, r1
 8008a74:	eb42 0303 	adc.w	r3, r2, r3
 8008a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a94:	4649      	mov	r1, r9
 8008a96:	008b      	lsls	r3, r1, #2
 8008a98:	4641      	mov	r1, r8
 8008a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	008a      	lsls	r2, r1, #2
 8008aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008aa6:	f7fb fe47 	bl	8004738 <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4b38      	ldr	r3, [pc, #224]	@ (8008b94 <UART_SetConfig+0x4e4>)
 8008ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	2264      	movs	r2, #100	@ 0x64
 8008aba:	fb02 f303 	mul.w	r3, r2, r3
 8008abe:	1acb      	subs	r3, r1, r3
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	3332      	adds	r3, #50	@ 0x32
 8008ac4:	4a33      	ldr	r2, [pc, #204]	@ (8008b94 <UART_SetConfig+0x4e4>)
 8008ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ad0:	441c      	add	r4, r3
 8008ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ada:	677a      	str	r2, [r7, #116]	@ 0x74
 8008adc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ae0:	4642      	mov	r2, r8
 8008ae2:	464b      	mov	r3, r9
 8008ae4:	1891      	adds	r1, r2, r2
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	415b      	adcs	r3, r3
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008af0:	4641      	mov	r1, r8
 8008af2:	1851      	adds	r1, r2, r1
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	4649      	mov	r1, r9
 8008af8:	414b      	adcs	r3, r1
 8008afa:	607b      	str	r3, [r7, #4]
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b08:	4659      	mov	r1, fp
 8008b0a:	00cb      	lsls	r3, r1, #3
 8008b0c:	4651      	mov	r1, sl
 8008b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b12:	4651      	mov	r1, sl
 8008b14:	00ca      	lsls	r2, r1, #3
 8008b16:	4610      	mov	r0, r2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b22:	464b      	mov	r3, r9
 8008b24:	460a      	mov	r2, r1
 8008b26:	eb42 0303 	adc.w	r3, r2, r3
 8008b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b36:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b44:	4649      	mov	r1, r9
 8008b46:	008b      	lsls	r3, r1, #2
 8008b48:	4641      	mov	r1, r8
 8008b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4e:	4641      	mov	r1, r8
 8008b50:	008a      	lsls	r2, r1, #2
 8008b52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b56:	f7fb fdef 	bl	8004738 <__aeabi_uldivmod>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b94 <UART_SetConfig+0x4e4>)
 8008b60:	fba3 1302 	umull	r1, r3, r3, r2
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	2164      	movs	r1, #100	@ 0x64
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	3332      	adds	r3, #50	@ 0x32
 8008b72:	4a08      	ldr	r2, [pc, #32]	@ (8008b94 <UART_SetConfig+0x4e4>)
 8008b74:	fba2 2303 	umull	r2, r3, r2, r3
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	f003 020f 	and.w	r2, r3, #15
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4422      	add	r2, r4
 8008b86:	609a      	str	r2, [r3, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b94:	51eb851f 	.word	0x51eb851f

08008b98 <__cvt>:
 8008b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	ec57 6b10 	vmov	r6, r7, d0
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	bfbb      	ittet	lt
 8008baa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008bae:	461f      	movlt	r7, r3
 8008bb0:	2300      	movge	r3, #0
 8008bb2:	232d      	movlt	r3, #45	@ 0x2d
 8008bb4:	700b      	strb	r3, [r1, #0]
 8008bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008bbc:	4691      	mov	r9, r2
 8008bbe:	f023 0820 	bic.w	r8, r3, #32
 8008bc2:	bfbc      	itt	lt
 8008bc4:	4632      	movlt	r2, r6
 8008bc6:	4616      	movlt	r6, r2
 8008bc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bcc:	d005      	beq.n	8008bda <__cvt+0x42>
 8008bce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bd2:	d100      	bne.n	8008bd6 <__cvt+0x3e>
 8008bd4:	3401      	adds	r4, #1
 8008bd6:	2102      	movs	r1, #2
 8008bd8:	e000      	b.n	8008bdc <__cvt+0x44>
 8008bda:	2103      	movs	r1, #3
 8008bdc:	ab03      	add	r3, sp, #12
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	ab02      	add	r3, sp, #8
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	ec47 6b10 	vmov	d0, r6, r7
 8008be8:	4653      	mov	r3, sl
 8008bea:	4622      	mov	r2, r4
 8008bec:	f000 fe90 	bl	8009910 <_dtoa_r>
 8008bf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	d119      	bne.n	8008c2c <__cvt+0x94>
 8008bf8:	f019 0f01 	tst.w	r9, #1
 8008bfc:	d00e      	beq.n	8008c1c <__cvt+0x84>
 8008bfe:	eb00 0904 	add.w	r9, r0, r4
 8008c02:	2200      	movs	r2, #0
 8008c04:	2300      	movs	r3, #0
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7fb fd25 	bl	8004658 <__aeabi_dcmpeq>
 8008c0e:	b108      	cbz	r0, 8008c14 <__cvt+0x7c>
 8008c10:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c14:	2230      	movs	r2, #48	@ 0x30
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	454b      	cmp	r3, r9
 8008c1a:	d31e      	bcc.n	8008c5a <__cvt+0xc2>
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c20:	1b5b      	subs	r3, r3, r5
 8008c22:	4628      	mov	r0, r5
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	b004      	add	sp, #16
 8008c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c30:	eb00 0904 	add.w	r9, r0, r4
 8008c34:	d1e5      	bne.n	8008c02 <__cvt+0x6a>
 8008c36:	7803      	ldrb	r3, [r0, #0]
 8008c38:	2b30      	cmp	r3, #48	@ 0x30
 8008c3a:	d10a      	bne.n	8008c52 <__cvt+0xba>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7fb fd08 	bl	8004658 <__aeabi_dcmpeq>
 8008c48:	b918      	cbnz	r0, 8008c52 <__cvt+0xba>
 8008c4a:	f1c4 0401 	rsb	r4, r4, #1
 8008c4e:	f8ca 4000 	str.w	r4, [sl]
 8008c52:	f8da 3000 	ldr.w	r3, [sl]
 8008c56:	4499      	add	r9, r3
 8008c58:	e7d3      	b.n	8008c02 <__cvt+0x6a>
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	9103      	str	r1, [sp, #12]
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	e7d9      	b.n	8008c16 <__cvt+0x7e>

08008c62 <__exponent>:
 8008c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c64:	2900      	cmp	r1, #0
 8008c66:	bfba      	itte	lt
 8008c68:	4249      	neglt	r1, r1
 8008c6a:	232d      	movlt	r3, #45	@ 0x2d
 8008c6c:	232b      	movge	r3, #43	@ 0x2b
 8008c6e:	2909      	cmp	r1, #9
 8008c70:	7002      	strb	r2, [r0, #0]
 8008c72:	7043      	strb	r3, [r0, #1]
 8008c74:	dd29      	ble.n	8008cca <__exponent+0x68>
 8008c76:	f10d 0307 	add.w	r3, sp, #7
 8008c7a:	461d      	mov	r5, r3
 8008c7c:	270a      	movs	r7, #10
 8008c7e:	461a      	mov	r2, r3
 8008c80:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c84:	fb07 1416 	mls	r4, r7, r6, r1
 8008c88:	3430      	adds	r4, #48	@ 0x30
 8008c8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c8e:	460c      	mov	r4, r1
 8008c90:	2c63      	cmp	r4, #99	@ 0x63
 8008c92:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c96:	4631      	mov	r1, r6
 8008c98:	dcf1      	bgt.n	8008c7e <__exponent+0x1c>
 8008c9a:	3130      	adds	r1, #48	@ 0x30
 8008c9c:	1e94      	subs	r4, r2, #2
 8008c9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ca2:	1c41      	adds	r1, r0, #1
 8008ca4:	4623      	mov	r3, r4
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	d30a      	bcc.n	8008cc0 <__exponent+0x5e>
 8008caa:	f10d 0309 	add.w	r3, sp, #9
 8008cae:	1a9b      	subs	r3, r3, r2
 8008cb0:	42ac      	cmp	r4, r5
 8008cb2:	bf88      	it	hi
 8008cb4:	2300      	movhi	r3, #0
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	4403      	add	r3, r0
 8008cba:	1a18      	subs	r0, r3, r0
 8008cbc:	b003      	add	sp, #12
 8008cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008cc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008cc8:	e7ed      	b.n	8008ca6 <__exponent+0x44>
 8008cca:	2330      	movs	r3, #48	@ 0x30
 8008ccc:	3130      	adds	r1, #48	@ 0x30
 8008cce:	7083      	strb	r3, [r0, #2]
 8008cd0:	70c1      	strb	r1, [r0, #3]
 8008cd2:	1d03      	adds	r3, r0, #4
 8008cd4:	e7f1      	b.n	8008cba <__exponent+0x58>
	...

08008cd8 <_printf_float>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	b08d      	sub	sp, #52	@ 0x34
 8008cde:	460c      	mov	r4, r1
 8008ce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ce4:	4616      	mov	r6, r2
 8008ce6:	461f      	mov	r7, r3
 8008ce8:	4605      	mov	r5, r0
 8008cea:	f000 fd0f 	bl	800970c <_localeconv_r>
 8008cee:	6803      	ldr	r3, [r0, #0]
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fb f884 	bl	8003e00 <strlen>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8008d00:	9005      	str	r0, [sp, #20]
 8008d02:	3307      	adds	r3, #7
 8008d04:	f023 0307 	bic.w	r3, r3, #7
 8008d08:	f103 0208 	add.w	r2, r3, #8
 8008d0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d10:	f8d4 b000 	ldr.w	fp, [r4]
 8008d14:	f8c8 2000 	str.w	r2, [r8]
 8008d18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8008fa0 <_printf_float+0x2c8>)
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	f7fb fcc2 	bl	80046bc <__aeabi_dcmpun>
 8008d38:	bb70      	cbnz	r0, 8008d98 <_printf_float+0xc0>
 8008d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d3e:	4b98      	ldr	r3, [pc, #608]	@ (8008fa0 <_printf_float+0x2c8>)
 8008d40:	f04f 32ff 	mov.w	r2, #4294967295
 8008d44:	f7fb fc9c 	bl	8004680 <__aeabi_dcmple>
 8008d48:	bb30      	cbnz	r0, 8008d98 <_printf_float+0xc0>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4640      	mov	r0, r8
 8008d50:	4649      	mov	r1, r9
 8008d52:	f7fb fc8b 	bl	800466c <__aeabi_dcmplt>
 8008d56:	b110      	cbz	r0, 8008d5e <_printf_float+0x86>
 8008d58:	232d      	movs	r3, #45	@ 0x2d
 8008d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d5e:	4a91      	ldr	r2, [pc, #580]	@ (8008fa4 <_printf_float+0x2cc>)
 8008d60:	4b91      	ldr	r3, [pc, #580]	@ (8008fa8 <_printf_float+0x2d0>)
 8008d62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d66:	bf94      	ite	ls
 8008d68:	4690      	movls	r8, r2
 8008d6a:	4698      	movhi	r8, r3
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	f02b 0304 	bic.w	r3, fp, #4
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	f04f 0900 	mov.w	r9, #0
 8008d7a:	9700      	str	r7, [sp, #0]
 8008d7c:	4633      	mov	r3, r6
 8008d7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d80:	4621      	mov	r1, r4
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 f9d2 	bl	800912c <_printf_common>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f040 808d 	bne.w	8008ea8 <_printf_float+0x1d0>
 8008d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d92:	b00d      	add	sp, #52	@ 0x34
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	4642      	mov	r2, r8
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	4649      	mov	r1, r9
 8008da0:	f7fb fc8c 	bl	80046bc <__aeabi_dcmpun>
 8008da4:	b140      	cbz	r0, 8008db8 <_printf_float+0xe0>
 8008da6:	464b      	mov	r3, r9
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfbc      	itt	lt
 8008dac:	232d      	movlt	r3, #45	@ 0x2d
 8008dae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008db2:	4a7e      	ldr	r2, [pc, #504]	@ (8008fac <_printf_float+0x2d4>)
 8008db4:	4b7e      	ldr	r3, [pc, #504]	@ (8008fb0 <_printf_float+0x2d8>)
 8008db6:	e7d4      	b.n	8008d62 <_printf_float+0x8a>
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008dbe:	9206      	str	r2, [sp, #24]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	d13b      	bne.n	8008e3c <_printf_float+0x164>
 8008dc4:	2306      	movs	r3, #6
 8008dc6:	6063      	str	r3, [r4, #4]
 8008dc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6022      	str	r2, [r4, #0]
 8008dd0:	9303      	str	r3, [sp, #12]
 8008dd2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008dd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008dd8:	ab09      	add	r3, sp, #36	@ 0x24
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	ec49 8b10 	vmov	d0, r8, r9
 8008de2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7ff fed6 	bl	8008b98 <__cvt>
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008df0:	2b47      	cmp	r3, #71	@ 0x47
 8008df2:	4680      	mov	r8, r0
 8008df4:	d129      	bne.n	8008e4a <_printf_float+0x172>
 8008df6:	1cc8      	adds	r0, r1, #3
 8008df8:	db02      	blt.n	8008e00 <_printf_float+0x128>
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	dd41      	ble.n	8008e84 <_printf_float+0x1ac>
 8008e00:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e04:	fa5f fa8a 	uxtb.w	sl, sl
 8008e08:	3901      	subs	r1, #1
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e10:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e12:	f7ff ff26 	bl	8008c62 <__exponent>
 8008e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e18:	1813      	adds	r3, r2, r0
 8008e1a:	2a01      	cmp	r2, #1
 8008e1c:	4681      	mov	r9, r0
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	dc02      	bgt.n	8008e28 <_printf_float+0x150>
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	07d2      	lsls	r2, r2, #31
 8008e26:	d501      	bpl.n	8008e2c <_printf_float+0x154>
 8008e28:	3301      	adds	r3, #1
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0a2      	beq.n	8008d7a <_printf_float+0xa2>
 8008e34:	232d      	movs	r3, #45	@ 0x2d
 8008e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e3a:	e79e      	b.n	8008d7a <_printf_float+0xa2>
 8008e3c:	9a06      	ldr	r2, [sp, #24]
 8008e3e:	2a47      	cmp	r2, #71	@ 0x47
 8008e40:	d1c2      	bne.n	8008dc8 <_printf_float+0xf0>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1c0      	bne.n	8008dc8 <_printf_float+0xf0>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e7bd      	b.n	8008dc6 <_printf_float+0xee>
 8008e4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e4e:	d9db      	bls.n	8008e08 <_printf_float+0x130>
 8008e50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e54:	d118      	bne.n	8008e88 <_printf_float+0x1b0>
 8008e56:	2900      	cmp	r1, #0
 8008e58:	6863      	ldr	r3, [r4, #4]
 8008e5a:	dd0b      	ble.n	8008e74 <_printf_float+0x19c>
 8008e5c:	6121      	str	r1, [r4, #16]
 8008e5e:	b913      	cbnz	r3, 8008e66 <_printf_float+0x18e>
 8008e60:	6822      	ldr	r2, [r4, #0]
 8008e62:	07d0      	lsls	r0, r2, #31
 8008e64:	d502      	bpl.n	8008e6c <_printf_float+0x194>
 8008e66:	3301      	adds	r3, #1
 8008e68:	440b      	add	r3, r1
 8008e6a:	6123      	str	r3, [r4, #16]
 8008e6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e6e:	f04f 0900 	mov.w	r9, #0
 8008e72:	e7db      	b.n	8008e2c <_printf_float+0x154>
 8008e74:	b913      	cbnz	r3, 8008e7c <_printf_float+0x1a4>
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	07d2      	lsls	r2, r2, #31
 8008e7a:	d501      	bpl.n	8008e80 <_printf_float+0x1a8>
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	e7f4      	b.n	8008e6a <_printf_float+0x192>
 8008e80:	2301      	movs	r3, #1
 8008e82:	e7f2      	b.n	8008e6a <_printf_float+0x192>
 8008e84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	db05      	blt.n	8008e9a <_printf_float+0x1c2>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6121      	str	r1, [r4, #16]
 8008e92:	07d8      	lsls	r0, r3, #31
 8008e94:	d5ea      	bpl.n	8008e6c <_printf_float+0x194>
 8008e96:	1c4b      	adds	r3, r1, #1
 8008e98:	e7e7      	b.n	8008e6a <_printf_float+0x192>
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	bfd4      	ite	le
 8008e9e:	f1c1 0202 	rsble	r2, r1, #2
 8008ea2:	2201      	movgt	r2, #1
 8008ea4:	4413      	add	r3, r2
 8008ea6:	e7e0      	b.n	8008e6a <_printf_float+0x192>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	055a      	lsls	r2, r3, #21
 8008eac:	d407      	bmi.n	8008ebe <_printf_float+0x1e6>
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	47b8      	blx	r7
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d12b      	bne.n	8008f14 <_printf_float+0x23c>
 8008ebc:	e767      	b.n	8008d8e <_printf_float+0xb6>
 8008ebe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ec2:	f240 80dd 	bls.w	8009080 <_printf_float+0x3a8>
 8008ec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f7fb fbc3 	bl	8004658 <__aeabi_dcmpeq>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d033      	beq.n	8008f3e <_printf_float+0x266>
 8008ed6:	4a37      	ldr	r2, [pc, #220]	@ (8008fb4 <_printf_float+0x2dc>)
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f43f af54 	beq.w	8008d8e <_printf_float+0xb6>
 8008ee6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008eea:	4543      	cmp	r3, r8
 8008eec:	db02      	blt.n	8008ef4 <_printf_float+0x21c>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	07d8      	lsls	r0, r3, #31
 8008ef2:	d50f      	bpl.n	8008f14 <_printf_float+0x23c>
 8008ef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f af45 	beq.w	8008d8e <_printf_float+0xb6>
 8008f04:	f04f 0900 	mov.w	r9, #0
 8008f08:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f0c:	f104 0a1a 	add.w	sl, r4, #26
 8008f10:	45c8      	cmp	r8, r9
 8008f12:	dc09      	bgt.n	8008f28 <_printf_float+0x250>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	079b      	lsls	r3, r3, #30
 8008f18:	f100 8103 	bmi.w	8009122 <_printf_float+0x44a>
 8008f1c:	68e0      	ldr	r0, [r4, #12]
 8008f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f20:	4298      	cmp	r0, r3
 8008f22:	bfb8      	it	lt
 8008f24:	4618      	movlt	r0, r3
 8008f26:	e734      	b.n	8008d92 <_printf_float+0xba>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b8      	blx	r7
 8008f32:	3001      	adds	r0, #1
 8008f34:	f43f af2b 	beq.w	8008d8e <_printf_float+0xb6>
 8008f38:	f109 0901 	add.w	r9, r9, #1
 8008f3c:	e7e8      	b.n	8008f10 <_printf_float+0x238>
 8008f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dc39      	bgt.n	8008fb8 <_printf_float+0x2e0>
 8008f44:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb4 <_printf_float+0x2dc>)
 8008f46:	2301      	movs	r3, #1
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	47b8      	blx	r7
 8008f4e:	3001      	adds	r0, #1
 8008f50:	f43f af1d 	beq.w	8008d8e <_printf_float+0xb6>
 8008f54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f58:	ea59 0303 	orrs.w	r3, r9, r3
 8008f5c:	d102      	bne.n	8008f64 <_printf_float+0x28c>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	07d9      	lsls	r1, r3, #31
 8008f62:	d5d7      	bpl.n	8008f14 <_printf_float+0x23c>
 8008f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b8      	blx	r7
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f43f af0d 	beq.w	8008d8e <_printf_float+0xb6>
 8008f74:	f04f 0a00 	mov.w	sl, #0
 8008f78:	f104 0b1a 	add.w	fp, r4, #26
 8008f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7e:	425b      	negs	r3, r3
 8008f80:	4553      	cmp	r3, sl
 8008f82:	dc01      	bgt.n	8008f88 <_printf_float+0x2b0>
 8008f84:	464b      	mov	r3, r9
 8008f86:	e793      	b.n	8008eb0 <_printf_float+0x1d8>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	465a      	mov	r2, fp
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	f43f aefb 	beq.w	8008d8e <_printf_float+0xb6>
 8008f98:	f10a 0a01 	add.w	sl, sl, #1
 8008f9c:	e7ee      	b.n	8008f7c <_printf_float+0x2a4>
 8008f9e:	bf00      	nop
 8008fa0:	7fefffff 	.word	0x7fefffff
 8008fa4:	080ecfec 	.word	0x080ecfec
 8008fa8:	080ecff0 	.word	0x080ecff0
 8008fac:	080ecff4 	.word	0x080ecff4
 8008fb0:	080ecff8 	.word	0x080ecff8
 8008fb4:	080ecffc 	.word	0x080ecffc
 8008fb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fbe:	4553      	cmp	r3, sl
 8008fc0:	bfa8      	it	ge
 8008fc2:	4653      	movge	r3, sl
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	4699      	mov	r9, r3
 8008fc8:	dc36      	bgt.n	8009038 <_printf_float+0x360>
 8008fca:	f04f 0b00 	mov.w	fp, #0
 8008fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fd2:	f104 021a 	add.w	r2, r4, #26
 8008fd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fd8:	9306      	str	r3, [sp, #24]
 8008fda:	eba3 0309 	sub.w	r3, r3, r9
 8008fde:	455b      	cmp	r3, fp
 8008fe0:	dc31      	bgt.n	8009046 <_printf_float+0x36e>
 8008fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe4:	459a      	cmp	sl, r3
 8008fe6:	dc3a      	bgt.n	800905e <_printf_float+0x386>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	07da      	lsls	r2, r3, #31
 8008fec:	d437      	bmi.n	800905e <_printf_float+0x386>
 8008fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff0:	ebaa 0903 	sub.w	r9, sl, r3
 8008ff4:	9b06      	ldr	r3, [sp, #24]
 8008ff6:	ebaa 0303 	sub.w	r3, sl, r3
 8008ffa:	4599      	cmp	r9, r3
 8008ffc:	bfa8      	it	ge
 8008ffe:	4699      	movge	r9, r3
 8009000:	f1b9 0f00 	cmp.w	r9, #0
 8009004:	dc33      	bgt.n	800906e <_printf_float+0x396>
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800900e:	f104 0b1a 	add.w	fp, r4, #26
 8009012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009014:	ebaa 0303 	sub.w	r3, sl, r3
 8009018:	eba3 0309 	sub.w	r3, r3, r9
 800901c:	4543      	cmp	r3, r8
 800901e:	f77f af79 	ble.w	8008f14 <_printf_float+0x23c>
 8009022:	2301      	movs	r3, #1
 8009024:	465a      	mov	r2, fp
 8009026:	4631      	mov	r1, r6
 8009028:	4628      	mov	r0, r5
 800902a:	47b8      	blx	r7
 800902c:	3001      	adds	r0, #1
 800902e:	f43f aeae 	beq.w	8008d8e <_printf_float+0xb6>
 8009032:	f108 0801 	add.w	r8, r8, #1
 8009036:	e7ec      	b.n	8009012 <_printf_float+0x33a>
 8009038:	4642      	mov	r2, r8
 800903a:	4631      	mov	r1, r6
 800903c:	4628      	mov	r0, r5
 800903e:	47b8      	blx	r7
 8009040:	3001      	adds	r0, #1
 8009042:	d1c2      	bne.n	8008fca <_printf_float+0x2f2>
 8009044:	e6a3      	b.n	8008d8e <_printf_float+0xb6>
 8009046:	2301      	movs	r3, #1
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	9206      	str	r2, [sp, #24]
 800904e:	47b8      	blx	r7
 8009050:	3001      	adds	r0, #1
 8009052:	f43f ae9c 	beq.w	8008d8e <_printf_float+0xb6>
 8009056:	9a06      	ldr	r2, [sp, #24]
 8009058:	f10b 0b01 	add.w	fp, fp, #1
 800905c:	e7bb      	b.n	8008fd6 <_printf_float+0x2fe>
 800905e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	d1c0      	bne.n	8008fee <_printf_float+0x316>
 800906c:	e68f      	b.n	8008d8e <_printf_float+0xb6>
 800906e:	9a06      	ldr	r2, [sp, #24]
 8009070:	464b      	mov	r3, r9
 8009072:	4442      	add	r2, r8
 8009074:	4631      	mov	r1, r6
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	d1c3      	bne.n	8009006 <_printf_float+0x32e>
 800907e:	e686      	b.n	8008d8e <_printf_float+0xb6>
 8009080:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009084:	f1ba 0f01 	cmp.w	sl, #1
 8009088:	dc01      	bgt.n	800908e <_printf_float+0x3b6>
 800908a:	07db      	lsls	r3, r3, #31
 800908c:	d536      	bpl.n	80090fc <_printf_float+0x424>
 800908e:	2301      	movs	r3, #1
 8009090:	4642      	mov	r2, r8
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	f43f ae78 	beq.w	8008d8e <_printf_float+0xb6>
 800909e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a2:	4631      	mov	r1, r6
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b8      	blx	r7
 80090a8:	3001      	adds	r0, #1
 80090aa:	f43f ae70 	beq.w	8008d8e <_printf_float+0xb6>
 80090ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090b2:	2200      	movs	r2, #0
 80090b4:	2300      	movs	r3, #0
 80090b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ba:	f7fb facd 	bl	8004658 <__aeabi_dcmpeq>
 80090be:	b9c0      	cbnz	r0, 80090f2 <_printf_float+0x41a>
 80090c0:	4653      	mov	r3, sl
 80090c2:	f108 0201 	add.w	r2, r8, #1
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	d10c      	bne.n	80090ea <_printf_float+0x412>
 80090d0:	e65d      	b.n	8008d8e <_printf_float+0xb6>
 80090d2:	2301      	movs	r3, #1
 80090d4:	465a      	mov	r2, fp
 80090d6:	4631      	mov	r1, r6
 80090d8:	4628      	mov	r0, r5
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f ae56 	beq.w	8008d8e <_printf_float+0xb6>
 80090e2:	f108 0801 	add.w	r8, r8, #1
 80090e6:	45d0      	cmp	r8, sl
 80090e8:	dbf3      	blt.n	80090d2 <_printf_float+0x3fa>
 80090ea:	464b      	mov	r3, r9
 80090ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090f0:	e6df      	b.n	8008eb2 <_printf_float+0x1da>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	f104 0b1a 	add.w	fp, r4, #26
 80090fa:	e7f4      	b.n	80090e6 <_printf_float+0x40e>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4642      	mov	r2, r8
 8009100:	e7e1      	b.n	80090c6 <_printf_float+0x3ee>
 8009102:	2301      	movs	r3, #1
 8009104:	464a      	mov	r2, r9
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f ae3e 	beq.w	8008d8e <_printf_float+0xb6>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800911a:	1a5b      	subs	r3, r3, r1
 800911c:	4543      	cmp	r3, r8
 800911e:	dcf0      	bgt.n	8009102 <_printf_float+0x42a>
 8009120:	e6fc      	b.n	8008f1c <_printf_float+0x244>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	f104 0919 	add.w	r9, r4, #25
 800912a:	e7f4      	b.n	8009116 <_printf_float+0x43e>

0800912c <_printf_common>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	4616      	mov	r6, r2
 8009132:	4698      	mov	r8, r3
 8009134:	688a      	ldr	r2, [r1, #8]
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800913c:	4293      	cmp	r3, r2
 800913e:	bfb8      	it	lt
 8009140:	4613      	movlt	r3, r2
 8009142:	6033      	str	r3, [r6, #0]
 8009144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009148:	4607      	mov	r7, r0
 800914a:	460c      	mov	r4, r1
 800914c:	b10a      	cbz	r2, 8009152 <_printf_common+0x26>
 800914e:	3301      	adds	r3, #1
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	0699      	lsls	r1, r3, #26
 8009156:	bf42      	ittt	mi
 8009158:	6833      	ldrmi	r3, [r6, #0]
 800915a:	3302      	addmi	r3, #2
 800915c:	6033      	strmi	r3, [r6, #0]
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	f015 0506 	ands.w	r5, r5, #6
 8009164:	d106      	bne.n	8009174 <_printf_common+0x48>
 8009166:	f104 0a19 	add.w	sl, r4, #25
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	6832      	ldr	r2, [r6, #0]
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	42ab      	cmp	r3, r5
 8009172:	dc26      	bgt.n	80091c2 <_printf_common+0x96>
 8009174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009178:	6822      	ldr	r2, [r4, #0]
 800917a:	3b00      	subs	r3, #0
 800917c:	bf18      	it	ne
 800917e:	2301      	movne	r3, #1
 8009180:	0692      	lsls	r2, r2, #26
 8009182:	d42b      	bmi.n	80091dc <_printf_common+0xb0>
 8009184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009188:	4641      	mov	r1, r8
 800918a:	4638      	mov	r0, r7
 800918c:	47c8      	blx	r9
 800918e:	3001      	adds	r0, #1
 8009190:	d01e      	beq.n	80091d0 <_printf_common+0xa4>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	6922      	ldr	r2, [r4, #16]
 8009196:	f003 0306 	and.w	r3, r3, #6
 800919a:	2b04      	cmp	r3, #4
 800919c:	bf02      	ittt	eq
 800919e:	68e5      	ldreq	r5, [r4, #12]
 80091a0:	6833      	ldreq	r3, [r6, #0]
 80091a2:	1aed      	subeq	r5, r5, r3
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	bf0c      	ite	eq
 80091a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091ac:	2500      	movne	r5, #0
 80091ae:	4293      	cmp	r3, r2
 80091b0:	bfc4      	itt	gt
 80091b2:	1a9b      	subgt	r3, r3, r2
 80091b4:	18ed      	addgt	r5, r5, r3
 80091b6:	2600      	movs	r6, #0
 80091b8:	341a      	adds	r4, #26
 80091ba:	42b5      	cmp	r5, r6
 80091bc:	d11a      	bne.n	80091f4 <_printf_common+0xc8>
 80091be:	2000      	movs	r0, #0
 80091c0:	e008      	b.n	80091d4 <_printf_common+0xa8>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4652      	mov	r2, sl
 80091c6:	4641      	mov	r1, r8
 80091c8:	4638      	mov	r0, r7
 80091ca:	47c8      	blx	r9
 80091cc:	3001      	adds	r0, #1
 80091ce:	d103      	bne.n	80091d8 <_printf_common+0xac>
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d8:	3501      	adds	r5, #1
 80091da:	e7c6      	b.n	800916a <_printf_common+0x3e>
 80091dc:	18e1      	adds	r1, r4, r3
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	2030      	movs	r0, #48	@ 0x30
 80091e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091e6:	4422      	add	r2, r4
 80091e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091f0:	3302      	adds	r3, #2
 80091f2:	e7c7      	b.n	8009184 <_printf_common+0x58>
 80091f4:	2301      	movs	r3, #1
 80091f6:	4622      	mov	r2, r4
 80091f8:	4641      	mov	r1, r8
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c8      	blx	r9
 80091fe:	3001      	adds	r0, #1
 8009200:	d0e6      	beq.n	80091d0 <_printf_common+0xa4>
 8009202:	3601      	adds	r6, #1
 8009204:	e7d9      	b.n	80091ba <_printf_common+0x8e>
	...

08009208 <_printf_i>:
 8009208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	7e0f      	ldrb	r7, [r1, #24]
 800920e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009210:	2f78      	cmp	r7, #120	@ 0x78
 8009212:	4691      	mov	r9, r2
 8009214:	4680      	mov	r8, r0
 8009216:	460c      	mov	r4, r1
 8009218:	469a      	mov	sl, r3
 800921a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800921e:	d807      	bhi.n	8009230 <_printf_i+0x28>
 8009220:	2f62      	cmp	r7, #98	@ 0x62
 8009222:	d80a      	bhi.n	800923a <_printf_i+0x32>
 8009224:	2f00      	cmp	r7, #0
 8009226:	f000 80d2 	beq.w	80093ce <_printf_i+0x1c6>
 800922a:	2f58      	cmp	r7, #88	@ 0x58
 800922c:	f000 80b9 	beq.w	80093a2 <_printf_i+0x19a>
 8009230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009238:	e03a      	b.n	80092b0 <_printf_i+0xa8>
 800923a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800923e:	2b15      	cmp	r3, #21
 8009240:	d8f6      	bhi.n	8009230 <_printf_i+0x28>
 8009242:	a101      	add	r1, pc, #4	@ (adr r1, 8009248 <_printf_i+0x40>)
 8009244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009248:	080092a1 	.word	0x080092a1
 800924c:	080092b5 	.word	0x080092b5
 8009250:	08009231 	.word	0x08009231
 8009254:	08009231 	.word	0x08009231
 8009258:	08009231 	.word	0x08009231
 800925c:	08009231 	.word	0x08009231
 8009260:	080092b5 	.word	0x080092b5
 8009264:	08009231 	.word	0x08009231
 8009268:	08009231 	.word	0x08009231
 800926c:	08009231 	.word	0x08009231
 8009270:	08009231 	.word	0x08009231
 8009274:	080093b5 	.word	0x080093b5
 8009278:	080092df 	.word	0x080092df
 800927c:	0800936f 	.word	0x0800936f
 8009280:	08009231 	.word	0x08009231
 8009284:	08009231 	.word	0x08009231
 8009288:	080093d7 	.word	0x080093d7
 800928c:	08009231 	.word	0x08009231
 8009290:	080092df 	.word	0x080092df
 8009294:	08009231 	.word	0x08009231
 8009298:	08009231 	.word	0x08009231
 800929c:	08009377 	.word	0x08009377
 80092a0:	6833      	ldr	r3, [r6, #0]
 80092a2:	1d1a      	adds	r2, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6032      	str	r2, [r6, #0]
 80092a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092b0:	2301      	movs	r3, #1
 80092b2:	e09d      	b.n	80093f0 <_printf_i+0x1e8>
 80092b4:	6833      	ldr	r3, [r6, #0]
 80092b6:	6820      	ldr	r0, [r4, #0]
 80092b8:	1d19      	adds	r1, r3, #4
 80092ba:	6031      	str	r1, [r6, #0]
 80092bc:	0606      	lsls	r6, r0, #24
 80092be:	d501      	bpl.n	80092c4 <_printf_i+0xbc>
 80092c0:	681d      	ldr	r5, [r3, #0]
 80092c2:	e003      	b.n	80092cc <_printf_i+0xc4>
 80092c4:	0645      	lsls	r5, r0, #25
 80092c6:	d5fb      	bpl.n	80092c0 <_printf_i+0xb8>
 80092c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	da03      	bge.n	80092d8 <_printf_i+0xd0>
 80092d0:	232d      	movs	r3, #45	@ 0x2d
 80092d2:	426d      	negs	r5, r5
 80092d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092d8:	4859      	ldr	r0, [pc, #356]	@ (8009440 <_printf_i+0x238>)
 80092da:	230a      	movs	r3, #10
 80092dc:	e011      	b.n	8009302 <_printf_i+0xfa>
 80092de:	6821      	ldr	r1, [r4, #0]
 80092e0:	6833      	ldr	r3, [r6, #0]
 80092e2:	0608      	lsls	r0, r1, #24
 80092e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80092e8:	d402      	bmi.n	80092f0 <_printf_i+0xe8>
 80092ea:	0649      	lsls	r1, r1, #25
 80092ec:	bf48      	it	mi
 80092ee:	b2ad      	uxthmi	r5, r5
 80092f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092f2:	4853      	ldr	r0, [pc, #332]	@ (8009440 <_printf_i+0x238>)
 80092f4:	6033      	str	r3, [r6, #0]
 80092f6:	bf14      	ite	ne
 80092f8:	230a      	movne	r3, #10
 80092fa:	2308      	moveq	r3, #8
 80092fc:	2100      	movs	r1, #0
 80092fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009302:	6866      	ldr	r6, [r4, #4]
 8009304:	60a6      	str	r6, [r4, #8]
 8009306:	2e00      	cmp	r6, #0
 8009308:	bfa2      	ittt	ge
 800930a:	6821      	ldrge	r1, [r4, #0]
 800930c:	f021 0104 	bicge.w	r1, r1, #4
 8009310:	6021      	strge	r1, [r4, #0]
 8009312:	b90d      	cbnz	r5, 8009318 <_printf_i+0x110>
 8009314:	2e00      	cmp	r6, #0
 8009316:	d04b      	beq.n	80093b0 <_printf_i+0x1a8>
 8009318:	4616      	mov	r6, r2
 800931a:	fbb5 f1f3 	udiv	r1, r5, r3
 800931e:	fb03 5711 	mls	r7, r3, r1, r5
 8009322:	5dc7      	ldrb	r7, [r0, r7]
 8009324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009328:	462f      	mov	r7, r5
 800932a:	42bb      	cmp	r3, r7
 800932c:	460d      	mov	r5, r1
 800932e:	d9f4      	bls.n	800931a <_printf_i+0x112>
 8009330:	2b08      	cmp	r3, #8
 8009332:	d10b      	bne.n	800934c <_printf_i+0x144>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07df      	lsls	r7, r3, #31
 8009338:	d508      	bpl.n	800934c <_printf_i+0x144>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	4299      	cmp	r1, r3
 8009340:	bfde      	ittt	le
 8009342:	2330      	movle	r3, #48	@ 0x30
 8009344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800934c:	1b92      	subs	r2, r2, r6
 800934e:	6122      	str	r2, [r4, #16]
 8009350:	f8cd a000 	str.w	sl, [sp]
 8009354:	464b      	mov	r3, r9
 8009356:	aa03      	add	r2, sp, #12
 8009358:	4621      	mov	r1, r4
 800935a:	4640      	mov	r0, r8
 800935c:	f7ff fee6 	bl	800912c <_printf_common>
 8009360:	3001      	adds	r0, #1
 8009362:	d14a      	bne.n	80093fa <_printf_i+0x1f2>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	b004      	add	sp, #16
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f043 0320 	orr.w	r3, r3, #32
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	4833      	ldr	r0, [pc, #204]	@ (8009444 <_printf_i+0x23c>)
 8009378:	2778      	movs	r7, #120	@ 0x78
 800937a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	6831      	ldr	r1, [r6, #0]
 8009382:	061f      	lsls	r7, r3, #24
 8009384:	f851 5b04 	ldr.w	r5, [r1], #4
 8009388:	d402      	bmi.n	8009390 <_printf_i+0x188>
 800938a:	065f      	lsls	r7, r3, #25
 800938c:	bf48      	it	mi
 800938e:	b2ad      	uxthmi	r5, r5
 8009390:	6031      	str	r1, [r6, #0]
 8009392:	07d9      	lsls	r1, r3, #31
 8009394:	bf44      	itt	mi
 8009396:	f043 0320 	orrmi.w	r3, r3, #32
 800939a:	6023      	strmi	r3, [r4, #0]
 800939c:	b11d      	cbz	r5, 80093a6 <_printf_i+0x19e>
 800939e:	2310      	movs	r3, #16
 80093a0:	e7ac      	b.n	80092fc <_printf_i+0xf4>
 80093a2:	4827      	ldr	r0, [pc, #156]	@ (8009440 <_printf_i+0x238>)
 80093a4:	e7e9      	b.n	800937a <_printf_i+0x172>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	f023 0320 	bic.w	r3, r3, #32
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	e7f6      	b.n	800939e <_printf_i+0x196>
 80093b0:	4616      	mov	r6, r2
 80093b2:	e7bd      	b.n	8009330 <_printf_i+0x128>
 80093b4:	6833      	ldr	r3, [r6, #0]
 80093b6:	6825      	ldr	r5, [r4, #0]
 80093b8:	6961      	ldr	r1, [r4, #20]
 80093ba:	1d18      	adds	r0, r3, #4
 80093bc:	6030      	str	r0, [r6, #0]
 80093be:	062e      	lsls	r6, r5, #24
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	d501      	bpl.n	80093c8 <_printf_i+0x1c0>
 80093c4:	6019      	str	r1, [r3, #0]
 80093c6:	e002      	b.n	80093ce <_printf_i+0x1c6>
 80093c8:	0668      	lsls	r0, r5, #25
 80093ca:	d5fb      	bpl.n	80093c4 <_printf_i+0x1bc>
 80093cc:	8019      	strh	r1, [r3, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	4616      	mov	r6, r2
 80093d4:	e7bc      	b.n	8009350 <_printf_i+0x148>
 80093d6:	6833      	ldr	r3, [r6, #0]
 80093d8:	1d1a      	adds	r2, r3, #4
 80093da:	6032      	str	r2, [r6, #0]
 80093dc:	681e      	ldr	r6, [r3, #0]
 80093de:	6862      	ldr	r2, [r4, #4]
 80093e0:	2100      	movs	r1, #0
 80093e2:	4630      	mov	r0, r6
 80093e4:	f7fa fcbc 	bl	8003d60 <memchr>
 80093e8:	b108      	cbz	r0, 80093ee <_printf_i+0x1e6>
 80093ea:	1b80      	subs	r0, r0, r6
 80093ec:	6060      	str	r0, [r4, #4]
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	6123      	str	r3, [r4, #16]
 80093f2:	2300      	movs	r3, #0
 80093f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f8:	e7aa      	b.n	8009350 <_printf_i+0x148>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	4632      	mov	r2, r6
 80093fe:	4649      	mov	r1, r9
 8009400:	4640      	mov	r0, r8
 8009402:	47d0      	blx	sl
 8009404:	3001      	adds	r0, #1
 8009406:	d0ad      	beq.n	8009364 <_printf_i+0x15c>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	079b      	lsls	r3, r3, #30
 800940c:	d413      	bmi.n	8009436 <_printf_i+0x22e>
 800940e:	68e0      	ldr	r0, [r4, #12]
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	4298      	cmp	r0, r3
 8009414:	bfb8      	it	lt
 8009416:	4618      	movlt	r0, r3
 8009418:	e7a6      	b.n	8009368 <_printf_i+0x160>
 800941a:	2301      	movs	r3, #1
 800941c:	4632      	mov	r2, r6
 800941e:	4649      	mov	r1, r9
 8009420:	4640      	mov	r0, r8
 8009422:	47d0      	blx	sl
 8009424:	3001      	adds	r0, #1
 8009426:	d09d      	beq.n	8009364 <_printf_i+0x15c>
 8009428:	3501      	adds	r5, #1
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	9903      	ldr	r1, [sp, #12]
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	42ab      	cmp	r3, r5
 8009432:	dcf2      	bgt.n	800941a <_printf_i+0x212>
 8009434:	e7eb      	b.n	800940e <_printf_i+0x206>
 8009436:	2500      	movs	r5, #0
 8009438:	f104 0619 	add.w	r6, r4, #25
 800943c:	e7f5      	b.n	800942a <_printf_i+0x222>
 800943e:	bf00      	nop
 8009440:	080ecffe 	.word	0x080ecffe
 8009444:	080ed00f 	.word	0x080ed00f

08009448 <std>:
 8009448:	2300      	movs	r3, #0
 800944a:	b510      	push	{r4, lr}
 800944c:	4604      	mov	r4, r0
 800944e:	e9c0 3300 	strd	r3, r3, [r0]
 8009452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009456:	6083      	str	r3, [r0, #8]
 8009458:	8181      	strh	r1, [r0, #12]
 800945a:	6643      	str	r3, [r0, #100]	@ 0x64
 800945c:	81c2      	strh	r2, [r0, #14]
 800945e:	6183      	str	r3, [r0, #24]
 8009460:	4619      	mov	r1, r3
 8009462:	2208      	movs	r2, #8
 8009464:	305c      	adds	r0, #92	@ 0x5c
 8009466:	f000 f948 	bl	80096fa <memset>
 800946a:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <std+0x58>)
 800946c:	6263      	str	r3, [r4, #36]	@ 0x24
 800946e:	4b0d      	ldr	r3, [pc, #52]	@ (80094a4 <std+0x5c>)
 8009470:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009472:	4b0d      	ldr	r3, [pc, #52]	@ (80094a8 <std+0x60>)
 8009474:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009476:	4b0d      	ldr	r3, [pc, #52]	@ (80094ac <std+0x64>)
 8009478:	6323      	str	r3, [r4, #48]	@ 0x30
 800947a:	4b0d      	ldr	r3, [pc, #52]	@ (80094b0 <std+0x68>)
 800947c:	6224      	str	r4, [r4, #32]
 800947e:	429c      	cmp	r4, r3
 8009480:	d006      	beq.n	8009490 <std+0x48>
 8009482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009486:	4294      	cmp	r4, r2
 8009488:	d002      	beq.n	8009490 <std+0x48>
 800948a:	33d0      	adds	r3, #208	@ 0xd0
 800948c:	429c      	cmp	r4, r3
 800948e:	d105      	bne.n	800949c <std+0x54>
 8009490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009498:	f000 b9ac 	b.w	80097f4 <__retarget_lock_init_recursive>
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop
 80094a0:	08009675 	.word	0x08009675
 80094a4:	08009697 	.word	0x08009697
 80094a8:	080096cf 	.word	0x080096cf
 80094ac:	080096f3 	.word	0x080096f3
 80094b0:	20006c58 	.word	0x20006c58

080094b4 <stdio_exit_handler>:
 80094b4:	4a02      	ldr	r2, [pc, #8]	@ (80094c0 <stdio_exit_handler+0xc>)
 80094b6:	4903      	ldr	r1, [pc, #12]	@ (80094c4 <stdio_exit_handler+0x10>)
 80094b8:	4803      	ldr	r0, [pc, #12]	@ (80094c8 <stdio_exit_handler+0x14>)
 80094ba:	f000 b869 	b.w	8009590 <_fwalk_sglue>
 80094be:	bf00      	nop
 80094c0:	2000000c 	.word	0x2000000c
 80094c4:	0800b155 	.word	0x0800b155
 80094c8:	2000001c 	.word	0x2000001c

080094cc <cleanup_stdio>:
 80094cc:	6841      	ldr	r1, [r0, #4]
 80094ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <cleanup_stdio+0x34>)
 80094d0:	4299      	cmp	r1, r3
 80094d2:	b510      	push	{r4, lr}
 80094d4:	4604      	mov	r4, r0
 80094d6:	d001      	beq.n	80094dc <cleanup_stdio+0x10>
 80094d8:	f001 fe3c 	bl	800b154 <_fflush_r>
 80094dc:	68a1      	ldr	r1, [r4, #8]
 80094de:	4b09      	ldr	r3, [pc, #36]	@ (8009504 <cleanup_stdio+0x38>)
 80094e0:	4299      	cmp	r1, r3
 80094e2:	d002      	beq.n	80094ea <cleanup_stdio+0x1e>
 80094e4:	4620      	mov	r0, r4
 80094e6:	f001 fe35 	bl	800b154 <_fflush_r>
 80094ea:	68e1      	ldr	r1, [r4, #12]
 80094ec:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <cleanup_stdio+0x3c>)
 80094ee:	4299      	cmp	r1, r3
 80094f0:	d004      	beq.n	80094fc <cleanup_stdio+0x30>
 80094f2:	4620      	mov	r0, r4
 80094f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f8:	f001 be2c 	b.w	800b154 <_fflush_r>
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop
 8009500:	20006c58 	.word	0x20006c58
 8009504:	20006cc0 	.word	0x20006cc0
 8009508:	20006d28 	.word	0x20006d28

0800950c <global_stdio_init.part.0>:
 800950c:	b510      	push	{r4, lr}
 800950e:	4b0b      	ldr	r3, [pc, #44]	@ (800953c <global_stdio_init.part.0+0x30>)
 8009510:	4c0b      	ldr	r4, [pc, #44]	@ (8009540 <global_stdio_init.part.0+0x34>)
 8009512:	4a0c      	ldr	r2, [pc, #48]	@ (8009544 <global_stdio_init.part.0+0x38>)
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	4620      	mov	r0, r4
 8009518:	2200      	movs	r2, #0
 800951a:	2104      	movs	r1, #4
 800951c:	f7ff ff94 	bl	8009448 <std>
 8009520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009524:	2201      	movs	r2, #1
 8009526:	2109      	movs	r1, #9
 8009528:	f7ff ff8e 	bl	8009448 <std>
 800952c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009530:	2202      	movs	r2, #2
 8009532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009536:	2112      	movs	r1, #18
 8009538:	f7ff bf86 	b.w	8009448 <std>
 800953c:	20006d90 	.word	0x20006d90
 8009540:	20006c58 	.word	0x20006c58
 8009544:	080094b5 	.word	0x080094b5

08009548 <__sfp_lock_acquire>:
 8009548:	4801      	ldr	r0, [pc, #4]	@ (8009550 <__sfp_lock_acquire+0x8>)
 800954a:	f000 b954 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 800954e:	bf00      	nop
 8009550:	20006d99 	.word	0x20006d99

08009554 <__sfp_lock_release>:
 8009554:	4801      	ldr	r0, [pc, #4]	@ (800955c <__sfp_lock_release+0x8>)
 8009556:	f000 b94f 	b.w	80097f8 <__retarget_lock_release_recursive>
 800955a:	bf00      	nop
 800955c:	20006d99 	.word	0x20006d99

08009560 <__sinit>:
 8009560:	b510      	push	{r4, lr}
 8009562:	4604      	mov	r4, r0
 8009564:	f7ff fff0 	bl	8009548 <__sfp_lock_acquire>
 8009568:	6a23      	ldr	r3, [r4, #32]
 800956a:	b11b      	cbz	r3, 8009574 <__sinit+0x14>
 800956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009570:	f7ff bff0 	b.w	8009554 <__sfp_lock_release>
 8009574:	4b04      	ldr	r3, [pc, #16]	@ (8009588 <__sinit+0x28>)
 8009576:	6223      	str	r3, [r4, #32]
 8009578:	4b04      	ldr	r3, [pc, #16]	@ (800958c <__sinit+0x2c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1f5      	bne.n	800956c <__sinit+0xc>
 8009580:	f7ff ffc4 	bl	800950c <global_stdio_init.part.0>
 8009584:	e7f2      	b.n	800956c <__sinit+0xc>
 8009586:	bf00      	nop
 8009588:	080094cd 	.word	0x080094cd
 800958c:	20006d90 	.word	0x20006d90

08009590 <_fwalk_sglue>:
 8009590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009594:	4607      	mov	r7, r0
 8009596:	4688      	mov	r8, r1
 8009598:	4614      	mov	r4, r2
 800959a:	2600      	movs	r6, #0
 800959c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095a0:	f1b9 0901 	subs.w	r9, r9, #1
 80095a4:	d505      	bpl.n	80095b2 <_fwalk_sglue+0x22>
 80095a6:	6824      	ldr	r4, [r4, #0]
 80095a8:	2c00      	cmp	r4, #0
 80095aa:	d1f7      	bne.n	800959c <_fwalk_sglue+0xc>
 80095ac:	4630      	mov	r0, r6
 80095ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095b2:	89ab      	ldrh	r3, [r5, #12]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d907      	bls.n	80095c8 <_fwalk_sglue+0x38>
 80095b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095bc:	3301      	adds	r3, #1
 80095be:	d003      	beq.n	80095c8 <_fwalk_sglue+0x38>
 80095c0:	4629      	mov	r1, r5
 80095c2:	4638      	mov	r0, r7
 80095c4:	47c0      	blx	r8
 80095c6:	4306      	orrs	r6, r0
 80095c8:	3568      	adds	r5, #104	@ 0x68
 80095ca:	e7e9      	b.n	80095a0 <_fwalk_sglue+0x10>

080095cc <sniprintf>:
 80095cc:	b40c      	push	{r2, r3}
 80095ce:	b530      	push	{r4, r5, lr}
 80095d0:	4b17      	ldr	r3, [pc, #92]	@ (8009630 <sniprintf+0x64>)
 80095d2:	1e0c      	subs	r4, r1, #0
 80095d4:	681d      	ldr	r5, [r3, #0]
 80095d6:	b09d      	sub	sp, #116	@ 0x74
 80095d8:	da08      	bge.n	80095ec <sniprintf+0x20>
 80095da:	238b      	movs	r3, #139	@ 0x8b
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	f04f 30ff 	mov.w	r0, #4294967295
 80095e2:	b01d      	add	sp, #116	@ 0x74
 80095e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095e8:	b002      	add	sp, #8
 80095ea:	4770      	bx	lr
 80095ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80095f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095f4:	bf14      	ite	ne
 80095f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095fa:	4623      	moveq	r3, r4
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	9307      	str	r3, [sp, #28]
 8009600:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	9006      	str	r0, [sp, #24]
 8009608:	f8ad 3016 	strh.w	r3, [sp, #22]
 800960c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800960e:	ab21      	add	r3, sp, #132	@ 0x84
 8009610:	a902      	add	r1, sp, #8
 8009612:	4628      	mov	r0, r5
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	f001 fc1d 	bl	800ae54 <_svfiprintf_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	bfbc      	itt	lt
 800961e:	238b      	movlt	r3, #139	@ 0x8b
 8009620:	602b      	strlt	r3, [r5, #0]
 8009622:	2c00      	cmp	r4, #0
 8009624:	d0dd      	beq.n	80095e2 <sniprintf+0x16>
 8009626:	9b02      	ldr	r3, [sp, #8]
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	e7d9      	b.n	80095e2 <sniprintf+0x16>
 800962e:	bf00      	nop
 8009630:	20000018 	.word	0x20000018

08009634 <siprintf>:
 8009634:	b40e      	push	{r1, r2, r3}
 8009636:	b500      	push	{lr}
 8009638:	b09c      	sub	sp, #112	@ 0x70
 800963a:	ab1d      	add	r3, sp, #116	@ 0x74
 800963c:	9002      	str	r0, [sp, #8]
 800963e:	9006      	str	r0, [sp, #24]
 8009640:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009644:	4809      	ldr	r0, [pc, #36]	@ (800966c <siprintf+0x38>)
 8009646:	9107      	str	r1, [sp, #28]
 8009648:	9104      	str	r1, [sp, #16]
 800964a:	4909      	ldr	r1, [pc, #36]	@ (8009670 <siprintf+0x3c>)
 800964c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009650:	9105      	str	r1, [sp, #20]
 8009652:	6800      	ldr	r0, [r0, #0]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	a902      	add	r1, sp, #8
 8009658:	f001 fbfc 	bl	800ae54 <_svfiprintf_r>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	b01c      	add	sp, #112	@ 0x70
 8009664:	f85d eb04 	ldr.w	lr, [sp], #4
 8009668:	b003      	add	sp, #12
 800966a:	4770      	bx	lr
 800966c:	20000018 	.word	0x20000018
 8009670:	ffff0208 	.word	0xffff0208

08009674 <__sread>:
 8009674:	b510      	push	{r4, lr}
 8009676:	460c      	mov	r4, r1
 8009678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967c:	f000 f86c 	bl	8009758 <_read_r>
 8009680:	2800      	cmp	r0, #0
 8009682:	bfab      	itete	ge
 8009684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009686:	89a3      	ldrhlt	r3, [r4, #12]
 8009688:	181b      	addge	r3, r3, r0
 800968a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800968e:	bfac      	ite	ge
 8009690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009692:	81a3      	strhlt	r3, [r4, #12]
 8009694:	bd10      	pop	{r4, pc}

08009696 <__swrite>:
 8009696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	461f      	mov	r7, r3
 800969c:	898b      	ldrh	r3, [r1, #12]
 800969e:	05db      	lsls	r3, r3, #23
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	4616      	mov	r6, r2
 80096a6:	d505      	bpl.n	80096b4 <__swrite+0x1e>
 80096a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ac:	2302      	movs	r3, #2
 80096ae:	2200      	movs	r2, #0
 80096b0:	f000 f840 	bl	8009734 <_lseek_r>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	4632      	mov	r2, r6
 80096c2:	463b      	mov	r3, r7
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ca:	f000 b857 	b.w	800977c <_write_r>

080096ce <__sseek>:
 80096ce:	b510      	push	{r4, lr}
 80096d0:	460c      	mov	r4, r1
 80096d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d6:	f000 f82d 	bl	8009734 <_lseek_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	bf15      	itete	ne
 80096e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096ea:	81a3      	strheq	r3, [r4, #12]
 80096ec:	bf18      	it	ne
 80096ee:	81a3      	strhne	r3, [r4, #12]
 80096f0:	bd10      	pop	{r4, pc}

080096f2 <__sclose>:
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f000 b80d 	b.w	8009714 <_close_r>

080096fa <memset>:
 80096fa:	4402      	add	r2, r0
 80096fc:	4603      	mov	r3, r0
 80096fe:	4293      	cmp	r3, r2
 8009700:	d100      	bne.n	8009704 <memset+0xa>
 8009702:	4770      	bx	lr
 8009704:	f803 1b01 	strb.w	r1, [r3], #1
 8009708:	e7f9      	b.n	80096fe <memset+0x4>
	...

0800970c <_localeconv_r>:
 800970c:	4800      	ldr	r0, [pc, #0]	@ (8009710 <_localeconv_r+0x4>)
 800970e:	4770      	bx	lr
 8009710:	20000158 	.word	0x20000158

08009714 <_close_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d06      	ldr	r5, [pc, #24]	@ (8009730 <_close_r+0x1c>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7fc fa10 	bl	8005b44 <_close>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_close_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_close_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20006d94 	.word	0x20006d94

08009734 <_lseek_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d07      	ldr	r5, [pc, #28]	@ (8009754 <_lseek_r+0x20>)
 8009738:	4604      	mov	r4, r0
 800973a:	4608      	mov	r0, r1
 800973c:	4611      	mov	r1, r2
 800973e:	2200      	movs	r2, #0
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7fc fa25 	bl	8005b92 <_lseek>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_lseek_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_lseek_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20006d94 	.word	0x20006d94

08009758 <_read_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	@ (8009778 <_read_r+0x20>)
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	2200      	movs	r2, #0
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7fc f9b3 	bl	8005ad2 <_read>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_read_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_read_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20006d94 	.word	0x20006d94

0800977c <_write_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	@ (800979c <_write_r+0x20>)
 8009780:	4604      	mov	r4, r0
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7fc f9be 	bl	8005b0c <_write>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_write_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_write_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20006d94 	.word	0x20006d94

080097a0 <__errno>:
 80097a0:	4b01      	ldr	r3, [pc, #4]	@ (80097a8 <__errno+0x8>)
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000018 	.word	0x20000018

080097ac <__libc_init_array>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	4d0d      	ldr	r5, [pc, #52]	@ (80097e4 <__libc_init_array+0x38>)
 80097b0:	4c0d      	ldr	r4, [pc, #52]	@ (80097e8 <__libc_init_array+0x3c>)
 80097b2:	1b64      	subs	r4, r4, r5
 80097b4:	10a4      	asrs	r4, r4, #2
 80097b6:	2600      	movs	r6, #0
 80097b8:	42a6      	cmp	r6, r4
 80097ba:	d109      	bne.n	80097d0 <__libc_init_array+0x24>
 80097bc:	4d0b      	ldr	r5, [pc, #44]	@ (80097ec <__libc_init_array+0x40>)
 80097be:	4c0c      	ldr	r4, [pc, #48]	@ (80097f0 <__libc_init_array+0x44>)
 80097c0:	f002 fd9e 	bl	800c300 <_init>
 80097c4:	1b64      	subs	r4, r4, r5
 80097c6:	10a4      	asrs	r4, r4, #2
 80097c8:	2600      	movs	r6, #0
 80097ca:	42a6      	cmp	r6, r4
 80097cc:	d105      	bne.n	80097da <__libc_init_array+0x2e>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d4:	4798      	blx	r3
 80097d6:	3601      	adds	r6, #1
 80097d8:	e7ee      	b.n	80097b8 <__libc_init_array+0xc>
 80097da:	f855 3b04 	ldr.w	r3, [r5], #4
 80097de:	4798      	blx	r3
 80097e0:	3601      	adds	r6, #1
 80097e2:	e7f2      	b.n	80097ca <__libc_init_array+0x1e>
 80097e4:	080ed738 	.word	0x080ed738
 80097e8:	080ed738 	.word	0x080ed738
 80097ec:	080ed738 	.word	0x080ed738
 80097f0:	080ed73c 	.word	0x080ed73c

080097f4 <__retarget_lock_init_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__retarget_lock_acquire_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <__retarget_lock_release_recursive>:
 80097f8:	4770      	bx	lr

080097fa <quorem>:
 80097fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fe:	6903      	ldr	r3, [r0, #16]
 8009800:	690c      	ldr	r4, [r1, #16]
 8009802:	42a3      	cmp	r3, r4
 8009804:	4607      	mov	r7, r0
 8009806:	db7e      	blt.n	8009906 <quorem+0x10c>
 8009808:	3c01      	subs	r4, #1
 800980a:	f101 0814 	add.w	r8, r1, #20
 800980e:	00a3      	lsls	r3, r4, #2
 8009810:	f100 0514 	add.w	r5, r0, #20
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009824:	3301      	adds	r3, #1
 8009826:	429a      	cmp	r2, r3
 8009828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800982c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009830:	d32e      	bcc.n	8009890 <quorem+0x96>
 8009832:	f04f 0a00 	mov.w	sl, #0
 8009836:	46c4      	mov	ip, r8
 8009838:	46ae      	mov	lr, r5
 800983a:	46d3      	mov	fp, sl
 800983c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009840:	b298      	uxth	r0, r3
 8009842:	fb06 a000 	mla	r0, r6, r0, sl
 8009846:	0c02      	lsrs	r2, r0, #16
 8009848:	0c1b      	lsrs	r3, r3, #16
 800984a:	fb06 2303 	mla	r3, r6, r3, r2
 800984e:	f8de 2000 	ldr.w	r2, [lr]
 8009852:	b280      	uxth	r0, r0
 8009854:	b292      	uxth	r2, r2
 8009856:	1a12      	subs	r2, r2, r0
 8009858:	445a      	add	r2, fp
 800985a:	f8de 0000 	ldr.w	r0, [lr]
 800985e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009862:	b29b      	uxth	r3, r3
 8009864:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009868:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800986c:	b292      	uxth	r2, r2
 800986e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009872:	45e1      	cmp	r9, ip
 8009874:	f84e 2b04 	str.w	r2, [lr], #4
 8009878:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800987c:	d2de      	bcs.n	800983c <quorem+0x42>
 800987e:	9b00      	ldr	r3, [sp, #0]
 8009880:	58eb      	ldr	r3, [r5, r3]
 8009882:	b92b      	cbnz	r3, 8009890 <quorem+0x96>
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	3b04      	subs	r3, #4
 8009888:	429d      	cmp	r5, r3
 800988a:	461a      	mov	r2, r3
 800988c:	d32f      	bcc.n	80098ee <quorem+0xf4>
 800988e:	613c      	str	r4, [r7, #16]
 8009890:	4638      	mov	r0, r7
 8009892:	f001 f97b 	bl	800ab8c <__mcmp>
 8009896:	2800      	cmp	r0, #0
 8009898:	db25      	blt.n	80098e6 <quorem+0xec>
 800989a:	4629      	mov	r1, r5
 800989c:	2000      	movs	r0, #0
 800989e:	f858 2b04 	ldr.w	r2, [r8], #4
 80098a2:	f8d1 c000 	ldr.w	ip, [r1]
 80098a6:	fa1f fe82 	uxth.w	lr, r2
 80098aa:	fa1f f38c 	uxth.w	r3, ip
 80098ae:	eba3 030e 	sub.w	r3, r3, lr
 80098b2:	4403      	add	r3, r0
 80098b4:	0c12      	lsrs	r2, r2, #16
 80098b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098be:	b29b      	uxth	r3, r3
 80098c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c4:	45c1      	cmp	r9, r8
 80098c6:	f841 3b04 	str.w	r3, [r1], #4
 80098ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098ce:	d2e6      	bcs.n	800989e <quorem+0xa4>
 80098d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098d8:	b922      	cbnz	r2, 80098e4 <quorem+0xea>
 80098da:	3b04      	subs	r3, #4
 80098dc:	429d      	cmp	r5, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	d30b      	bcc.n	80098fa <quorem+0x100>
 80098e2:	613c      	str	r4, [r7, #16]
 80098e4:	3601      	adds	r6, #1
 80098e6:	4630      	mov	r0, r6
 80098e8:	b003      	add	sp, #12
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	6812      	ldr	r2, [r2, #0]
 80098f0:	3b04      	subs	r3, #4
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	d1cb      	bne.n	800988e <quorem+0x94>
 80098f6:	3c01      	subs	r4, #1
 80098f8:	e7c6      	b.n	8009888 <quorem+0x8e>
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	3b04      	subs	r3, #4
 80098fe:	2a00      	cmp	r2, #0
 8009900:	d1ef      	bne.n	80098e2 <quorem+0xe8>
 8009902:	3c01      	subs	r4, #1
 8009904:	e7ea      	b.n	80098dc <quorem+0xe2>
 8009906:	2000      	movs	r0, #0
 8009908:	e7ee      	b.n	80098e8 <quorem+0xee>
 800990a:	0000      	movs	r0, r0
 800990c:	0000      	movs	r0, r0
	...

08009910 <_dtoa_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	69c7      	ldr	r7, [r0, #28]
 8009916:	b099      	sub	sp, #100	@ 0x64
 8009918:	ed8d 0b02 	vstr	d0, [sp, #8]
 800991c:	ec55 4b10 	vmov	r4, r5, d0
 8009920:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009922:	9109      	str	r1, [sp, #36]	@ 0x24
 8009924:	4683      	mov	fp, r0
 8009926:	920e      	str	r2, [sp, #56]	@ 0x38
 8009928:	9313      	str	r3, [sp, #76]	@ 0x4c
 800992a:	b97f      	cbnz	r7, 800994c <_dtoa_r+0x3c>
 800992c:	2010      	movs	r0, #16
 800992e:	f000 fdfd 	bl	800a52c <malloc>
 8009932:	4602      	mov	r2, r0
 8009934:	f8cb 001c 	str.w	r0, [fp, #28]
 8009938:	b920      	cbnz	r0, 8009944 <_dtoa_r+0x34>
 800993a:	4ba7      	ldr	r3, [pc, #668]	@ (8009bd8 <_dtoa_r+0x2c8>)
 800993c:	21ef      	movs	r1, #239	@ 0xef
 800993e:	48a7      	ldr	r0, [pc, #668]	@ (8009bdc <_dtoa_r+0x2cc>)
 8009940:	f001 fc68 	bl	800b214 <__assert_func>
 8009944:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009948:	6007      	str	r7, [r0, #0]
 800994a:	60c7      	str	r7, [r0, #12]
 800994c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009950:	6819      	ldr	r1, [r3, #0]
 8009952:	b159      	cbz	r1, 800996c <_dtoa_r+0x5c>
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	604a      	str	r2, [r1, #4]
 8009958:	2301      	movs	r3, #1
 800995a:	4093      	lsls	r3, r2
 800995c:	608b      	str	r3, [r1, #8]
 800995e:	4658      	mov	r0, fp
 8009960:	f000 feda 	bl	800a718 <_Bfree>
 8009964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	1e2b      	subs	r3, r5, #0
 800996e:	bfb9      	ittee	lt
 8009970:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009974:	9303      	strlt	r3, [sp, #12]
 8009976:	2300      	movge	r3, #0
 8009978:	6033      	strge	r3, [r6, #0]
 800997a:	9f03      	ldr	r7, [sp, #12]
 800997c:	4b98      	ldr	r3, [pc, #608]	@ (8009be0 <_dtoa_r+0x2d0>)
 800997e:	bfbc      	itt	lt
 8009980:	2201      	movlt	r2, #1
 8009982:	6032      	strlt	r2, [r6, #0]
 8009984:	43bb      	bics	r3, r7
 8009986:	d112      	bne.n	80099ae <_dtoa_r+0x9e>
 8009988:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800998a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009994:	4323      	orrs	r3, r4
 8009996:	f000 854d 	beq.w	800a434 <_dtoa_r+0xb24>
 800999a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800999c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009bf4 <_dtoa_r+0x2e4>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 854f 	beq.w	800a444 <_dtoa_r+0xb34>
 80099a6:	f10a 0303 	add.w	r3, sl, #3
 80099aa:	f000 bd49 	b.w	800a440 <_dtoa_r+0xb30>
 80099ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099b2:	2200      	movs	r2, #0
 80099b4:	ec51 0b17 	vmov	r0, r1, d7
 80099b8:	2300      	movs	r3, #0
 80099ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80099be:	f7fa fe4b 	bl	8004658 <__aeabi_dcmpeq>
 80099c2:	4680      	mov	r8, r0
 80099c4:	b158      	cbz	r0, 80099de <_dtoa_r+0xce>
 80099c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099c8:	2301      	movs	r3, #1
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099ce:	b113      	cbz	r3, 80099d6 <_dtoa_r+0xc6>
 80099d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80099d2:	4b84      	ldr	r3, [pc, #528]	@ (8009be4 <_dtoa_r+0x2d4>)
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009bf8 <_dtoa_r+0x2e8>
 80099da:	f000 bd33 	b.w	800a444 <_dtoa_r+0xb34>
 80099de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099e2:	aa16      	add	r2, sp, #88	@ 0x58
 80099e4:	a917      	add	r1, sp, #92	@ 0x5c
 80099e6:	4658      	mov	r0, fp
 80099e8:	f001 f980 	bl	800acec <__d2b>
 80099ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099f0:	4681      	mov	r9, r0
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	d077      	beq.n	8009ae6 <_dtoa_r+0x1d6>
 80099f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80099fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a10:	4619      	mov	r1, r3
 8009a12:	2200      	movs	r2, #0
 8009a14:	4b74      	ldr	r3, [pc, #464]	@ (8009be8 <_dtoa_r+0x2d8>)
 8009a16:	f7fa f9ff 	bl	8003e18 <__aeabi_dsub>
 8009a1a:	a369      	add	r3, pc, #420	@ (adr r3, 8009bc0 <_dtoa_r+0x2b0>)
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f7fa fbb2 	bl	8004188 <__aeabi_dmul>
 8009a24:	a368      	add	r3, pc, #416	@ (adr r3, 8009bc8 <_dtoa_r+0x2b8>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7fa f9f7 	bl	8003e1c <__adddf3>
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4630      	mov	r0, r6
 8009a32:	460d      	mov	r5, r1
 8009a34:	f7fa fb3e 	bl	80040b4 <__aeabi_i2d>
 8009a38:	a365      	add	r3, pc, #404	@ (adr r3, 8009bd0 <_dtoa_r+0x2c0>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7fa fba3 	bl	8004188 <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7fa f9e7 	bl	8003e1c <__adddf3>
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460d      	mov	r5, r1
 8009a52:	f7fa fe49 	bl	80046e8 <__aeabi_d2iz>
 8009a56:	2200      	movs	r2, #0
 8009a58:	4607      	mov	r7, r0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7fa fe04 	bl	800466c <__aeabi_dcmplt>
 8009a64:	b140      	cbz	r0, 8009a78 <_dtoa_r+0x168>
 8009a66:	4638      	mov	r0, r7
 8009a68:	f7fa fb24 	bl	80040b4 <__aeabi_i2d>
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	462b      	mov	r3, r5
 8009a70:	f7fa fdf2 	bl	8004658 <__aeabi_dcmpeq>
 8009a74:	b900      	cbnz	r0, 8009a78 <_dtoa_r+0x168>
 8009a76:	3f01      	subs	r7, #1
 8009a78:	2f16      	cmp	r7, #22
 8009a7a:	d851      	bhi.n	8009b20 <_dtoa_r+0x210>
 8009a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8009bec <_dtoa_r+0x2dc>)
 8009a7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a8a:	f7fa fdef 	bl	800466c <__aeabi_dcmplt>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d048      	beq.n	8009b24 <_dtoa_r+0x214>
 8009a92:	3f01      	subs	r7, #1
 8009a94:	2300      	movs	r3, #0
 8009a96:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a9a:	1b9b      	subs	r3, r3, r6
 8009a9c:	1e5a      	subs	r2, r3, #1
 8009a9e:	bf44      	itt	mi
 8009aa0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009aa4:	2300      	movmi	r3, #0
 8009aa6:	9208      	str	r2, [sp, #32]
 8009aa8:	bf54      	ite	pl
 8009aaa:	f04f 0800 	movpl.w	r8, #0
 8009aae:	9308      	strmi	r3, [sp, #32]
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	db39      	blt.n	8009b28 <_dtoa_r+0x218>
 8009ab4:	9b08      	ldr	r3, [sp, #32]
 8009ab6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ab8:	443b      	add	r3, r7
 8009aba:	9308      	str	r3, [sp, #32]
 8009abc:	2300      	movs	r3, #0
 8009abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d864      	bhi.n	8009b90 <_dtoa_r+0x280>
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	bfc4      	itt	gt
 8009aca:	3b04      	subgt	r3, #4
 8009acc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ad4:	bfcc      	ite	gt
 8009ad6:	2400      	movgt	r4, #0
 8009ad8:	2401      	movle	r4, #1
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d863      	bhi.n	8009ba6 <_dtoa_r+0x296>
 8009ade:	e8df f003 	tbb	[pc, r3]
 8009ae2:	372a      	.short	0x372a
 8009ae4:	5535      	.short	0x5535
 8009ae6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009aea:	441e      	add	r6, r3
 8009aec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	bfc1      	itttt	gt
 8009af4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009af8:	409f      	lslgt	r7, r3
 8009afa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009afe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b02:	bfd6      	itet	le
 8009b04:	f1c3 0320 	rsble	r3, r3, #32
 8009b08:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b0c:	fa04 f003 	lslle.w	r0, r4, r3
 8009b10:	f7fa fac0 	bl	8004094 <__aeabi_ui2d>
 8009b14:	2201      	movs	r2, #1
 8009b16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b1a:	3e01      	subs	r6, #1
 8009b1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009b1e:	e777      	b.n	8009a10 <_dtoa_r+0x100>
 8009b20:	2301      	movs	r3, #1
 8009b22:	e7b8      	b.n	8009a96 <_dtoa_r+0x186>
 8009b24:	9012      	str	r0, [sp, #72]	@ 0x48
 8009b26:	e7b7      	b.n	8009a98 <_dtoa_r+0x188>
 8009b28:	427b      	negs	r3, r7
 8009b2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	eba8 0807 	sub.w	r8, r8, r7
 8009b32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b34:	e7c4      	b.n	8009ac0 <_dtoa_r+0x1b0>
 8009b36:	2300      	movs	r3, #0
 8009b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dc35      	bgt.n	8009bac <_dtoa_r+0x29c>
 8009b40:	2301      	movs	r3, #1
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	9307      	str	r3, [sp, #28]
 8009b46:	461a      	mov	r2, r3
 8009b48:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b4a:	e00b      	b.n	8009b64 <_dtoa_r+0x254>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e7f3      	b.n	8009b38 <_dtoa_r+0x228>
 8009b50:	2300      	movs	r3, #0
 8009b52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b56:	18fb      	adds	r3, r7, r3
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	bfb8      	it	lt
 8009b62:	2301      	movlt	r3, #1
 8009b64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	2204      	movs	r2, #4
 8009b6c:	f102 0514 	add.w	r5, r2, #20
 8009b70:	429d      	cmp	r5, r3
 8009b72:	d91f      	bls.n	8009bb4 <_dtoa_r+0x2a4>
 8009b74:	6041      	str	r1, [r0, #4]
 8009b76:	4658      	mov	r0, fp
 8009b78:	f000 fd8e 	bl	800a698 <_Balloc>
 8009b7c:	4682      	mov	sl, r0
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d13c      	bne.n	8009bfc <_dtoa_r+0x2ec>
 8009b82:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf0 <_dtoa_r+0x2e0>)
 8009b84:	4602      	mov	r2, r0
 8009b86:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b8a:	e6d8      	b.n	800993e <_dtoa_r+0x2e>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e7e0      	b.n	8009b52 <_dtoa_r+0x242>
 8009b90:	2401      	movs	r4, #1
 8009b92:	2300      	movs	r3, #0
 8009b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2312      	movs	r3, #18
 8009ba4:	e7d0      	b.n	8009b48 <_dtoa_r+0x238>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009baa:	e7f5      	b.n	8009b98 <_dtoa_r+0x288>
 8009bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	e7d7      	b.n	8009b64 <_dtoa_r+0x254>
 8009bb4:	3101      	adds	r1, #1
 8009bb6:	0052      	lsls	r2, r2, #1
 8009bb8:	e7d8      	b.n	8009b6c <_dtoa_r+0x25c>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	636f4361 	.word	0x636f4361
 8009bc4:	3fd287a7 	.word	0x3fd287a7
 8009bc8:	8b60c8b3 	.word	0x8b60c8b3
 8009bcc:	3fc68a28 	.word	0x3fc68a28
 8009bd0:	509f79fb 	.word	0x509f79fb
 8009bd4:	3fd34413 	.word	0x3fd34413
 8009bd8:	080ed02d 	.word	0x080ed02d
 8009bdc:	080ed044 	.word	0x080ed044
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	080ecffd 	.word	0x080ecffd
 8009be8:	3ff80000 	.word	0x3ff80000
 8009bec:	080ed140 	.word	0x080ed140
 8009bf0:	080ed09c 	.word	0x080ed09c
 8009bf4:	080ed029 	.word	0x080ed029
 8009bf8:	080ecffc 	.word	0x080ecffc
 8009bfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c00:	6018      	str	r0, [r3, #0]
 8009c02:	9b07      	ldr	r3, [sp, #28]
 8009c04:	2b0e      	cmp	r3, #14
 8009c06:	f200 80a4 	bhi.w	8009d52 <_dtoa_r+0x442>
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	f000 80a1 	beq.w	8009d52 <_dtoa_r+0x442>
 8009c10:	2f00      	cmp	r7, #0
 8009c12:	dd33      	ble.n	8009c7c <_dtoa_r+0x36c>
 8009c14:	4bad      	ldr	r3, [pc, #692]	@ (8009ecc <_dtoa_r+0x5bc>)
 8009c16:	f007 020f 	and.w	r2, r7, #15
 8009c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c1e:	ed93 7b00 	vldr	d7, [r3]
 8009c22:	05f8      	lsls	r0, r7, #23
 8009c24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009c28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c2c:	d516      	bpl.n	8009c5c <_dtoa_r+0x34c>
 8009c2e:	4ba8      	ldr	r3, [pc, #672]	@ (8009ed0 <_dtoa_r+0x5c0>)
 8009c30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c38:	f7fa fbd0 	bl	80043dc <__aeabi_ddiv>
 8009c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c40:	f004 040f 	and.w	r4, r4, #15
 8009c44:	2603      	movs	r6, #3
 8009c46:	4da2      	ldr	r5, [pc, #648]	@ (8009ed0 <_dtoa_r+0x5c0>)
 8009c48:	b954      	cbnz	r4, 8009c60 <_dtoa_r+0x350>
 8009c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c52:	f7fa fbc3 	bl	80043dc <__aeabi_ddiv>
 8009c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c5a:	e028      	b.n	8009cae <_dtoa_r+0x39e>
 8009c5c:	2602      	movs	r6, #2
 8009c5e:	e7f2      	b.n	8009c46 <_dtoa_r+0x336>
 8009c60:	07e1      	lsls	r1, r4, #31
 8009c62:	d508      	bpl.n	8009c76 <_dtoa_r+0x366>
 8009c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c6c:	f7fa fa8c 	bl	8004188 <__aeabi_dmul>
 8009c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c74:	3601      	adds	r6, #1
 8009c76:	1064      	asrs	r4, r4, #1
 8009c78:	3508      	adds	r5, #8
 8009c7a:	e7e5      	b.n	8009c48 <_dtoa_r+0x338>
 8009c7c:	f000 80d2 	beq.w	8009e24 <_dtoa_r+0x514>
 8009c80:	427c      	negs	r4, r7
 8009c82:	4b92      	ldr	r3, [pc, #584]	@ (8009ecc <_dtoa_r+0x5bc>)
 8009c84:	4d92      	ldr	r5, [pc, #584]	@ (8009ed0 <_dtoa_r+0x5c0>)
 8009c86:	f004 020f 	and.w	r2, r4, #15
 8009c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c96:	f7fa fa77 	bl	8004188 <__aeabi_dmul>
 8009c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c9e:	1124      	asrs	r4, r4, #4
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	2602      	movs	r6, #2
 8009ca4:	2c00      	cmp	r4, #0
 8009ca6:	f040 80b2 	bne.w	8009e0e <_dtoa_r+0x4fe>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1d3      	bne.n	8009c56 <_dtoa_r+0x346>
 8009cae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 80b7 	beq.w	8009e28 <_dtoa_r+0x518>
 8009cba:	4b86      	ldr	r3, [pc, #536]	@ (8009ed4 <_dtoa_r+0x5c4>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7fa fcd3 	bl	800466c <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f000 80ae 	beq.w	8009e28 <_dtoa_r+0x518>
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80aa 	beq.w	8009e28 <_dtoa_r+0x518>
 8009cd4:	9b00      	ldr	r3, [sp, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	dd37      	ble.n	8009d4a <_dtoa_r+0x43a>
 8009cda:	1e7b      	subs	r3, r7, #1
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4b7d      	ldr	r3, [pc, #500]	@ (8009ed8 <_dtoa_r+0x5c8>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	f7fa fa4f 	bl	8004188 <__aeabi_dmul>
 8009cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cee:	9c00      	ldr	r4, [sp, #0]
 8009cf0:	3601      	adds	r6, #1
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7fa f9de 	bl	80040b4 <__aeabi_i2d>
 8009cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cfc:	f7fa fa44 	bl	8004188 <__aeabi_dmul>
 8009d00:	4b76      	ldr	r3, [pc, #472]	@ (8009edc <_dtoa_r+0x5cc>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7fa f88a 	bl	8003e1c <__adddf3>
 8009d08:	4605      	mov	r5, r0
 8009d0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	f040 808d 	bne.w	8009e2e <_dtoa_r+0x51e>
 8009d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d18:	4b71      	ldr	r3, [pc, #452]	@ (8009ee0 <_dtoa_r+0x5d0>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f7fa f87c 	bl	8003e18 <__aeabi_dsub>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d28:	462a      	mov	r2, r5
 8009d2a:	4633      	mov	r3, r6
 8009d2c:	f7fa fcbc 	bl	80046a8 <__aeabi_dcmpgt>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	f040 828b 	bne.w	800a24c <_dtoa_r+0x93c>
 8009d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d40:	f7fa fc94 	bl	800466c <__aeabi_dcmplt>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f040 8128 	bne.w	8009f9a <_dtoa_r+0x68a>
 8009d4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f2c0 815a 	blt.w	800a00e <_dtoa_r+0x6fe>
 8009d5a:	2f0e      	cmp	r7, #14
 8009d5c:	f300 8157 	bgt.w	800a00e <_dtoa_r+0x6fe>
 8009d60:	4b5a      	ldr	r3, [pc, #360]	@ (8009ecc <_dtoa_r+0x5bc>)
 8009d62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d66:	ed93 7b00 	vldr	d7, [r3]
 8009d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	ed8d 7b00 	vstr	d7, [sp]
 8009d72:	da03      	bge.n	8009d7c <_dtoa_r+0x46c>
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f340 8101 	ble.w	8009f7e <_dtoa_r+0x66e>
 8009d7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d80:	4656      	mov	r6, sl
 8009d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7fa fb27 	bl	80043dc <__aeabi_ddiv>
 8009d8e:	f7fa fcab 	bl	80046e8 <__aeabi_d2iz>
 8009d92:	4680      	mov	r8, r0
 8009d94:	f7fa f98e 	bl	80040b4 <__aeabi_i2d>
 8009d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d9c:	f7fa f9f4 	bl	8004188 <__aeabi_dmul>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009dac:	f7fa f834 	bl	8003e18 <__aeabi_dsub>
 8009db0:	f806 4b01 	strb.w	r4, [r6], #1
 8009db4:	9d07      	ldr	r5, [sp, #28]
 8009db6:	eba6 040a 	sub.w	r4, r6, sl
 8009dba:	42a5      	cmp	r5, r4
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	f040 8117 	bne.w	8009ff2 <_dtoa_r+0x6e2>
 8009dc4:	f7fa f82a 	bl	8003e1c <__adddf3>
 8009dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	f7fa fc6a 	bl	80046a8 <__aeabi_dcmpgt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f040 80f9 	bne.w	8009fcc <_dtoa_r+0x6bc>
 8009dda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dde:	4620      	mov	r0, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	f7fa fc39 	bl	8004658 <__aeabi_dcmpeq>
 8009de6:	b118      	cbz	r0, 8009df0 <_dtoa_r+0x4e0>
 8009de8:	f018 0f01 	tst.w	r8, #1
 8009dec:	f040 80ee 	bne.w	8009fcc <_dtoa_r+0x6bc>
 8009df0:	4649      	mov	r1, r9
 8009df2:	4658      	mov	r0, fp
 8009df4:	f000 fc90 	bl	800a718 <_Bfree>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	7033      	strb	r3, [r6, #0]
 8009dfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dfe:	3701      	adds	r7, #1
 8009e00:	601f      	str	r7, [r3, #0]
 8009e02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 831d 	beq.w	800a444 <_dtoa_r+0xb34>
 8009e0a:	601e      	str	r6, [r3, #0]
 8009e0c:	e31a      	b.n	800a444 <_dtoa_r+0xb34>
 8009e0e:	07e2      	lsls	r2, r4, #31
 8009e10:	d505      	bpl.n	8009e1e <_dtoa_r+0x50e>
 8009e12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e16:	f7fa f9b7 	bl	8004188 <__aeabi_dmul>
 8009e1a:	3601      	adds	r6, #1
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	1064      	asrs	r4, r4, #1
 8009e20:	3508      	adds	r5, #8
 8009e22:	e73f      	b.n	8009ca4 <_dtoa_r+0x394>
 8009e24:	2602      	movs	r6, #2
 8009e26:	e742      	b.n	8009cae <_dtoa_r+0x39e>
 8009e28:	9c07      	ldr	r4, [sp, #28]
 8009e2a:	9704      	str	r7, [sp, #16]
 8009e2c:	e761      	b.n	8009cf2 <_dtoa_r+0x3e2>
 8009e2e:	4b27      	ldr	r3, [pc, #156]	@ (8009ecc <_dtoa_r+0x5bc>)
 8009e30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e3a:	4454      	add	r4, sl
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d053      	beq.n	8009ee8 <_dtoa_r+0x5d8>
 8009e40:	4928      	ldr	r1, [pc, #160]	@ (8009ee4 <_dtoa_r+0x5d4>)
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7fa faca 	bl	80043dc <__aeabi_ddiv>
 8009e48:	4633      	mov	r3, r6
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	f7f9 ffe4 	bl	8003e18 <__aeabi_dsub>
 8009e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e54:	4656      	mov	r6, sl
 8009e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e5a:	f7fa fc45 	bl	80046e8 <__aeabi_d2iz>
 8009e5e:	4605      	mov	r5, r0
 8009e60:	f7fa f928 	bl	80040b4 <__aeabi_i2d>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e6c:	f7f9 ffd4 	bl	8003e18 <__aeabi_dsub>
 8009e70:	3530      	adds	r5, #48	@ 0x30
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e7a:	f806 5b01 	strb.w	r5, [r6], #1
 8009e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e82:	f7fa fbf3 	bl	800466c <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d171      	bne.n	8009f6e <_dtoa_r+0x65e>
 8009e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e8e:	4911      	ldr	r1, [pc, #68]	@ (8009ed4 <_dtoa_r+0x5c4>)
 8009e90:	2000      	movs	r0, #0
 8009e92:	f7f9 ffc1 	bl	8003e18 <__aeabi_dsub>
 8009e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e9a:	f7fa fbe7 	bl	800466c <__aeabi_dcmplt>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f040 8095 	bne.w	8009fce <_dtoa_r+0x6be>
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	f43f af50 	beq.w	8009d4a <_dtoa_r+0x43a>
 8009eaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009eae:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed8 <_dtoa_r+0x5c8>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f7fa f969 	bl	8004188 <__aeabi_dmul>
 8009eb6:	4b08      	ldr	r3, [pc, #32]	@ (8009ed8 <_dtoa_r+0x5c8>)
 8009eb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ec2:	f7fa f961 	bl	8004188 <__aeabi_dmul>
 8009ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eca:	e7c4      	b.n	8009e56 <_dtoa_r+0x546>
 8009ecc:	080ed140 	.word	0x080ed140
 8009ed0:	080ed118 	.word	0x080ed118
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	40240000 	.word	0x40240000
 8009edc:	401c0000 	.word	0x401c0000
 8009ee0:	40140000 	.word	0x40140000
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	f7fa f94c 	bl	8004188 <__aeabi_dmul>
 8009ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ef4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009ef6:	4656      	mov	r6, sl
 8009ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efc:	f7fa fbf4 	bl	80046e8 <__aeabi_d2iz>
 8009f00:	4605      	mov	r5, r0
 8009f02:	f7fa f8d7 	bl	80040b4 <__aeabi_i2d>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0e:	f7f9 ff83 	bl	8003e18 <__aeabi_dsub>
 8009f12:	3530      	adds	r5, #48	@ 0x30
 8009f14:	f806 5b01 	strb.w	r5, [r6], #1
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	42a6      	cmp	r6, r4
 8009f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	d124      	bne.n	8009f72 <_dtoa_r+0x662>
 8009f28:	4bac      	ldr	r3, [pc, #688]	@ (800a1dc <_dtoa_r+0x8cc>)
 8009f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f2e:	f7f9 ff75 	bl	8003e1c <__adddf3>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f3a:	f7fa fbb5 	bl	80046a8 <__aeabi_dcmpgt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d145      	bne.n	8009fce <_dtoa_r+0x6be>
 8009f42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f46:	49a5      	ldr	r1, [pc, #660]	@ (800a1dc <_dtoa_r+0x8cc>)
 8009f48:	2000      	movs	r0, #0
 8009f4a:	f7f9 ff65 	bl	8003e18 <__aeabi_dsub>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f56:	f7fa fb89 	bl	800466c <__aeabi_dcmplt>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f43f aef5 	beq.w	8009d4a <_dtoa_r+0x43a>
 8009f60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009f62:	1e73      	subs	r3, r6, #1
 8009f64:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f6a:	2b30      	cmp	r3, #48	@ 0x30
 8009f6c:	d0f8      	beq.n	8009f60 <_dtoa_r+0x650>
 8009f6e:	9f04      	ldr	r7, [sp, #16]
 8009f70:	e73e      	b.n	8009df0 <_dtoa_r+0x4e0>
 8009f72:	4b9b      	ldr	r3, [pc, #620]	@ (800a1e0 <_dtoa_r+0x8d0>)
 8009f74:	f7fa f908 	bl	8004188 <__aeabi_dmul>
 8009f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f7c:	e7bc      	b.n	8009ef8 <_dtoa_r+0x5e8>
 8009f7e:	d10c      	bne.n	8009f9a <_dtoa_r+0x68a>
 8009f80:	4b98      	ldr	r3, [pc, #608]	@ (800a1e4 <_dtoa_r+0x8d4>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f88:	f7fa f8fe 	bl	8004188 <__aeabi_dmul>
 8009f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f90:	f7fa fb80 	bl	8004694 <__aeabi_dcmpge>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f000 8157 	beq.w	800a248 <_dtoa_r+0x938>
 8009f9a:	2400      	movs	r4, #0
 8009f9c:	4625      	mov	r5, r4
 8009f9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	4656      	mov	r6, sl
 8009fa6:	2700      	movs	r7, #0
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4658      	mov	r0, fp
 8009fac:	f000 fbb4 	bl	800a718 <_Bfree>
 8009fb0:	2d00      	cmp	r5, #0
 8009fb2:	d0dc      	beq.n	8009f6e <_dtoa_r+0x65e>
 8009fb4:	b12f      	cbz	r7, 8009fc2 <_dtoa_r+0x6b2>
 8009fb6:	42af      	cmp	r7, r5
 8009fb8:	d003      	beq.n	8009fc2 <_dtoa_r+0x6b2>
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4658      	mov	r0, fp
 8009fbe:	f000 fbab 	bl	800a718 <_Bfree>
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4658      	mov	r0, fp
 8009fc6:	f000 fba7 	bl	800a718 <_Bfree>
 8009fca:	e7d0      	b.n	8009f6e <_dtoa_r+0x65e>
 8009fcc:	9704      	str	r7, [sp, #16]
 8009fce:	4633      	mov	r3, r6
 8009fd0:	461e      	mov	r6, r3
 8009fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fd6:	2a39      	cmp	r2, #57	@ 0x39
 8009fd8:	d107      	bne.n	8009fea <_dtoa_r+0x6da>
 8009fda:	459a      	cmp	sl, r3
 8009fdc:	d1f8      	bne.n	8009fd0 <_dtoa_r+0x6c0>
 8009fde:	9a04      	ldr	r2, [sp, #16]
 8009fe0:	3201      	adds	r2, #1
 8009fe2:	9204      	str	r2, [sp, #16]
 8009fe4:	2230      	movs	r2, #48	@ 0x30
 8009fe6:	f88a 2000 	strb.w	r2, [sl]
 8009fea:	781a      	ldrb	r2, [r3, #0]
 8009fec:	3201      	adds	r2, #1
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	e7bd      	b.n	8009f6e <_dtoa_r+0x65e>
 8009ff2:	4b7b      	ldr	r3, [pc, #492]	@ (800a1e0 <_dtoa_r+0x8d0>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f7fa f8c7 	bl	8004188 <__aeabi_dmul>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	460d      	mov	r5, r1
 800a002:	f7fa fb29 	bl	8004658 <__aeabi_dcmpeq>
 800a006:	2800      	cmp	r0, #0
 800a008:	f43f aebb 	beq.w	8009d82 <_dtoa_r+0x472>
 800a00c:	e6f0      	b.n	8009df0 <_dtoa_r+0x4e0>
 800a00e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a010:	2a00      	cmp	r2, #0
 800a012:	f000 80db 	beq.w	800a1cc <_dtoa_r+0x8bc>
 800a016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a018:	2a01      	cmp	r2, #1
 800a01a:	f300 80bf 	bgt.w	800a19c <_dtoa_r+0x88c>
 800a01e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a020:	2a00      	cmp	r2, #0
 800a022:	f000 80b7 	beq.w	800a194 <_dtoa_r+0x884>
 800a026:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a02a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a02c:	4646      	mov	r6, r8
 800a02e:	9a08      	ldr	r2, [sp, #32]
 800a030:	2101      	movs	r1, #1
 800a032:	441a      	add	r2, r3
 800a034:	4658      	mov	r0, fp
 800a036:	4498      	add	r8, r3
 800a038:	9208      	str	r2, [sp, #32]
 800a03a:	f000 fc21 	bl	800a880 <__i2b>
 800a03e:	4605      	mov	r5, r0
 800a040:	b15e      	cbz	r6, 800a05a <_dtoa_r+0x74a>
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	2b00      	cmp	r3, #0
 800a046:	dd08      	ble.n	800a05a <_dtoa_r+0x74a>
 800a048:	42b3      	cmp	r3, r6
 800a04a:	9a08      	ldr	r2, [sp, #32]
 800a04c:	bfa8      	it	ge
 800a04e:	4633      	movge	r3, r6
 800a050:	eba8 0803 	sub.w	r8, r8, r3
 800a054:	1af6      	subs	r6, r6, r3
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	9308      	str	r3, [sp, #32]
 800a05a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a05c:	b1f3      	cbz	r3, 800a09c <_dtoa_r+0x78c>
 800a05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 80b7 	beq.w	800a1d4 <_dtoa_r+0x8c4>
 800a066:	b18c      	cbz	r4, 800a08c <_dtoa_r+0x77c>
 800a068:	4629      	mov	r1, r5
 800a06a:	4622      	mov	r2, r4
 800a06c:	4658      	mov	r0, fp
 800a06e:	f000 fcc7 	bl	800aa00 <__pow5mult>
 800a072:	464a      	mov	r2, r9
 800a074:	4601      	mov	r1, r0
 800a076:	4605      	mov	r5, r0
 800a078:	4658      	mov	r0, fp
 800a07a:	f000 fc17 	bl	800a8ac <__multiply>
 800a07e:	4649      	mov	r1, r9
 800a080:	9004      	str	r0, [sp, #16]
 800a082:	4658      	mov	r0, fp
 800a084:	f000 fb48 	bl	800a718 <_Bfree>
 800a088:	9b04      	ldr	r3, [sp, #16]
 800a08a:	4699      	mov	r9, r3
 800a08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a08e:	1b1a      	subs	r2, r3, r4
 800a090:	d004      	beq.n	800a09c <_dtoa_r+0x78c>
 800a092:	4649      	mov	r1, r9
 800a094:	4658      	mov	r0, fp
 800a096:	f000 fcb3 	bl	800aa00 <__pow5mult>
 800a09a:	4681      	mov	r9, r0
 800a09c:	2101      	movs	r1, #1
 800a09e:	4658      	mov	r0, fp
 800a0a0:	f000 fbee 	bl	800a880 <__i2b>
 800a0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 81cf 	beq.w	800a44c <_dtoa_r+0xb3c>
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	4658      	mov	r0, fp
 800a0b4:	f000 fca4 	bl	800aa00 <__pow5mult>
 800a0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	4604      	mov	r4, r0
 800a0be:	f300 8095 	bgt.w	800a1ec <_dtoa_r+0x8dc>
 800a0c2:	9b02      	ldr	r3, [sp, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f040 8087 	bne.w	800a1d8 <_dtoa_r+0x8c8>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f040 8089 	bne.w	800a1e8 <_dtoa_r+0x8d8>
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0dc:	0d1b      	lsrs	r3, r3, #20
 800a0de:	051b      	lsls	r3, r3, #20
 800a0e0:	b12b      	cbz	r3, 800a0ee <_dtoa_r+0x7de>
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	9308      	str	r3, [sp, #32]
 800a0e8:	f108 0801 	add.w	r8, r8, #1
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 81b0 	beq.w	800a458 <_dtoa_r+0xb48>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0fe:	6918      	ldr	r0, [r3, #16]
 800a100:	f000 fb72 	bl	800a7e8 <__hi0bits>
 800a104:	f1c0 0020 	rsb	r0, r0, #32
 800a108:	9b08      	ldr	r3, [sp, #32]
 800a10a:	4418      	add	r0, r3
 800a10c:	f010 001f 	ands.w	r0, r0, #31
 800a110:	d077      	beq.n	800a202 <_dtoa_r+0x8f2>
 800a112:	f1c0 0320 	rsb	r3, r0, #32
 800a116:	2b04      	cmp	r3, #4
 800a118:	dd6b      	ble.n	800a1f2 <_dtoa_r+0x8e2>
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	f1c0 001c 	rsb	r0, r0, #28
 800a120:	4403      	add	r3, r0
 800a122:	4480      	add	r8, r0
 800a124:	4406      	add	r6, r0
 800a126:	9308      	str	r3, [sp, #32]
 800a128:	f1b8 0f00 	cmp.w	r8, #0
 800a12c:	dd05      	ble.n	800a13a <_dtoa_r+0x82a>
 800a12e:	4649      	mov	r1, r9
 800a130:	4642      	mov	r2, r8
 800a132:	4658      	mov	r0, fp
 800a134:	f000 fcbe 	bl	800aab4 <__lshift>
 800a138:	4681      	mov	r9, r0
 800a13a:	9b08      	ldr	r3, [sp, #32]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dd05      	ble.n	800a14c <_dtoa_r+0x83c>
 800a140:	4621      	mov	r1, r4
 800a142:	461a      	mov	r2, r3
 800a144:	4658      	mov	r0, fp
 800a146:	f000 fcb5 	bl	800aab4 <__lshift>
 800a14a:	4604      	mov	r4, r0
 800a14c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d059      	beq.n	800a206 <_dtoa_r+0x8f6>
 800a152:	4621      	mov	r1, r4
 800a154:	4648      	mov	r0, r9
 800a156:	f000 fd19 	bl	800ab8c <__mcmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	da53      	bge.n	800a206 <_dtoa_r+0x8f6>
 800a15e:	1e7b      	subs	r3, r7, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	4649      	mov	r1, r9
 800a164:	2300      	movs	r3, #0
 800a166:	220a      	movs	r2, #10
 800a168:	4658      	mov	r0, fp
 800a16a:	f000 faf7 	bl	800a75c <__multadd>
 800a16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a170:	4681      	mov	r9, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 8172 	beq.w	800a45c <_dtoa_r+0xb4c>
 800a178:	2300      	movs	r3, #0
 800a17a:	4629      	mov	r1, r5
 800a17c:	220a      	movs	r2, #10
 800a17e:	4658      	mov	r0, fp
 800a180:	f000 faec 	bl	800a75c <__multadd>
 800a184:	9b00      	ldr	r3, [sp, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	4605      	mov	r5, r0
 800a18a:	dc67      	bgt.n	800a25c <_dtoa_r+0x94c>
 800a18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18e:	2b02      	cmp	r3, #2
 800a190:	dc41      	bgt.n	800a216 <_dtoa_r+0x906>
 800a192:	e063      	b.n	800a25c <_dtoa_r+0x94c>
 800a194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a19a:	e746      	b.n	800a02a <_dtoa_r+0x71a>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	1e5c      	subs	r4, r3, #1
 800a1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	bfbf      	itttt	lt
 800a1a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a1aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1ac:	1ae3      	sublt	r3, r4, r3
 800a1ae:	bfb4      	ite	lt
 800a1b0:	18d2      	addlt	r2, r2, r3
 800a1b2:	1b1c      	subge	r4, r3, r4
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	bfbc      	itt	lt
 800a1b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a1ba:	2400      	movlt	r4, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bfb5      	itete	lt
 800a1c0:	eba8 0603 	sublt.w	r6, r8, r3
 800a1c4:	9b07      	ldrge	r3, [sp, #28]
 800a1c6:	2300      	movlt	r3, #0
 800a1c8:	4646      	movge	r6, r8
 800a1ca:	e730      	b.n	800a02e <_dtoa_r+0x71e>
 800a1cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a1d0:	4646      	mov	r6, r8
 800a1d2:	e735      	b.n	800a040 <_dtoa_r+0x730>
 800a1d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1d6:	e75c      	b.n	800a092 <_dtoa_r+0x782>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	e788      	b.n	800a0ee <_dtoa_r+0x7de>
 800a1dc:	3fe00000 	.word	0x3fe00000
 800a1e0:	40240000 	.word	0x40240000
 800a1e4:	40140000 	.word	0x40140000
 800a1e8:	9b02      	ldr	r3, [sp, #8]
 800a1ea:	e780      	b.n	800a0ee <_dtoa_r+0x7de>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f0:	e782      	b.n	800a0f8 <_dtoa_r+0x7e8>
 800a1f2:	d099      	beq.n	800a128 <_dtoa_r+0x818>
 800a1f4:	9a08      	ldr	r2, [sp, #32]
 800a1f6:	331c      	adds	r3, #28
 800a1f8:	441a      	add	r2, r3
 800a1fa:	4498      	add	r8, r3
 800a1fc:	441e      	add	r6, r3
 800a1fe:	9208      	str	r2, [sp, #32]
 800a200:	e792      	b.n	800a128 <_dtoa_r+0x818>
 800a202:	4603      	mov	r3, r0
 800a204:	e7f6      	b.n	800a1f4 <_dtoa_r+0x8e4>
 800a206:	9b07      	ldr	r3, [sp, #28]
 800a208:	9704      	str	r7, [sp, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	dc20      	bgt.n	800a250 <_dtoa_r+0x940>
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a212:	2b02      	cmp	r3, #2
 800a214:	dd1e      	ble.n	800a254 <_dtoa_r+0x944>
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f47f aec0 	bne.w	8009f9e <_dtoa_r+0x68e>
 800a21e:	4621      	mov	r1, r4
 800a220:	2205      	movs	r2, #5
 800a222:	4658      	mov	r0, fp
 800a224:	f000 fa9a 	bl	800a75c <__multadd>
 800a228:	4601      	mov	r1, r0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4648      	mov	r0, r9
 800a22e:	f000 fcad 	bl	800ab8c <__mcmp>
 800a232:	2800      	cmp	r0, #0
 800a234:	f77f aeb3 	ble.w	8009f9e <_dtoa_r+0x68e>
 800a238:	4656      	mov	r6, sl
 800a23a:	2331      	movs	r3, #49	@ 0x31
 800a23c:	f806 3b01 	strb.w	r3, [r6], #1
 800a240:	9b04      	ldr	r3, [sp, #16]
 800a242:	3301      	adds	r3, #1
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	e6ae      	b.n	8009fa6 <_dtoa_r+0x696>
 800a248:	9c07      	ldr	r4, [sp, #28]
 800a24a:	9704      	str	r7, [sp, #16]
 800a24c:	4625      	mov	r5, r4
 800a24e:	e7f3      	b.n	800a238 <_dtoa_r+0x928>
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8104 	beq.w	800a464 <_dtoa_r+0xb54>
 800a25c:	2e00      	cmp	r6, #0
 800a25e:	dd05      	ble.n	800a26c <_dtoa_r+0x95c>
 800a260:	4629      	mov	r1, r5
 800a262:	4632      	mov	r2, r6
 800a264:	4658      	mov	r0, fp
 800a266:	f000 fc25 	bl	800aab4 <__lshift>
 800a26a:	4605      	mov	r5, r0
 800a26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d05a      	beq.n	800a328 <_dtoa_r+0xa18>
 800a272:	6869      	ldr	r1, [r5, #4]
 800a274:	4658      	mov	r0, fp
 800a276:	f000 fa0f 	bl	800a698 <_Balloc>
 800a27a:	4606      	mov	r6, r0
 800a27c:	b928      	cbnz	r0, 800a28a <_dtoa_r+0x97a>
 800a27e:	4b84      	ldr	r3, [pc, #528]	@ (800a490 <_dtoa_r+0xb80>)
 800a280:	4602      	mov	r2, r0
 800a282:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a286:	f7ff bb5a 	b.w	800993e <_dtoa_r+0x2e>
 800a28a:	692a      	ldr	r2, [r5, #16]
 800a28c:	3202      	adds	r2, #2
 800a28e:	0092      	lsls	r2, r2, #2
 800a290:	f105 010c 	add.w	r1, r5, #12
 800a294:	300c      	adds	r0, #12
 800a296:	f000 ffaf 	bl	800b1f8 <memcpy>
 800a29a:	2201      	movs	r2, #1
 800a29c:	4631      	mov	r1, r6
 800a29e:	4658      	mov	r0, fp
 800a2a0:	f000 fc08 	bl	800aab4 <__lshift>
 800a2a4:	f10a 0301 	add.w	r3, sl, #1
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	9b00      	ldr	r3, [sp, #0]
 800a2ac:	4453      	add	r3, sl
 800a2ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2b0:	9b02      	ldr	r3, [sp, #8]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	462f      	mov	r7, r5
 800a2b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	4621      	mov	r1, r4
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	4648      	mov	r0, r9
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	f7ff fa98 	bl	80097fa <quorem>
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	9002      	str	r0, [sp, #8]
 800a2ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2d2:	4648      	mov	r0, r9
 800a2d4:	f000 fc5a 	bl	800ab8c <__mcmp>
 800a2d8:	462a      	mov	r2, r5
 800a2da:	9008      	str	r0, [sp, #32]
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4658      	mov	r0, fp
 800a2e0:	f000 fc70 	bl	800abc4 <__mdiff>
 800a2e4:	68c2      	ldr	r2, [r0, #12]
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	bb02      	cbnz	r2, 800a32c <_dtoa_r+0xa1c>
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	4648      	mov	r0, r9
 800a2ee:	f000 fc4d 	bl	800ab8c <__mcmp>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4658      	mov	r0, fp
 800a2f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2fa:	f000 fa0d 	bl	800a718 <_Bfree>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a302:	9e07      	ldr	r6, [sp, #28]
 800a304:	ea43 0102 	orr.w	r1, r3, r2
 800a308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30a:	4319      	orrs	r1, r3
 800a30c:	d110      	bne.n	800a330 <_dtoa_r+0xa20>
 800a30e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a312:	d029      	beq.n	800a368 <_dtoa_r+0xa58>
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	2b00      	cmp	r3, #0
 800a318:	dd02      	ble.n	800a320 <_dtoa_r+0xa10>
 800a31a:	9b02      	ldr	r3, [sp, #8]
 800a31c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a320:	9b00      	ldr	r3, [sp, #0]
 800a322:	f883 8000 	strb.w	r8, [r3]
 800a326:	e63f      	b.n	8009fa8 <_dtoa_r+0x698>
 800a328:	4628      	mov	r0, r5
 800a32a:	e7bb      	b.n	800a2a4 <_dtoa_r+0x994>
 800a32c:	2201      	movs	r2, #1
 800a32e:	e7e1      	b.n	800a2f4 <_dtoa_r+0x9e4>
 800a330:	9b08      	ldr	r3, [sp, #32]
 800a332:	2b00      	cmp	r3, #0
 800a334:	db04      	blt.n	800a340 <_dtoa_r+0xa30>
 800a336:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a338:	430b      	orrs	r3, r1
 800a33a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a33c:	430b      	orrs	r3, r1
 800a33e:	d120      	bne.n	800a382 <_dtoa_r+0xa72>
 800a340:	2a00      	cmp	r2, #0
 800a342:	dded      	ble.n	800a320 <_dtoa_r+0xa10>
 800a344:	4649      	mov	r1, r9
 800a346:	2201      	movs	r2, #1
 800a348:	4658      	mov	r0, fp
 800a34a:	f000 fbb3 	bl	800aab4 <__lshift>
 800a34e:	4621      	mov	r1, r4
 800a350:	4681      	mov	r9, r0
 800a352:	f000 fc1b 	bl	800ab8c <__mcmp>
 800a356:	2800      	cmp	r0, #0
 800a358:	dc03      	bgt.n	800a362 <_dtoa_r+0xa52>
 800a35a:	d1e1      	bne.n	800a320 <_dtoa_r+0xa10>
 800a35c:	f018 0f01 	tst.w	r8, #1
 800a360:	d0de      	beq.n	800a320 <_dtoa_r+0xa10>
 800a362:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a366:	d1d8      	bne.n	800a31a <_dtoa_r+0xa0a>
 800a368:	9a00      	ldr	r2, [sp, #0]
 800a36a:	2339      	movs	r3, #57	@ 0x39
 800a36c:	7013      	strb	r3, [r2, #0]
 800a36e:	4633      	mov	r3, r6
 800a370:	461e      	mov	r6, r3
 800a372:	3b01      	subs	r3, #1
 800a374:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a378:	2a39      	cmp	r2, #57	@ 0x39
 800a37a:	d052      	beq.n	800a422 <_dtoa_r+0xb12>
 800a37c:	3201      	adds	r2, #1
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e612      	b.n	8009fa8 <_dtoa_r+0x698>
 800a382:	2a00      	cmp	r2, #0
 800a384:	dd07      	ble.n	800a396 <_dtoa_r+0xa86>
 800a386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a38a:	d0ed      	beq.n	800a368 <_dtoa_r+0xa58>
 800a38c:	9a00      	ldr	r2, [sp, #0]
 800a38e:	f108 0301 	add.w	r3, r8, #1
 800a392:	7013      	strb	r3, [r2, #0]
 800a394:	e608      	b.n	8009fa8 <_dtoa_r+0x698>
 800a396:	9b07      	ldr	r3, [sp, #28]
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d028      	beq.n	800a3f6 <_dtoa_r+0xae6>
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	4658      	mov	r0, fp
 800a3ac:	f000 f9d6 	bl	800a75c <__multadd>
 800a3b0:	42af      	cmp	r7, r5
 800a3b2:	4681      	mov	r9, r0
 800a3b4:	f04f 0300 	mov.w	r3, #0
 800a3b8:	f04f 020a 	mov.w	r2, #10
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4658      	mov	r0, fp
 800a3c0:	d107      	bne.n	800a3d2 <_dtoa_r+0xac2>
 800a3c2:	f000 f9cb 	bl	800a75c <__multadd>
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	9b07      	ldr	r3, [sp, #28]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	9307      	str	r3, [sp, #28]
 800a3d0:	e774      	b.n	800a2bc <_dtoa_r+0x9ac>
 800a3d2:	f000 f9c3 	bl	800a75c <__multadd>
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4607      	mov	r7, r0
 800a3da:	2300      	movs	r3, #0
 800a3dc:	220a      	movs	r2, #10
 800a3de:	4658      	mov	r0, fp
 800a3e0:	f000 f9bc 	bl	800a75c <__multadd>
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	e7f0      	b.n	800a3ca <_dtoa_r+0xaba>
 800a3e8:	9b00      	ldr	r3, [sp, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	bfcc      	ite	gt
 800a3ee:	461e      	movgt	r6, r3
 800a3f0:	2601      	movle	r6, #1
 800a3f2:	4456      	add	r6, sl
 800a3f4:	2700      	movs	r7, #0
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f000 fb5a 	bl	800aab4 <__lshift>
 800a400:	4621      	mov	r1, r4
 800a402:	4681      	mov	r9, r0
 800a404:	f000 fbc2 	bl	800ab8c <__mcmp>
 800a408:	2800      	cmp	r0, #0
 800a40a:	dcb0      	bgt.n	800a36e <_dtoa_r+0xa5e>
 800a40c:	d102      	bne.n	800a414 <_dtoa_r+0xb04>
 800a40e:	f018 0f01 	tst.w	r8, #1
 800a412:	d1ac      	bne.n	800a36e <_dtoa_r+0xa5e>
 800a414:	4633      	mov	r3, r6
 800a416:	461e      	mov	r6, r3
 800a418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a41c:	2a30      	cmp	r2, #48	@ 0x30
 800a41e:	d0fa      	beq.n	800a416 <_dtoa_r+0xb06>
 800a420:	e5c2      	b.n	8009fa8 <_dtoa_r+0x698>
 800a422:	459a      	cmp	sl, r3
 800a424:	d1a4      	bne.n	800a370 <_dtoa_r+0xa60>
 800a426:	9b04      	ldr	r3, [sp, #16]
 800a428:	3301      	adds	r3, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	2331      	movs	r3, #49	@ 0x31
 800a42e:	f88a 3000 	strb.w	r3, [sl]
 800a432:	e5b9      	b.n	8009fa8 <_dtoa_r+0x698>
 800a434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a436:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a494 <_dtoa_r+0xb84>
 800a43a:	b11b      	cbz	r3, 800a444 <_dtoa_r+0xb34>
 800a43c:	f10a 0308 	add.w	r3, sl, #8
 800a440:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	4650      	mov	r0, sl
 800a446:	b019      	add	sp, #100	@ 0x64
 800a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a44e:	2b01      	cmp	r3, #1
 800a450:	f77f ae37 	ble.w	800a0c2 <_dtoa_r+0x7b2>
 800a454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a456:	930a      	str	r3, [sp, #40]	@ 0x28
 800a458:	2001      	movs	r0, #1
 800a45a:	e655      	b.n	800a108 <_dtoa_r+0x7f8>
 800a45c:	9b00      	ldr	r3, [sp, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f77f aed6 	ble.w	800a210 <_dtoa_r+0x900>
 800a464:	4656      	mov	r6, sl
 800a466:	4621      	mov	r1, r4
 800a468:	4648      	mov	r0, r9
 800a46a:	f7ff f9c6 	bl	80097fa <quorem>
 800a46e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a472:	f806 8b01 	strb.w	r8, [r6], #1
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	eba6 020a 	sub.w	r2, r6, sl
 800a47c:	4293      	cmp	r3, r2
 800a47e:	ddb3      	ble.n	800a3e8 <_dtoa_r+0xad8>
 800a480:	4649      	mov	r1, r9
 800a482:	2300      	movs	r3, #0
 800a484:	220a      	movs	r2, #10
 800a486:	4658      	mov	r0, fp
 800a488:	f000 f968 	bl	800a75c <__multadd>
 800a48c:	4681      	mov	r9, r0
 800a48e:	e7ea      	b.n	800a466 <_dtoa_r+0xb56>
 800a490:	080ed09c 	.word	0x080ed09c
 800a494:	080ed020 	.word	0x080ed020

0800a498 <_free_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4605      	mov	r5, r0
 800a49c:	2900      	cmp	r1, #0
 800a49e:	d041      	beq.n	800a524 <_free_r+0x8c>
 800a4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a4:	1f0c      	subs	r4, r1, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bfb8      	it	lt
 800a4aa:	18e4      	addlt	r4, r4, r3
 800a4ac:	f000 f8e8 	bl	800a680 <__malloc_lock>
 800a4b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a528 <_free_r+0x90>)
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	b933      	cbnz	r3, 800a4c4 <_free_r+0x2c>
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	6014      	str	r4, [r2, #0]
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c0:	f000 b8e4 	b.w	800a68c <__malloc_unlock>
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	d908      	bls.n	800a4da <_free_r+0x42>
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	1821      	adds	r1, r4, r0
 800a4cc:	428b      	cmp	r3, r1
 800a4ce:	bf01      	itttt	eq
 800a4d0:	6819      	ldreq	r1, [r3, #0]
 800a4d2:	685b      	ldreq	r3, [r3, #4]
 800a4d4:	1809      	addeq	r1, r1, r0
 800a4d6:	6021      	streq	r1, [r4, #0]
 800a4d8:	e7ed      	b.n	800a4b6 <_free_r+0x1e>
 800a4da:	461a      	mov	r2, r3
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	b10b      	cbz	r3, 800a4e4 <_free_r+0x4c>
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d9fa      	bls.n	800a4da <_free_r+0x42>
 800a4e4:	6811      	ldr	r1, [r2, #0]
 800a4e6:	1850      	adds	r0, r2, r1
 800a4e8:	42a0      	cmp	r0, r4
 800a4ea:	d10b      	bne.n	800a504 <_free_r+0x6c>
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	4401      	add	r1, r0
 800a4f0:	1850      	adds	r0, r2, r1
 800a4f2:	4283      	cmp	r3, r0
 800a4f4:	6011      	str	r1, [r2, #0]
 800a4f6:	d1e0      	bne.n	800a4ba <_free_r+0x22>
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	4408      	add	r0, r1
 800a500:	6010      	str	r0, [r2, #0]
 800a502:	e7da      	b.n	800a4ba <_free_r+0x22>
 800a504:	d902      	bls.n	800a50c <_free_r+0x74>
 800a506:	230c      	movs	r3, #12
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	e7d6      	b.n	800a4ba <_free_r+0x22>
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	1821      	adds	r1, r4, r0
 800a510:	428b      	cmp	r3, r1
 800a512:	bf04      	itt	eq
 800a514:	6819      	ldreq	r1, [r3, #0]
 800a516:	685b      	ldreq	r3, [r3, #4]
 800a518:	6063      	str	r3, [r4, #4]
 800a51a:	bf04      	itt	eq
 800a51c:	1809      	addeq	r1, r1, r0
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	6054      	str	r4, [r2, #4]
 800a522:	e7ca      	b.n	800a4ba <_free_r+0x22>
 800a524:	bd38      	pop	{r3, r4, r5, pc}
 800a526:	bf00      	nop
 800a528:	20006da0 	.word	0x20006da0

0800a52c <malloc>:
 800a52c:	4b02      	ldr	r3, [pc, #8]	@ (800a538 <malloc+0xc>)
 800a52e:	4601      	mov	r1, r0
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	f000 b825 	b.w	800a580 <_malloc_r>
 800a536:	bf00      	nop
 800a538:	20000018 	.word	0x20000018

0800a53c <sbrk_aligned>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4e0f      	ldr	r6, [pc, #60]	@ (800a57c <sbrk_aligned+0x40>)
 800a540:	460c      	mov	r4, r1
 800a542:	6831      	ldr	r1, [r6, #0]
 800a544:	4605      	mov	r5, r0
 800a546:	b911      	cbnz	r1, 800a54e <sbrk_aligned+0x12>
 800a548:	f000 fe46 	bl	800b1d8 <_sbrk_r>
 800a54c:	6030      	str	r0, [r6, #0]
 800a54e:	4621      	mov	r1, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f000 fe41 	bl	800b1d8 <_sbrk_r>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d103      	bne.n	800a562 <sbrk_aligned+0x26>
 800a55a:	f04f 34ff 	mov.w	r4, #4294967295
 800a55e:	4620      	mov	r0, r4
 800a560:	bd70      	pop	{r4, r5, r6, pc}
 800a562:	1cc4      	adds	r4, r0, #3
 800a564:	f024 0403 	bic.w	r4, r4, #3
 800a568:	42a0      	cmp	r0, r4
 800a56a:	d0f8      	beq.n	800a55e <sbrk_aligned+0x22>
 800a56c:	1a21      	subs	r1, r4, r0
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 fe32 	bl	800b1d8 <_sbrk_r>
 800a574:	3001      	adds	r0, #1
 800a576:	d1f2      	bne.n	800a55e <sbrk_aligned+0x22>
 800a578:	e7ef      	b.n	800a55a <sbrk_aligned+0x1e>
 800a57a:	bf00      	nop
 800a57c:	20006d9c 	.word	0x20006d9c

0800a580 <_malloc_r>:
 800a580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a584:	1ccd      	adds	r5, r1, #3
 800a586:	f025 0503 	bic.w	r5, r5, #3
 800a58a:	3508      	adds	r5, #8
 800a58c:	2d0c      	cmp	r5, #12
 800a58e:	bf38      	it	cc
 800a590:	250c      	movcc	r5, #12
 800a592:	2d00      	cmp	r5, #0
 800a594:	4606      	mov	r6, r0
 800a596:	db01      	blt.n	800a59c <_malloc_r+0x1c>
 800a598:	42a9      	cmp	r1, r5
 800a59a:	d904      	bls.n	800a5a6 <_malloc_r+0x26>
 800a59c:	230c      	movs	r3, #12
 800a59e:	6033      	str	r3, [r6, #0]
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a67c <_malloc_r+0xfc>
 800a5aa:	f000 f869 	bl	800a680 <__malloc_lock>
 800a5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a5b2:	461c      	mov	r4, r3
 800a5b4:	bb44      	cbnz	r4, 800a608 <_malloc_r+0x88>
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff ffbf 	bl	800a53c <sbrk_aligned>
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	d158      	bne.n	800a676 <_malloc_r+0xf6>
 800a5c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a5c8:	4627      	mov	r7, r4
 800a5ca:	2f00      	cmp	r7, #0
 800a5cc:	d143      	bne.n	800a656 <_malloc_r+0xd6>
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	d04b      	beq.n	800a66a <_malloc_r+0xea>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	eb04 0903 	add.w	r9, r4, r3
 800a5dc:	f000 fdfc 	bl	800b1d8 <_sbrk_r>
 800a5e0:	4581      	cmp	r9, r0
 800a5e2:	d142      	bne.n	800a66a <_malloc_r+0xea>
 800a5e4:	6821      	ldr	r1, [r4, #0]
 800a5e6:	1a6d      	subs	r5, r5, r1
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f7ff ffa6 	bl	800a53c <sbrk_aligned>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d03a      	beq.n	800a66a <_malloc_r+0xea>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	442b      	add	r3, r5
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	bb62      	cbnz	r2, 800a65c <_malloc_r+0xdc>
 800a602:	f8c8 7000 	str.w	r7, [r8]
 800a606:	e00f      	b.n	800a628 <_malloc_r+0xa8>
 800a608:	6822      	ldr	r2, [r4, #0]
 800a60a:	1b52      	subs	r2, r2, r5
 800a60c:	d420      	bmi.n	800a650 <_malloc_r+0xd0>
 800a60e:	2a0b      	cmp	r2, #11
 800a610:	d917      	bls.n	800a642 <_malloc_r+0xc2>
 800a612:	1961      	adds	r1, r4, r5
 800a614:	42a3      	cmp	r3, r4
 800a616:	6025      	str	r5, [r4, #0]
 800a618:	bf18      	it	ne
 800a61a:	6059      	strne	r1, [r3, #4]
 800a61c:	6863      	ldr	r3, [r4, #4]
 800a61e:	bf08      	it	eq
 800a620:	f8c8 1000 	streq.w	r1, [r8]
 800a624:	5162      	str	r2, [r4, r5]
 800a626:	604b      	str	r3, [r1, #4]
 800a628:	4630      	mov	r0, r6
 800a62a:	f000 f82f 	bl	800a68c <__malloc_unlock>
 800a62e:	f104 000b 	add.w	r0, r4, #11
 800a632:	1d23      	adds	r3, r4, #4
 800a634:	f020 0007 	bic.w	r0, r0, #7
 800a638:	1ac2      	subs	r2, r0, r3
 800a63a:	bf1c      	itt	ne
 800a63c:	1a1b      	subne	r3, r3, r0
 800a63e:	50a3      	strne	r3, [r4, r2]
 800a640:	e7af      	b.n	800a5a2 <_malloc_r+0x22>
 800a642:	6862      	ldr	r2, [r4, #4]
 800a644:	42a3      	cmp	r3, r4
 800a646:	bf0c      	ite	eq
 800a648:	f8c8 2000 	streq.w	r2, [r8]
 800a64c:	605a      	strne	r2, [r3, #4]
 800a64e:	e7eb      	b.n	800a628 <_malloc_r+0xa8>
 800a650:	4623      	mov	r3, r4
 800a652:	6864      	ldr	r4, [r4, #4]
 800a654:	e7ae      	b.n	800a5b4 <_malloc_r+0x34>
 800a656:	463c      	mov	r4, r7
 800a658:	687f      	ldr	r7, [r7, #4]
 800a65a:	e7b6      	b.n	800a5ca <_malloc_r+0x4a>
 800a65c:	461a      	mov	r2, r3
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	42a3      	cmp	r3, r4
 800a662:	d1fb      	bne.n	800a65c <_malloc_r+0xdc>
 800a664:	2300      	movs	r3, #0
 800a666:	6053      	str	r3, [r2, #4]
 800a668:	e7de      	b.n	800a628 <_malloc_r+0xa8>
 800a66a:	230c      	movs	r3, #12
 800a66c:	6033      	str	r3, [r6, #0]
 800a66e:	4630      	mov	r0, r6
 800a670:	f000 f80c 	bl	800a68c <__malloc_unlock>
 800a674:	e794      	b.n	800a5a0 <_malloc_r+0x20>
 800a676:	6005      	str	r5, [r0, #0]
 800a678:	e7d6      	b.n	800a628 <_malloc_r+0xa8>
 800a67a:	bf00      	nop
 800a67c:	20006da0 	.word	0x20006da0

0800a680 <__malloc_lock>:
 800a680:	4801      	ldr	r0, [pc, #4]	@ (800a688 <__malloc_lock+0x8>)
 800a682:	f7ff b8b8 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 800a686:	bf00      	nop
 800a688:	20006d98 	.word	0x20006d98

0800a68c <__malloc_unlock>:
 800a68c:	4801      	ldr	r0, [pc, #4]	@ (800a694 <__malloc_unlock+0x8>)
 800a68e:	f7ff b8b3 	b.w	80097f8 <__retarget_lock_release_recursive>
 800a692:	bf00      	nop
 800a694:	20006d98 	.word	0x20006d98

0800a698 <_Balloc>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	69c6      	ldr	r6, [r0, #28]
 800a69c:	4604      	mov	r4, r0
 800a69e:	460d      	mov	r5, r1
 800a6a0:	b976      	cbnz	r6, 800a6c0 <_Balloc+0x28>
 800a6a2:	2010      	movs	r0, #16
 800a6a4:	f7ff ff42 	bl	800a52c <malloc>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	61e0      	str	r0, [r4, #28]
 800a6ac:	b920      	cbnz	r0, 800a6b8 <_Balloc+0x20>
 800a6ae:	4b18      	ldr	r3, [pc, #96]	@ (800a710 <_Balloc+0x78>)
 800a6b0:	4818      	ldr	r0, [pc, #96]	@ (800a714 <_Balloc+0x7c>)
 800a6b2:	216b      	movs	r1, #107	@ 0x6b
 800a6b4:	f000 fdae 	bl	800b214 <__assert_func>
 800a6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6bc:	6006      	str	r6, [r0, #0]
 800a6be:	60c6      	str	r6, [r0, #12]
 800a6c0:	69e6      	ldr	r6, [r4, #28]
 800a6c2:	68f3      	ldr	r3, [r6, #12]
 800a6c4:	b183      	cbz	r3, 800a6e8 <_Balloc+0x50>
 800a6c6:	69e3      	ldr	r3, [r4, #28]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6ce:	b9b8      	cbnz	r0, 800a700 <_Balloc+0x68>
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a6d6:	1d72      	adds	r2, r6, #5
 800a6d8:	0092      	lsls	r2, r2, #2
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fdb8 	bl	800b250 <_calloc_r>
 800a6e0:	b160      	cbz	r0, 800a6fc <_Balloc+0x64>
 800a6e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6e6:	e00e      	b.n	800a706 <_Balloc+0x6e>
 800a6e8:	2221      	movs	r2, #33	@ 0x21
 800a6ea:	2104      	movs	r1, #4
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 fdaf 	bl	800b250 <_calloc_r>
 800a6f2:	69e3      	ldr	r3, [r4, #28]
 800a6f4:	60f0      	str	r0, [r6, #12]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e4      	bne.n	800a6c6 <_Balloc+0x2e>
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	6802      	ldr	r2, [r0, #0]
 800a702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a706:	2300      	movs	r3, #0
 800a708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a70c:	e7f7      	b.n	800a6fe <_Balloc+0x66>
 800a70e:	bf00      	nop
 800a710:	080ed02d 	.word	0x080ed02d
 800a714:	080ed0ad 	.word	0x080ed0ad

0800a718 <_Bfree>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	69c6      	ldr	r6, [r0, #28]
 800a71c:	4605      	mov	r5, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	b976      	cbnz	r6, 800a740 <_Bfree+0x28>
 800a722:	2010      	movs	r0, #16
 800a724:	f7ff ff02 	bl	800a52c <malloc>
 800a728:	4602      	mov	r2, r0
 800a72a:	61e8      	str	r0, [r5, #28]
 800a72c:	b920      	cbnz	r0, 800a738 <_Bfree+0x20>
 800a72e:	4b09      	ldr	r3, [pc, #36]	@ (800a754 <_Bfree+0x3c>)
 800a730:	4809      	ldr	r0, [pc, #36]	@ (800a758 <_Bfree+0x40>)
 800a732:	218f      	movs	r1, #143	@ 0x8f
 800a734:	f000 fd6e 	bl	800b214 <__assert_func>
 800a738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a73c:	6006      	str	r6, [r0, #0]
 800a73e:	60c6      	str	r6, [r0, #12]
 800a740:	b13c      	cbz	r4, 800a752 <_Bfree+0x3a>
 800a742:	69eb      	ldr	r3, [r5, #28]
 800a744:	6862      	ldr	r2, [r4, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a74c:	6021      	str	r1, [r4, #0]
 800a74e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a752:	bd70      	pop	{r4, r5, r6, pc}
 800a754:	080ed02d 	.word	0x080ed02d
 800a758:	080ed0ad 	.word	0x080ed0ad

0800a75c <__multadd>:
 800a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a760:	690d      	ldr	r5, [r1, #16]
 800a762:	4607      	mov	r7, r0
 800a764:	460c      	mov	r4, r1
 800a766:	461e      	mov	r6, r3
 800a768:	f101 0c14 	add.w	ip, r1, #20
 800a76c:	2000      	movs	r0, #0
 800a76e:	f8dc 3000 	ldr.w	r3, [ip]
 800a772:	b299      	uxth	r1, r3
 800a774:	fb02 6101 	mla	r1, r2, r1, r6
 800a778:	0c1e      	lsrs	r6, r3, #16
 800a77a:	0c0b      	lsrs	r3, r1, #16
 800a77c:	fb02 3306 	mla	r3, r2, r6, r3
 800a780:	b289      	uxth	r1, r1
 800a782:	3001      	adds	r0, #1
 800a784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a788:	4285      	cmp	r5, r0
 800a78a:	f84c 1b04 	str.w	r1, [ip], #4
 800a78e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a792:	dcec      	bgt.n	800a76e <__multadd+0x12>
 800a794:	b30e      	cbz	r6, 800a7da <__multadd+0x7e>
 800a796:	68a3      	ldr	r3, [r4, #8]
 800a798:	42ab      	cmp	r3, r5
 800a79a:	dc19      	bgt.n	800a7d0 <__multadd+0x74>
 800a79c:	6861      	ldr	r1, [r4, #4]
 800a79e:	4638      	mov	r0, r7
 800a7a0:	3101      	adds	r1, #1
 800a7a2:	f7ff ff79 	bl	800a698 <_Balloc>
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	b928      	cbnz	r0, 800a7b6 <__multadd+0x5a>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e0 <__multadd+0x84>)
 800a7ae:	480d      	ldr	r0, [pc, #52]	@ (800a7e4 <__multadd+0x88>)
 800a7b0:	21ba      	movs	r1, #186	@ 0xba
 800a7b2:	f000 fd2f 	bl	800b214 <__assert_func>
 800a7b6:	6922      	ldr	r2, [r4, #16]
 800a7b8:	3202      	adds	r2, #2
 800a7ba:	f104 010c 	add.w	r1, r4, #12
 800a7be:	0092      	lsls	r2, r2, #2
 800a7c0:	300c      	adds	r0, #12
 800a7c2:	f000 fd19 	bl	800b1f8 <memcpy>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f7ff ffa5 	bl	800a718 <_Bfree>
 800a7ce:	4644      	mov	r4, r8
 800a7d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7d4:	3501      	adds	r5, #1
 800a7d6:	615e      	str	r6, [r3, #20]
 800a7d8:	6125      	str	r5, [r4, #16]
 800a7da:	4620      	mov	r0, r4
 800a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e0:	080ed09c 	.word	0x080ed09c
 800a7e4:	080ed0ad 	.word	0x080ed0ad

0800a7e8 <__hi0bits>:
 800a7e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	bf36      	itet	cc
 800a7f0:	0403      	lslcc	r3, r0, #16
 800a7f2:	2000      	movcs	r0, #0
 800a7f4:	2010      	movcc	r0, #16
 800a7f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7fa:	bf3c      	itt	cc
 800a7fc:	021b      	lslcc	r3, r3, #8
 800a7fe:	3008      	addcc	r0, #8
 800a800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a804:	bf3c      	itt	cc
 800a806:	011b      	lslcc	r3, r3, #4
 800a808:	3004      	addcc	r0, #4
 800a80a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a80e:	bf3c      	itt	cc
 800a810:	009b      	lslcc	r3, r3, #2
 800a812:	3002      	addcc	r0, #2
 800a814:	2b00      	cmp	r3, #0
 800a816:	db05      	blt.n	800a824 <__hi0bits+0x3c>
 800a818:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a81c:	f100 0001 	add.w	r0, r0, #1
 800a820:	bf08      	it	eq
 800a822:	2020      	moveq	r0, #32
 800a824:	4770      	bx	lr

0800a826 <__lo0bits>:
 800a826:	6803      	ldr	r3, [r0, #0]
 800a828:	4602      	mov	r2, r0
 800a82a:	f013 0007 	ands.w	r0, r3, #7
 800a82e:	d00b      	beq.n	800a848 <__lo0bits+0x22>
 800a830:	07d9      	lsls	r1, r3, #31
 800a832:	d421      	bmi.n	800a878 <__lo0bits+0x52>
 800a834:	0798      	lsls	r0, r3, #30
 800a836:	bf49      	itett	mi
 800a838:	085b      	lsrmi	r3, r3, #1
 800a83a:	089b      	lsrpl	r3, r3, #2
 800a83c:	2001      	movmi	r0, #1
 800a83e:	6013      	strmi	r3, [r2, #0]
 800a840:	bf5c      	itt	pl
 800a842:	6013      	strpl	r3, [r2, #0]
 800a844:	2002      	movpl	r0, #2
 800a846:	4770      	bx	lr
 800a848:	b299      	uxth	r1, r3
 800a84a:	b909      	cbnz	r1, 800a850 <__lo0bits+0x2a>
 800a84c:	0c1b      	lsrs	r3, r3, #16
 800a84e:	2010      	movs	r0, #16
 800a850:	b2d9      	uxtb	r1, r3
 800a852:	b909      	cbnz	r1, 800a858 <__lo0bits+0x32>
 800a854:	3008      	adds	r0, #8
 800a856:	0a1b      	lsrs	r3, r3, #8
 800a858:	0719      	lsls	r1, r3, #28
 800a85a:	bf04      	itt	eq
 800a85c:	091b      	lsreq	r3, r3, #4
 800a85e:	3004      	addeq	r0, #4
 800a860:	0799      	lsls	r1, r3, #30
 800a862:	bf04      	itt	eq
 800a864:	089b      	lsreq	r3, r3, #2
 800a866:	3002      	addeq	r0, #2
 800a868:	07d9      	lsls	r1, r3, #31
 800a86a:	d403      	bmi.n	800a874 <__lo0bits+0x4e>
 800a86c:	085b      	lsrs	r3, r3, #1
 800a86e:	f100 0001 	add.w	r0, r0, #1
 800a872:	d003      	beq.n	800a87c <__lo0bits+0x56>
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	4770      	bx	lr
 800a878:	2000      	movs	r0, #0
 800a87a:	4770      	bx	lr
 800a87c:	2020      	movs	r0, #32
 800a87e:	4770      	bx	lr

0800a880 <__i2b>:
 800a880:	b510      	push	{r4, lr}
 800a882:	460c      	mov	r4, r1
 800a884:	2101      	movs	r1, #1
 800a886:	f7ff ff07 	bl	800a698 <_Balloc>
 800a88a:	4602      	mov	r2, r0
 800a88c:	b928      	cbnz	r0, 800a89a <__i2b+0x1a>
 800a88e:	4b05      	ldr	r3, [pc, #20]	@ (800a8a4 <__i2b+0x24>)
 800a890:	4805      	ldr	r0, [pc, #20]	@ (800a8a8 <__i2b+0x28>)
 800a892:	f240 1145 	movw	r1, #325	@ 0x145
 800a896:	f000 fcbd 	bl	800b214 <__assert_func>
 800a89a:	2301      	movs	r3, #1
 800a89c:	6144      	str	r4, [r0, #20]
 800a89e:	6103      	str	r3, [r0, #16]
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	bf00      	nop
 800a8a4:	080ed09c 	.word	0x080ed09c
 800a8a8:	080ed0ad 	.word	0x080ed0ad

0800a8ac <__multiply>:
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	690a      	ldr	r2, [r1, #16]
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	bfa8      	it	ge
 800a8ba:	4623      	movge	r3, r4
 800a8bc:	460f      	mov	r7, r1
 800a8be:	bfa4      	itt	ge
 800a8c0:	460c      	movge	r4, r1
 800a8c2:	461f      	movge	r7, r3
 800a8c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a8c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a8cc:	68a3      	ldr	r3, [r4, #8]
 800a8ce:	6861      	ldr	r1, [r4, #4]
 800a8d0:	eb0a 0609 	add.w	r6, sl, r9
 800a8d4:	42b3      	cmp	r3, r6
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	bfb8      	it	lt
 800a8da:	3101      	addlt	r1, #1
 800a8dc:	f7ff fedc 	bl	800a698 <_Balloc>
 800a8e0:	b930      	cbnz	r0, 800a8f0 <__multiply+0x44>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	4b44      	ldr	r3, [pc, #272]	@ (800a9f8 <__multiply+0x14c>)
 800a8e6:	4845      	ldr	r0, [pc, #276]	@ (800a9fc <__multiply+0x150>)
 800a8e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a8ec:	f000 fc92 	bl	800b214 <__assert_func>
 800a8f0:	f100 0514 	add.w	r5, r0, #20
 800a8f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4543      	cmp	r3, r8
 800a8fe:	d321      	bcc.n	800a944 <__multiply+0x98>
 800a900:	f107 0114 	add.w	r1, r7, #20
 800a904:	f104 0214 	add.w	r2, r4, #20
 800a908:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a90c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a910:	9302      	str	r3, [sp, #8]
 800a912:	1b13      	subs	r3, r2, r4
 800a914:	3b15      	subs	r3, #21
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	3304      	adds	r3, #4
 800a91c:	f104 0715 	add.w	r7, r4, #21
 800a920:	42ba      	cmp	r2, r7
 800a922:	bf38      	it	cc
 800a924:	2304      	movcc	r3, #4
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	9b02      	ldr	r3, [sp, #8]
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	428b      	cmp	r3, r1
 800a92e:	d80c      	bhi.n	800a94a <__multiply+0x9e>
 800a930:	2e00      	cmp	r6, #0
 800a932:	dd03      	ble.n	800a93c <__multiply+0x90>
 800a934:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d05b      	beq.n	800a9f4 <__multiply+0x148>
 800a93c:	6106      	str	r6, [r0, #16]
 800a93e:	b005      	add	sp, #20
 800a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a944:	f843 2b04 	str.w	r2, [r3], #4
 800a948:	e7d8      	b.n	800a8fc <__multiply+0x50>
 800a94a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a94e:	f1ba 0f00 	cmp.w	sl, #0
 800a952:	d024      	beq.n	800a99e <__multiply+0xf2>
 800a954:	f104 0e14 	add.w	lr, r4, #20
 800a958:	46a9      	mov	r9, r5
 800a95a:	f04f 0c00 	mov.w	ip, #0
 800a95e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a962:	f8d9 3000 	ldr.w	r3, [r9]
 800a966:	fa1f fb87 	uxth.w	fp, r7
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a970:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a974:	f8d9 7000 	ldr.w	r7, [r9]
 800a978:	4463      	add	r3, ip
 800a97a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a97e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a982:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a986:	b29b      	uxth	r3, r3
 800a988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a98c:	4572      	cmp	r2, lr
 800a98e:	f849 3b04 	str.w	r3, [r9], #4
 800a992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a996:	d8e2      	bhi.n	800a95e <__multiply+0xb2>
 800a998:	9b01      	ldr	r3, [sp, #4]
 800a99a:	f845 c003 	str.w	ip, [r5, r3]
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9a4:	3104      	adds	r1, #4
 800a9a6:	f1b9 0f00 	cmp.w	r9, #0
 800a9aa:	d021      	beq.n	800a9f0 <__multiply+0x144>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	f104 0c14 	add.w	ip, r4, #20
 800a9b2:	46ae      	mov	lr, r5
 800a9b4:	f04f 0a00 	mov.w	sl, #0
 800a9b8:	f8bc b000 	ldrh.w	fp, [ip]
 800a9bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a9c0:	fb09 770b 	mla	r7, r9, fp, r7
 800a9c4:	4457      	add	r7, sl
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9cc:	f84e 3b04 	str.w	r3, [lr], #4
 800a9d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9d8:	f8be 3000 	ldrh.w	r3, [lr]
 800a9dc:	fb09 330a 	mla	r3, r9, sl, r3
 800a9e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a9e4:	4562      	cmp	r2, ip
 800a9e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9ea:	d8e5      	bhi.n	800a9b8 <__multiply+0x10c>
 800a9ec:	9f01      	ldr	r7, [sp, #4]
 800a9ee:	51eb      	str	r3, [r5, r7]
 800a9f0:	3504      	adds	r5, #4
 800a9f2:	e799      	b.n	800a928 <__multiply+0x7c>
 800a9f4:	3e01      	subs	r6, #1
 800a9f6:	e79b      	b.n	800a930 <__multiply+0x84>
 800a9f8:	080ed09c 	.word	0x080ed09c
 800a9fc:	080ed0ad 	.word	0x080ed0ad

0800aa00 <__pow5mult>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	4615      	mov	r5, r2
 800aa06:	f012 0203 	ands.w	r2, r2, #3
 800aa0a:	4607      	mov	r7, r0
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	d007      	beq.n	800aa20 <__pow5mult+0x20>
 800aa10:	4c25      	ldr	r4, [pc, #148]	@ (800aaa8 <__pow5mult+0xa8>)
 800aa12:	3a01      	subs	r2, #1
 800aa14:	2300      	movs	r3, #0
 800aa16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa1a:	f7ff fe9f 	bl	800a75c <__multadd>
 800aa1e:	4606      	mov	r6, r0
 800aa20:	10ad      	asrs	r5, r5, #2
 800aa22:	d03d      	beq.n	800aaa0 <__pow5mult+0xa0>
 800aa24:	69fc      	ldr	r4, [r7, #28]
 800aa26:	b97c      	cbnz	r4, 800aa48 <__pow5mult+0x48>
 800aa28:	2010      	movs	r0, #16
 800aa2a:	f7ff fd7f 	bl	800a52c <malloc>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	61f8      	str	r0, [r7, #28]
 800aa32:	b928      	cbnz	r0, 800aa40 <__pow5mult+0x40>
 800aa34:	4b1d      	ldr	r3, [pc, #116]	@ (800aaac <__pow5mult+0xac>)
 800aa36:	481e      	ldr	r0, [pc, #120]	@ (800aab0 <__pow5mult+0xb0>)
 800aa38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa3c:	f000 fbea 	bl	800b214 <__assert_func>
 800aa40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa44:	6004      	str	r4, [r0, #0]
 800aa46:	60c4      	str	r4, [r0, #12]
 800aa48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa50:	b94c      	cbnz	r4, 800aa66 <__pow5mult+0x66>
 800aa52:	f240 2171 	movw	r1, #625	@ 0x271
 800aa56:	4638      	mov	r0, r7
 800aa58:	f7ff ff12 	bl	800a880 <__i2b>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa62:	4604      	mov	r4, r0
 800aa64:	6003      	str	r3, [r0, #0]
 800aa66:	f04f 0900 	mov.w	r9, #0
 800aa6a:	07eb      	lsls	r3, r5, #31
 800aa6c:	d50a      	bpl.n	800aa84 <__pow5mult+0x84>
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4622      	mov	r2, r4
 800aa72:	4638      	mov	r0, r7
 800aa74:	f7ff ff1a 	bl	800a8ac <__multiply>
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4680      	mov	r8, r0
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7ff fe4b 	bl	800a718 <_Bfree>
 800aa82:	4646      	mov	r6, r8
 800aa84:	106d      	asrs	r5, r5, #1
 800aa86:	d00b      	beq.n	800aaa0 <__pow5mult+0xa0>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	b938      	cbnz	r0, 800aa9c <__pow5mult+0x9c>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff0b 	bl	800a8ac <__multiply>
 800aa96:	6020      	str	r0, [r4, #0]
 800aa98:	f8c0 9000 	str.w	r9, [r0]
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	e7e4      	b.n	800aa6a <__pow5mult+0x6a>
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa6:	bf00      	nop
 800aaa8:	080ed108 	.word	0x080ed108
 800aaac:	080ed02d 	.word	0x080ed02d
 800aab0:	080ed0ad 	.word	0x080ed0ad

0800aab4 <__lshift>:
 800aab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	460c      	mov	r4, r1
 800aaba:	6849      	ldr	r1, [r1, #4]
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	4607      	mov	r7, r0
 800aac6:	4691      	mov	r9, r2
 800aac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aacc:	f108 0601 	add.w	r6, r8, #1
 800aad0:	42b3      	cmp	r3, r6
 800aad2:	db0b      	blt.n	800aaec <__lshift+0x38>
 800aad4:	4638      	mov	r0, r7
 800aad6:	f7ff fddf 	bl	800a698 <_Balloc>
 800aada:	4605      	mov	r5, r0
 800aadc:	b948      	cbnz	r0, 800aaf2 <__lshift+0x3e>
 800aade:	4602      	mov	r2, r0
 800aae0:	4b28      	ldr	r3, [pc, #160]	@ (800ab84 <__lshift+0xd0>)
 800aae2:	4829      	ldr	r0, [pc, #164]	@ (800ab88 <__lshift+0xd4>)
 800aae4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aae8:	f000 fb94 	bl	800b214 <__assert_func>
 800aaec:	3101      	adds	r1, #1
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	e7ee      	b.n	800aad0 <__lshift+0x1c>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f100 0114 	add.w	r1, r0, #20
 800aaf8:	f100 0210 	add.w	r2, r0, #16
 800aafc:	4618      	mov	r0, r3
 800aafe:	4553      	cmp	r3, sl
 800ab00:	db33      	blt.n	800ab6a <__lshift+0xb6>
 800ab02:	6920      	ldr	r0, [r4, #16]
 800ab04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab08:	f104 0314 	add.w	r3, r4, #20
 800ab0c:	f019 091f 	ands.w	r9, r9, #31
 800ab10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab18:	d02b      	beq.n	800ab72 <__lshift+0xbe>
 800ab1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ab1e:	468a      	mov	sl, r1
 800ab20:	2200      	movs	r2, #0
 800ab22:	6818      	ldr	r0, [r3, #0]
 800ab24:	fa00 f009 	lsl.w	r0, r0, r9
 800ab28:	4310      	orrs	r0, r2
 800ab2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ab2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab32:	459c      	cmp	ip, r3
 800ab34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab38:	d8f3      	bhi.n	800ab22 <__lshift+0x6e>
 800ab3a:	ebac 0304 	sub.w	r3, ip, r4
 800ab3e:	3b15      	subs	r3, #21
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	3304      	adds	r3, #4
 800ab46:	f104 0015 	add.w	r0, r4, #21
 800ab4a:	4584      	cmp	ip, r0
 800ab4c:	bf38      	it	cc
 800ab4e:	2304      	movcc	r3, #4
 800ab50:	50ca      	str	r2, [r1, r3]
 800ab52:	b10a      	cbz	r2, 800ab58 <__lshift+0xa4>
 800ab54:	f108 0602 	add.w	r6, r8, #2
 800ab58:	3e01      	subs	r6, #1
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	612e      	str	r6, [r5, #16]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	f7ff fdda 	bl	800a718 <_Bfree>
 800ab64:	4628      	mov	r0, r5
 800ab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab6e:	3301      	adds	r3, #1
 800ab70:	e7c5      	b.n	800aafe <__lshift+0x4a>
 800ab72:	3904      	subs	r1, #4
 800ab74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab7c:	459c      	cmp	ip, r3
 800ab7e:	d8f9      	bhi.n	800ab74 <__lshift+0xc0>
 800ab80:	e7ea      	b.n	800ab58 <__lshift+0xa4>
 800ab82:	bf00      	nop
 800ab84:	080ed09c 	.word	0x080ed09c
 800ab88:	080ed0ad 	.word	0x080ed0ad

0800ab8c <__mcmp>:
 800ab8c:	690a      	ldr	r2, [r1, #16]
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6900      	ldr	r0, [r0, #16]
 800ab92:	1a80      	subs	r0, r0, r2
 800ab94:	b530      	push	{r4, r5, lr}
 800ab96:	d10e      	bne.n	800abb6 <__mcmp+0x2a>
 800ab98:	3314      	adds	r3, #20
 800ab9a:	3114      	adds	r1, #20
 800ab9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abac:	4295      	cmp	r5, r2
 800abae:	d003      	beq.n	800abb8 <__mcmp+0x2c>
 800abb0:	d205      	bcs.n	800abbe <__mcmp+0x32>
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	bd30      	pop	{r4, r5, pc}
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d3f3      	bcc.n	800aba4 <__mcmp+0x18>
 800abbc:	e7fb      	b.n	800abb6 <__mcmp+0x2a>
 800abbe:	2001      	movs	r0, #1
 800abc0:	e7f9      	b.n	800abb6 <__mcmp+0x2a>
	...

0800abc4 <__mdiff>:
 800abc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc8:	4689      	mov	r9, r1
 800abca:	4606      	mov	r6, r0
 800abcc:	4611      	mov	r1, r2
 800abce:	4648      	mov	r0, r9
 800abd0:	4614      	mov	r4, r2
 800abd2:	f7ff ffdb 	bl	800ab8c <__mcmp>
 800abd6:	1e05      	subs	r5, r0, #0
 800abd8:	d112      	bne.n	800ac00 <__mdiff+0x3c>
 800abda:	4629      	mov	r1, r5
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff fd5b 	bl	800a698 <_Balloc>
 800abe2:	4602      	mov	r2, r0
 800abe4:	b928      	cbnz	r0, 800abf2 <__mdiff+0x2e>
 800abe6:	4b3f      	ldr	r3, [pc, #252]	@ (800ace4 <__mdiff+0x120>)
 800abe8:	f240 2137 	movw	r1, #567	@ 0x237
 800abec:	483e      	ldr	r0, [pc, #248]	@ (800ace8 <__mdiff+0x124>)
 800abee:	f000 fb11 	bl	800b214 <__assert_func>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abf8:	4610      	mov	r0, r2
 800abfa:	b003      	add	sp, #12
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	bfbc      	itt	lt
 800ac02:	464b      	movlt	r3, r9
 800ac04:	46a1      	movlt	r9, r4
 800ac06:	4630      	mov	r0, r6
 800ac08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac0c:	bfba      	itte	lt
 800ac0e:	461c      	movlt	r4, r3
 800ac10:	2501      	movlt	r5, #1
 800ac12:	2500      	movge	r5, #0
 800ac14:	f7ff fd40 	bl	800a698 <_Balloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	b918      	cbnz	r0, 800ac24 <__mdiff+0x60>
 800ac1c:	4b31      	ldr	r3, [pc, #196]	@ (800ace4 <__mdiff+0x120>)
 800ac1e:	f240 2145 	movw	r1, #581	@ 0x245
 800ac22:	e7e3      	b.n	800abec <__mdiff+0x28>
 800ac24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac28:	6926      	ldr	r6, [r4, #16]
 800ac2a:	60c5      	str	r5, [r0, #12]
 800ac2c:	f109 0310 	add.w	r3, r9, #16
 800ac30:	f109 0514 	add.w	r5, r9, #20
 800ac34:	f104 0e14 	add.w	lr, r4, #20
 800ac38:	f100 0b14 	add.w	fp, r0, #20
 800ac3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	46d9      	mov	r9, fp
 800ac48:	f04f 0c00 	mov.w	ip, #0
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	fa1f f38a 	uxth.w	r3, sl
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	b283      	uxth	r3, r0
 800ac60:	1acb      	subs	r3, r1, r3
 800ac62:	0c00      	lsrs	r0, r0, #16
 800ac64:	4463      	add	r3, ip
 800ac66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac74:	4576      	cmp	r6, lr
 800ac76:	f849 3b04 	str.w	r3, [r9], #4
 800ac7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac7e:	d8e5      	bhi.n	800ac4c <__mdiff+0x88>
 800ac80:	1b33      	subs	r3, r6, r4
 800ac82:	3b15      	subs	r3, #21
 800ac84:	f023 0303 	bic.w	r3, r3, #3
 800ac88:	3415      	adds	r4, #21
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	42a6      	cmp	r6, r4
 800ac8e:	bf38      	it	cc
 800ac90:	2304      	movcc	r3, #4
 800ac92:	441d      	add	r5, r3
 800ac94:	445b      	add	r3, fp
 800ac96:	461e      	mov	r6, r3
 800ac98:	462c      	mov	r4, r5
 800ac9a:	4544      	cmp	r4, r8
 800ac9c:	d30e      	bcc.n	800acbc <__mdiff+0xf8>
 800ac9e:	f108 0103 	add.w	r1, r8, #3
 800aca2:	1b49      	subs	r1, r1, r5
 800aca4:	f021 0103 	bic.w	r1, r1, #3
 800aca8:	3d03      	subs	r5, #3
 800acaa:	45a8      	cmp	r8, r5
 800acac:	bf38      	it	cc
 800acae:	2100      	movcc	r1, #0
 800acb0:	440b      	add	r3, r1
 800acb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acb6:	b191      	cbz	r1, 800acde <__mdiff+0x11a>
 800acb8:	6117      	str	r7, [r2, #16]
 800acba:	e79d      	b.n	800abf8 <__mdiff+0x34>
 800acbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800acc0:	46e6      	mov	lr, ip
 800acc2:	0c08      	lsrs	r0, r1, #16
 800acc4:	fa1c fc81 	uxtah	ip, ip, r1
 800acc8:	4471      	add	r1, lr
 800acca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acce:	b289      	uxth	r1, r1
 800acd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800acd4:	f846 1b04 	str.w	r1, [r6], #4
 800acd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acdc:	e7dd      	b.n	800ac9a <__mdiff+0xd6>
 800acde:	3f01      	subs	r7, #1
 800ace0:	e7e7      	b.n	800acb2 <__mdiff+0xee>
 800ace2:	bf00      	nop
 800ace4:	080ed09c 	.word	0x080ed09c
 800ace8:	080ed0ad 	.word	0x080ed0ad

0800acec <__d2b>:
 800acec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acf0:	460f      	mov	r7, r1
 800acf2:	2101      	movs	r1, #1
 800acf4:	ec59 8b10 	vmov	r8, r9, d0
 800acf8:	4616      	mov	r6, r2
 800acfa:	f7ff fccd 	bl	800a698 <_Balloc>
 800acfe:	4604      	mov	r4, r0
 800ad00:	b930      	cbnz	r0, 800ad10 <__d2b+0x24>
 800ad02:	4602      	mov	r2, r0
 800ad04:	4b23      	ldr	r3, [pc, #140]	@ (800ad94 <__d2b+0xa8>)
 800ad06:	4824      	ldr	r0, [pc, #144]	@ (800ad98 <__d2b+0xac>)
 800ad08:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad0c:	f000 fa82 	bl	800b214 <__assert_func>
 800ad10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad18:	b10d      	cbz	r5, 800ad1e <__d2b+0x32>
 800ad1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	f1b8 0300 	subs.w	r3, r8, #0
 800ad24:	d023      	beq.n	800ad6e <__d2b+0x82>
 800ad26:	4668      	mov	r0, sp
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	f7ff fd7c 	bl	800a826 <__lo0bits>
 800ad2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad32:	b1d0      	cbz	r0, 800ad6a <__d2b+0x7e>
 800ad34:	f1c0 0320 	rsb	r3, r0, #32
 800ad38:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	40c2      	lsrs	r2, r0
 800ad40:	6163      	str	r3, [r4, #20]
 800ad42:	9201      	str	r2, [sp, #4]
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	61a3      	str	r3, [r4, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bf0c      	ite	eq
 800ad4c:	2201      	moveq	r2, #1
 800ad4e:	2202      	movne	r2, #2
 800ad50:	6122      	str	r2, [r4, #16]
 800ad52:	b1a5      	cbz	r5, 800ad7e <__d2b+0x92>
 800ad54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad58:	4405      	add	r5, r0
 800ad5a:	603d      	str	r5, [r7, #0]
 800ad5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad60:	6030      	str	r0, [r6, #0]
 800ad62:	4620      	mov	r0, r4
 800ad64:	b003      	add	sp, #12
 800ad66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	6161      	str	r1, [r4, #20]
 800ad6c:	e7ea      	b.n	800ad44 <__d2b+0x58>
 800ad6e:	a801      	add	r0, sp, #4
 800ad70:	f7ff fd59 	bl	800a826 <__lo0bits>
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	6163      	str	r3, [r4, #20]
 800ad78:	3020      	adds	r0, #32
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	e7e8      	b.n	800ad50 <__d2b+0x64>
 800ad7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad86:	6038      	str	r0, [r7, #0]
 800ad88:	6918      	ldr	r0, [r3, #16]
 800ad8a:	f7ff fd2d 	bl	800a7e8 <__hi0bits>
 800ad8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad92:	e7e5      	b.n	800ad60 <__d2b+0x74>
 800ad94:	080ed09c 	.word	0x080ed09c
 800ad98:	080ed0ad 	.word	0x080ed0ad

0800ad9c <__ssputs_r>:
 800ad9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada0:	688e      	ldr	r6, [r1, #8]
 800ada2:	461f      	mov	r7, r3
 800ada4:	42be      	cmp	r6, r7
 800ada6:	680b      	ldr	r3, [r1, #0]
 800ada8:	4682      	mov	sl, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	4690      	mov	r8, r2
 800adae:	d82d      	bhi.n	800ae0c <__ssputs_r+0x70>
 800adb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800adb8:	d026      	beq.n	800ae08 <__ssputs_r+0x6c>
 800adba:	6965      	ldr	r5, [r4, #20]
 800adbc:	6909      	ldr	r1, [r1, #16]
 800adbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adc2:	eba3 0901 	sub.w	r9, r3, r1
 800adc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adca:	1c7b      	adds	r3, r7, #1
 800adcc:	444b      	add	r3, r9
 800adce:	106d      	asrs	r5, r5, #1
 800add0:	429d      	cmp	r5, r3
 800add2:	bf38      	it	cc
 800add4:	461d      	movcc	r5, r3
 800add6:	0553      	lsls	r3, r2, #21
 800add8:	d527      	bpl.n	800ae2a <__ssputs_r+0x8e>
 800adda:	4629      	mov	r1, r5
 800addc:	f7ff fbd0 	bl	800a580 <_malloc_r>
 800ade0:	4606      	mov	r6, r0
 800ade2:	b360      	cbz	r0, 800ae3e <__ssputs_r+0xa2>
 800ade4:	6921      	ldr	r1, [r4, #16]
 800ade6:	464a      	mov	r2, r9
 800ade8:	f000 fa06 	bl	800b1f8 <memcpy>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	6126      	str	r6, [r4, #16]
 800adfa:	6165      	str	r5, [r4, #20]
 800adfc:	444e      	add	r6, r9
 800adfe:	eba5 0509 	sub.w	r5, r5, r9
 800ae02:	6026      	str	r6, [r4, #0]
 800ae04:	60a5      	str	r5, [r4, #8]
 800ae06:	463e      	mov	r6, r7
 800ae08:	42be      	cmp	r6, r7
 800ae0a:	d900      	bls.n	800ae0e <__ssputs_r+0x72>
 800ae0c:	463e      	mov	r6, r7
 800ae0e:	6820      	ldr	r0, [r4, #0]
 800ae10:	4632      	mov	r2, r6
 800ae12:	4641      	mov	r1, r8
 800ae14:	f000 f9c6 	bl	800b1a4 <memmove>
 800ae18:	68a3      	ldr	r3, [r4, #8]
 800ae1a:	1b9b      	subs	r3, r3, r6
 800ae1c:	60a3      	str	r3, [r4, #8]
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	4433      	add	r3, r6
 800ae22:	6023      	str	r3, [r4, #0]
 800ae24:	2000      	movs	r0, #0
 800ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	f000 fa36 	bl	800b29c <_realloc_r>
 800ae30:	4606      	mov	r6, r0
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1e0      	bne.n	800adf8 <__ssputs_r+0x5c>
 800ae36:	6921      	ldr	r1, [r4, #16]
 800ae38:	4650      	mov	r0, sl
 800ae3a:	f7ff fb2d 	bl	800a498 <_free_r>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	f8ca 3000 	str.w	r3, [sl]
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	e7e9      	b.n	800ae26 <__ssputs_r+0x8a>
	...

0800ae54 <_svfiprintf_r>:
 800ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	4698      	mov	r8, r3
 800ae5a:	898b      	ldrh	r3, [r1, #12]
 800ae5c:	061b      	lsls	r3, r3, #24
 800ae5e:	b09d      	sub	sp, #116	@ 0x74
 800ae60:	4607      	mov	r7, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	4614      	mov	r4, r2
 800ae66:	d510      	bpl.n	800ae8a <_svfiprintf_r+0x36>
 800ae68:	690b      	ldr	r3, [r1, #16]
 800ae6a:	b973      	cbnz	r3, 800ae8a <_svfiprintf_r+0x36>
 800ae6c:	2140      	movs	r1, #64	@ 0x40
 800ae6e:	f7ff fb87 	bl	800a580 <_malloc_r>
 800ae72:	6028      	str	r0, [r5, #0]
 800ae74:	6128      	str	r0, [r5, #16]
 800ae76:	b930      	cbnz	r0, 800ae86 <_svfiprintf_r+0x32>
 800ae78:	230c      	movs	r3, #12
 800ae7a:	603b      	str	r3, [r7, #0]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	b01d      	add	sp, #116	@ 0x74
 800ae82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae86:	2340      	movs	r3, #64	@ 0x40
 800ae88:	616b      	str	r3, [r5, #20]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae8e:	2320      	movs	r3, #32
 800ae90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae98:	2330      	movs	r3, #48	@ 0x30
 800ae9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b038 <_svfiprintf_r+0x1e4>
 800ae9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aea2:	f04f 0901 	mov.w	r9, #1
 800aea6:	4623      	mov	r3, r4
 800aea8:	469a      	mov	sl, r3
 800aeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeae:	b10a      	cbz	r2, 800aeb4 <_svfiprintf_r+0x60>
 800aeb0:	2a25      	cmp	r2, #37	@ 0x25
 800aeb2:	d1f9      	bne.n	800aea8 <_svfiprintf_r+0x54>
 800aeb4:	ebba 0b04 	subs.w	fp, sl, r4
 800aeb8:	d00b      	beq.n	800aed2 <_svfiprintf_r+0x7e>
 800aeba:	465b      	mov	r3, fp
 800aebc:	4622      	mov	r2, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	4638      	mov	r0, r7
 800aec2:	f7ff ff6b 	bl	800ad9c <__ssputs_r>
 800aec6:	3001      	adds	r0, #1
 800aec8:	f000 80a7 	beq.w	800b01a <_svfiprintf_r+0x1c6>
 800aecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aece:	445a      	add	r2, fp
 800aed0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aed2:	f89a 3000 	ldrb.w	r3, [sl]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 809f 	beq.w	800b01a <_svfiprintf_r+0x1c6>
 800aedc:	2300      	movs	r3, #0
 800aede:	f04f 32ff 	mov.w	r2, #4294967295
 800aee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee6:	f10a 0a01 	add.w	sl, sl, #1
 800aeea:	9304      	str	r3, [sp, #16]
 800aeec:	9307      	str	r3, [sp, #28]
 800aeee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aef2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aef4:	4654      	mov	r4, sl
 800aef6:	2205      	movs	r2, #5
 800aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefc:	484e      	ldr	r0, [pc, #312]	@ (800b038 <_svfiprintf_r+0x1e4>)
 800aefe:	f7f8 ff2f 	bl	8003d60 <memchr>
 800af02:	9a04      	ldr	r2, [sp, #16]
 800af04:	b9d8      	cbnz	r0, 800af3e <_svfiprintf_r+0xea>
 800af06:	06d0      	lsls	r0, r2, #27
 800af08:	bf44      	itt	mi
 800af0a:	2320      	movmi	r3, #32
 800af0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af10:	0711      	lsls	r1, r2, #28
 800af12:	bf44      	itt	mi
 800af14:	232b      	movmi	r3, #43	@ 0x2b
 800af16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af20:	d015      	beq.n	800af4e <_svfiprintf_r+0xfa>
 800af22:	9a07      	ldr	r2, [sp, #28]
 800af24:	4654      	mov	r4, sl
 800af26:	2000      	movs	r0, #0
 800af28:	f04f 0c0a 	mov.w	ip, #10
 800af2c:	4621      	mov	r1, r4
 800af2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af32:	3b30      	subs	r3, #48	@ 0x30
 800af34:	2b09      	cmp	r3, #9
 800af36:	d94b      	bls.n	800afd0 <_svfiprintf_r+0x17c>
 800af38:	b1b0      	cbz	r0, 800af68 <_svfiprintf_r+0x114>
 800af3a:	9207      	str	r2, [sp, #28]
 800af3c:	e014      	b.n	800af68 <_svfiprintf_r+0x114>
 800af3e:	eba0 0308 	sub.w	r3, r0, r8
 800af42:	fa09 f303 	lsl.w	r3, r9, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	9304      	str	r3, [sp, #16]
 800af4a:	46a2      	mov	sl, r4
 800af4c:	e7d2      	b.n	800aef4 <_svfiprintf_r+0xa0>
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	1d19      	adds	r1, r3, #4
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	9103      	str	r1, [sp, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfbb      	ittet	lt
 800af5a:	425b      	neglt	r3, r3
 800af5c:	f042 0202 	orrlt.w	r2, r2, #2
 800af60:	9307      	strge	r3, [sp, #28]
 800af62:	9307      	strlt	r3, [sp, #28]
 800af64:	bfb8      	it	lt
 800af66:	9204      	strlt	r2, [sp, #16]
 800af68:	7823      	ldrb	r3, [r4, #0]
 800af6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af6c:	d10a      	bne.n	800af84 <_svfiprintf_r+0x130>
 800af6e:	7863      	ldrb	r3, [r4, #1]
 800af70:	2b2a      	cmp	r3, #42	@ 0x2a
 800af72:	d132      	bne.n	800afda <_svfiprintf_r+0x186>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	9203      	str	r2, [sp, #12]
 800af7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af80:	3402      	adds	r4, #2
 800af82:	9305      	str	r3, [sp, #20]
 800af84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b048 <_svfiprintf_r+0x1f4>
 800af88:	7821      	ldrb	r1, [r4, #0]
 800af8a:	2203      	movs	r2, #3
 800af8c:	4650      	mov	r0, sl
 800af8e:	f7f8 fee7 	bl	8003d60 <memchr>
 800af92:	b138      	cbz	r0, 800afa4 <_svfiprintf_r+0x150>
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	eba0 000a 	sub.w	r0, r0, sl
 800af9a:	2240      	movs	r2, #64	@ 0x40
 800af9c:	4082      	lsls	r2, r0
 800af9e:	4313      	orrs	r3, r2
 800afa0:	3401      	adds	r4, #1
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa8:	4824      	ldr	r0, [pc, #144]	@ (800b03c <_svfiprintf_r+0x1e8>)
 800afaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afae:	2206      	movs	r2, #6
 800afb0:	f7f8 fed6 	bl	8003d60 <memchr>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d036      	beq.n	800b026 <_svfiprintf_r+0x1d2>
 800afb8:	4b21      	ldr	r3, [pc, #132]	@ (800b040 <_svfiprintf_r+0x1ec>)
 800afba:	bb1b      	cbnz	r3, 800b004 <_svfiprintf_r+0x1b0>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	3307      	adds	r3, #7
 800afc0:	f023 0307 	bic.w	r3, r3, #7
 800afc4:	3308      	adds	r3, #8
 800afc6:	9303      	str	r3, [sp, #12]
 800afc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afca:	4433      	add	r3, r6
 800afcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afce:	e76a      	b.n	800aea6 <_svfiprintf_r+0x52>
 800afd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afd4:	460c      	mov	r4, r1
 800afd6:	2001      	movs	r0, #1
 800afd8:	e7a8      	b.n	800af2c <_svfiprintf_r+0xd8>
 800afda:	2300      	movs	r3, #0
 800afdc:	3401      	adds	r4, #1
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	4619      	mov	r1, r3
 800afe2:	f04f 0c0a 	mov.w	ip, #10
 800afe6:	4620      	mov	r0, r4
 800afe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afec:	3a30      	subs	r2, #48	@ 0x30
 800afee:	2a09      	cmp	r2, #9
 800aff0:	d903      	bls.n	800affa <_svfiprintf_r+0x1a6>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0c6      	beq.n	800af84 <_svfiprintf_r+0x130>
 800aff6:	9105      	str	r1, [sp, #20]
 800aff8:	e7c4      	b.n	800af84 <_svfiprintf_r+0x130>
 800affa:	fb0c 2101 	mla	r1, ip, r1, r2
 800affe:	4604      	mov	r4, r0
 800b000:	2301      	movs	r3, #1
 800b002:	e7f0      	b.n	800afe6 <_svfiprintf_r+0x192>
 800b004:	ab03      	add	r3, sp, #12
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	462a      	mov	r2, r5
 800b00a:	4b0e      	ldr	r3, [pc, #56]	@ (800b044 <_svfiprintf_r+0x1f0>)
 800b00c:	a904      	add	r1, sp, #16
 800b00e:	4638      	mov	r0, r7
 800b010:	f7fd fe62 	bl	8008cd8 <_printf_float>
 800b014:	1c42      	adds	r2, r0, #1
 800b016:	4606      	mov	r6, r0
 800b018:	d1d6      	bne.n	800afc8 <_svfiprintf_r+0x174>
 800b01a:	89ab      	ldrh	r3, [r5, #12]
 800b01c:	065b      	lsls	r3, r3, #25
 800b01e:	f53f af2d 	bmi.w	800ae7c <_svfiprintf_r+0x28>
 800b022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b024:	e72c      	b.n	800ae80 <_svfiprintf_r+0x2c>
 800b026:	ab03      	add	r3, sp, #12
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	462a      	mov	r2, r5
 800b02c:	4b05      	ldr	r3, [pc, #20]	@ (800b044 <_svfiprintf_r+0x1f0>)
 800b02e:	a904      	add	r1, sp, #16
 800b030:	4638      	mov	r0, r7
 800b032:	f7fe f8e9 	bl	8009208 <_printf_i>
 800b036:	e7ed      	b.n	800b014 <_svfiprintf_r+0x1c0>
 800b038:	080ed208 	.word	0x080ed208
 800b03c:	080ed212 	.word	0x080ed212
 800b040:	08008cd9 	.word	0x08008cd9
 800b044:	0800ad9d 	.word	0x0800ad9d
 800b048:	080ed20e 	.word	0x080ed20e

0800b04c <__sflush_r>:
 800b04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	0716      	lsls	r6, r2, #28
 800b056:	4605      	mov	r5, r0
 800b058:	460c      	mov	r4, r1
 800b05a:	d454      	bmi.n	800b106 <__sflush_r+0xba>
 800b05c:	684b      	ldr	r3, [r1, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dc02      	bgt.n	800b068 <__sflush_r+0x1c>
 800b062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd48      	ble.n	800b0fa <__sflush_r+0xae>
 800b068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d045      	beq.n	800b0fa <__sflush_r+0xae>
 800b06e:	2300      	movs	r3, #0
 800b070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b074:	682f      	ldr	r7, [r5, #0]
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	602b      	str	r3, [r5, #0]
 800b07a:	d030      	beq.n	800b0de <__sflush_r+0x92>
 800b07c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	0759      	lsls	r1, r3, #29
 800b082:	d505      	bpl.n	800b090 <__sflush_r+0x44>
 800b084:	6863      	ldr	r3, [r4, #4]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b08a:	b10b      	cbz	r3, 800b090 <__sflush_r+0x44>
 800b08c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	2300      	movs	r3, #0
 800b092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b094:	6a21      	ldr	r1, [r4, #32]
 800b096:	4628      	mov	r0, r5
 800b098:	47b0      	blx	r6
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	d106      	bne.n	800b0ae <__sflush_r+0x62>
 800b0a0:	6829      	ldr	r1, [r5, #0]
 800b0a2:	291d      	cmp	r1, #29
 800b0a4:	d82b      	bhi.n	800b0fe <__sflush_r+0xb2>
 800b0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b150 <__sflush_r+0x104>)
 800b0a8:	410a      	asrs	r2, r1
 800b0aa:	07d6      	lsls	r6, r2, #31
 800b0ac:	d427      	bmi.n	800b0fe <__sflush_r+0xb2>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	6062      	str	r2, [r4, #4]
 800b0b2:	04d9      	lsls	r1, r3, #19
 800b0b4:	6922      	ldr	r2, [r4, #16]
 800b0b6:	6022      	str	r2, [r4, #0]
 800b0b8:	d504      	bpl.n	800b0c4 <__sflush_r+0x78>
 800b0ba:	1c42      	adds	r2, r0, #1
 800b0bc:	d101      	bne.n	800b0c2 <__sflush_r+0x76>
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	b903      	cbnz	r3, 800b0c4 <__sflush_r+0x78>
 800b0c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0c6:	602f      	str	r7, [r5, #0]
 800b0c8:	b1b9      	cbz	r1, 800b0fa <__sflush_r+0xae>
 800b0ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	d002      	beq.n	800b0d8 <__sflush_r+0x8c>
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f7ff f9e0 	bl	800a498 <_free_r>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0dc:	e00d      	b.n	800b0fa <__sflush_r+0xae>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b0      	blx	r6
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	1c50      	adds	r0, r2, #1
 800b0e8:	d1c9      	bne.n	800b07e <__sflush_r+0x32>
 800b0ea:	682b      	ldr	r3, [r5, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0c6      	beq.n	800b07e <__sflush_r+0x32>
 800b0f0:	2b1d      	cmp	r3, #29
 800b0f2:	d001      	beq.n	800b0f8 <__sflush_r+0xac>
 800b0f4:	2b16      	cmp	r3, #22
 800b0f6:	d11e      	bne.n	800b136 <__sflush_r+0xea>
 800b0f8:	602f      	str	r7, [r5, #0]
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	e022      	b.n	800b144 <__sflush_r+0xf8>
 800b0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b102:	b21b      	sxth	r3, r3
 800b104:	e01b      	b.n	800b13e <__sflush_r+0xf2>
 800b106:	690f      	ldr	r7, [r1, #16]
 800b108:	2f00      	cmp	r7, #0
 800b10a:	d0f6      	beq.n	800b0fa <__sflush_r+0xae>
 800b10c:	0793      	lsls	r3, r2, #30
 800b10e:	680e      	ldr	r6, [r1, #0]
 800b110:	bf08      	it	eq
 800b112:	694b      	ldreq	r3, [r1, #20]
 800b114:	600f      	str	r7, [r1, #0]
 800b116:	bf18      	it	ne
 800b118:	2300      	movne	r3, #0
 800b11a:	eba6 0807 	sub.w	r8, r6, r7
 800b11e:	608b      	str	r3, [r1, #8]
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	dde9      	ble.n	800b0fa <__sflush_r+0xae>
 800b126:	6a21      	ldr	r1, [r4, #32]
 800b128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b12a:	4643      	mov	r3, r8
 800b12c:	463a      	mov	r2, r7
 800b12e:	4628      	mov	r0, r5
 800b130:	47b0      	blx	r6
 800b132:	2800      	cmp	r0, #0
 800b134:	dc08      	bgt.n	800b148 <__sflush_r+0xfc>
 800b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b148:	4407      	add	r7, r0
 800b14a:	eba8 0800 	sub.w	r8, r8, r0
 800b14e:	e7e7      	b.n	800b120 <__sflush_r+0xd4>
 800b150:	dfbffffe 	.word	0xdfbffffe

0800b154 <_fflush_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	690b      	ldr	r3, [r1, #16]
 800b158:	4605      	mov	r5, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	b913      	cbnz	r3, 800b164 <_fflush_r+0x10>
 800b15e:	2500      	movs	r5, #0
 800b160:	4628      	mov	r0, r5
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	b118      	cbz	r0, 800b16e <_fflush_r+0x1a>
 800b166:	6a03      	ldr	r3, [r0, #32]
 800b168:	b90b      	cbnz	r3, 800b16e <_fflush_r+0x1a>
 800b16a:	f7fe f9f9 	bl	8009560 <__sinit>
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0f3      	beq.n	800b15e <_fflush_r+0xa>
 800b176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b178:	07d0      	lsls	r0, r2, #31
 800b17a:	d404      	bmi.n	800b186 <_fflush_r+0x32>
 800b17c:	0599      	lsls	r1, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_fflush_r+0x32>
 800b180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b182:	f7fe fb38 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800b186:	4628      	mov	r0, r5
 800b188:	4621      	mov	r1, r4
 800b18a:	f7ff ff5f 	bl	800b04c <__sflush_r>
 800b18e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	4605      	mov	r5, r0
 800b194:	d4e4      	bmi.n	800b160 <_fflush_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	059b      	lsls	r3, r3, #22
 800b19a:	d4e1      	bmi.n	800b160 <_fflush_r+0xc>
 800b19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b19e:	f7fe fb2b 	bl	80097f8 <__retarget_lock_release_recursive>
 800b1a2:	e7dd      	b.n	800b160 <_fflush_r+0xc>

0800b1a4 <memmove>:
 800b1a4:	4288      	cmp	r0, r1
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	eb01 0402 	add.w	r4, r1, r2
 800b1ac:	d902      	bls.n	800b1b4 <memmove+0x10>
 800b1ae:	4284      	cmp	r4, r0
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	d807      	bhi.n	800b1c4 <memmove+0x20>
 800b1b4:	1e43      	subs	r3, r0, #1
 800b1b6:	42a1      	cmp	r1, r4
 800b1b8:	d008      	beq.n	800b1cc <memmove+0x28>
 800b1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1c2:	e7f8      	b.n	800b1b6 <memmove+0x12>
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	428a      	cmp	r2, r1
 800b1ca:	d100      	bne.n	800b1ce <memmove+0x2a>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1d6:	e7f7      	b.n	800b1c8 <memmove+0x24>

0800b1d8 <_sbrk_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d06      	ldr	r5, [pc, #24]	@ (800b1f4 <_sbrk_r+0x1c>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	f7fa fce2 	bl	8005bac <_sbrk>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	d102      	bne.n	800b1f2 <_sbrk_r+0x1a>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b103      	cbz	r3, 800b1f2 <_sbrk_r+0x1a>
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	20006d94 	.word	0x20006d94

0800b1f8 <memcpy>:
 800b1f8:	440a      	add	r2, r1
 800b1fa:	4291      	cmp	r1, r2
 800b1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b200:	d100      	bne.n	800b204 <memcpy+0xc>
 800b202:	4770      	bx	lr
 800b204:	b510      	push	{r4, lr}
 800b206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b20e:	4291      	cmp	r1, r2
 800b210:	d1f9      	bne.n	800b206 <memcpy+0xe>
 800b212:	bd10      	pop	{r4, pc}

0800b214 <__assert_func>:
 800b214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b216:	4614      	mov	r4, r2
 800b218:	461a      	mov	r2, r3
 800b21a:	4b09      	ldr	r3, [pc, #36]	@ (800b240 <__assert_func+0x2c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4605      	mov	r5, r0
 800b220:	68d8      	ldr	r0, [r3, #12]
 800b222:	b954      	cbnz	r4, 800b23a <__assert_func+0x26>
 800b224:	4b07      	ldr	r3, [pc, #28]	@ (800b244 <__assert_func+0x30>)
 800b226:	461c      	mov	r4, r3
 800b228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b22c:	9100      	str	r1, [sp, #0]
 800b22e:	462b      	mov	r3, r5
 800b230:	4905      	ldr	r1, [pc, #20]	@ (800b248 <__assert_func+0x34>)
 800b232:	f000 f86f 	bl	800b314 <fiprintf>
 800b236:	f000 f87f 	bl	800b338 <abort>
 800b23a:	4b04      	ldr	r3, [pc, #16]	@ (800b24c <__assert_func+0x38>)
 800b23c:	e7f4      	b.n	800b228 <__assert_func+0x14>
 800b23e:	bf00      	nop
 800b240:	20000018 	.word	0x20000018
 800b244:	080ed25e 	.word	0x080ed25e
 800b248:	080ed230 	.word	0x080ed230
 800b24c:	080ed223 	.word	0x080ed223

0800b250 <_calloc_r>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	fba1 5402 	umull	r5, r4, r1, r2
 800b256:	b93c      	cbnz	r4, 800b268 <_calloc_r+0x18>
 800b258:	4629      	mov	r1, r5
 800b25a:	f7ff f991 	bl	800a580 <_malloc_r>
 800b25e:	4606      	mov	r6, r0
 800b260:	b928      	cbnz	r0, 800b26e <_calloc_r+0x1e>
 800b262:	2600      	movs	r6, #0
 800b264:	4630      	mov	r0, r6
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	220c      	movs	r2, #12
 800b26a:	6002      	str	r2, [r0, #0]
 800b26c:	e7f9      	b.n	800b262 <_calloc_r+0x12>
 800b26e:	462a      	mov	r2, r5
 800b270:	4621      	mov	r1, r4
 800b272:	f7fe fa42 	bl	80096fa <memset>
 800b276:	e7f5      	b.n	800b264 <_calloc_r+0x14>

0800b278 <__ascii_mbtowc>:
 800b278:	b082      	sub	sp, #8
 800b27a:	b901      	cbnz	r1, 800b27e <__ascii_mbtowc+0x6>
 800b27c:	a901      	add	r1, sp, #4
 800b27e:	b142      	cbz	r2, 800b292 <__ascii_mbtowc+0x1a>
 800b280:	b14b      	cbz	r3, 800b296 <__ascii_mbtowc+0x1e>
 800b282:	7813      	ldrb	r3, [r2, #0]
 800b284:	600b      	str	r3, [r1, #0]
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	1e10      	subs	r0, r2, #0
 800b28a:	bf18      	it	ne
 800b28c:	2001      	movne	r0, #1
 800b28e:	b002      	add	sp, #8
 800b290:	4770      	bx	lr
 800b292:	4610      	mov	r0, r2
 800b294:	e7fb      	b.n	800b28e <__ascii_mbtowc+0x16>
 800b296:	f06f 0001 	mvn.w	r0, #1
 800b29a:	e7f8      	b.n	800b28e <__ascii_mbtowc+0x16>

0800b29c <_realloc_r>:
 800b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	4615      	mov	r5, r2
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	b921      	cbnz	r1, 800b2b2 <_realloc_r+0x16>
 800b2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	f7ff b967 	b.w	800a580 <_malloc_r>
 800b2b2:	b92a      	cbnz	r2, 800b2c0 <_realloc_r+0x24>
 800b2b4:	f7ff f8f0 	bl	800a498 <_free_r>
 800b2b8:	2400      	movs	r4, #0
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c0:	f000 f841 	bl	800b346 <_malloc_usable_size_r>
 800b2c4:	4285      	cmp	r5, r0
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	d802      	bhi.n	800b2d0 <_realloc_r+0x34>
 800b2ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2ce:	d8f4      	bhi.n	800b2ba <_realloc_r+0x1e>
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f7ff f954 	bl	800a580 <_malloc_r>
 800b2d8:	4607      	mov	r7, r0
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d0ec      	beq.n	800b2b8 <_realloc_r+0x1c>
 800b2de:	42b5      	cmp	r5, r6
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	bf28      	it	cs
 800b2e6:	4632      	movcs	r2, r6
 800b2e8:	f7ff ff86 	bl	800b1f8 <memcpy>
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f7ff f8d2 	bl	800a498 <_free_r>
 800b2f4:	463c      	mov	r4, r7
 800b2f6:	e7e0      	b.n	800b2ba <_realloc_r+0x1e>

0800b2f8 <__ascii_wctomb>:
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	4608      	mov	r0, r1
 800b2fc:	b141      	cbz	r1, 800b310 <__ascii_wctomb+0x18>
 800b2fe:	2aff      	cmp	r2, #255	@ 0xff
 800b300:	d904      	bls.n	800b30c <__ascii_wctomb+0x14>
 800b302:	228a      	movs	r2, #138	@ 0x8a
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	f04f 30ff 	mov.w	r0, #4294967295
 800b30a:	4770      	bx	lr
 800b30c:	700a      	strb	r2, [r1, #0]
 800b30e:	2001      	movs	r0, #1
 800b310:	4770      	bx	lr
	...

0800b314 <fiprintf>:
 800b314:	b40e      	push	{r1, r2, r3}
 800b316:	b503      	push	{r0, r1, lr}
 800b318:	4601      	mov	r1, r0
 800b31a:	ab03      	add	r3, sp, #12
 800b31c:	4805      	ldr	r0, [pc, #20]	@ (800b334 <fiprintf+0x20>)
 800b31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b322:	6800      	ldr	r0, [r0, #0]
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	f000 f83f 	bl	800b3a8 <_vfiprintf_r>
 800b32a:	b002      	add	sp, #8
 800b32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b330:	b003      	add	sp, #12
 800b332:	4770      	bx	lr
 800b334:	20000018 	.word	0x20000018

0800b338 <abort>:
 800b338:	b508      	push	{r3, lr}
 800b33a:	2006      	movs	r0, #6
 800b33c:	f000 fa08 	bl	800b750 <raise>
 800b340:	2001      	movs	r0, #1
 800b342:	f7fa fbbb 	bl	8005abc <_exit>

0800b346 <_malloc_usable_size_r>:
 800b346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b34a:	1f18      	subs	r0, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bfbc      	itt	lt
 800b350:	580b      	ldrlt	r3, [r1, r0]
 800b352:	18c0      	addlt	r0, r0, r3
 800b354:	4770      	bx	lr

0800b356 <__sfputc_r>:
 800b356:	6893      	ldr	r3, [r2, #8]
 800b358:	3b01      	subs	r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	b410      	push	{r4}
 800b35e:	6093      	str	r3, [r2, #8]
 800b360:	da08      	bge.n	800b374 <__sfputc_r+0x1e>
 800b362:	6994      	ldr	r4, [r2, #24]
 800b364:	42a3      	cmp	r3, r4
 800b366:	db01      	blt.n	800b36c <__sfputc_r+0x16>
 800b368:	290a      	cmp	r1, #10
 800b36a:	d103      	bne.n	800b374 <__sfputc_r+0x1e>
 800b36c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b370:	f000 b932 	b.w	800b5d8 <__swbuf_r>
 800b374:	6813      	ldr	r3, [r2, #0]
 800b376:	1c58      	adds	r0, r3, #1
 800b378:	6010      	str	r0, [r2, #0]
 800b37a:	7019      	strb	r1, [r3, #0]
 800b37c:	4608      	mov	r0, r1
 800b37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <__sfputs_r>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	4614      	mov	r4, r2
 800b38c:	18d5      	adds	r5, r2, r3
 800b38e:	42ac      	cmp	r4, r5
 800b390:	d101      	bne.n	800b396 <__sfputs_r+0x12>
 800b392:	2000      	movs	r0, #0
 800b394:	e007      	b.n	800b3a6 <__sfputs_r+0x22>
 800b396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39a:	463a      	mov	r2, r7
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7ff ffda 	bl	800b356 <__sfputc_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d1f3      	bne.n	800b38e <__sfputs_r+0xa>
 800b3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3a8 <_vfiprintf_r>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	b09d      	sub	sp, #116	@ 0x74
 800b3b0:	4614      	mov	r4, r2
 800b3b2:	4698      	mov	r8, r3
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	b118      	cbz	r0, 800b3c0 <_vfiprintf_r+0x18>
 800b3b8:	6a03      	ldr	r3, [r0, #32]
 800b3ba:	b90b      	cbnz	r3, 800b3c0 <_vfiprintf_r+0x18>
 800b3bc:	f7fe f8d0 	bl	8009560 <__sinit>
 800b3c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3c2:	07d9      	lsls	r1, r3, #31
 800b3c4:	d405      	bmi.n	800b3d2 <_vfiprintf_r+0x2a>
 800b3c6:	89ab      	ldrh	r3, [r5, #12]
 800b3c8:	059a      	lsls	r2, r3, #22
 800b3ca:	d402      	bmi.n	800b3d2 <_vfiprintf_r+0x2a>
 800b3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ce:	f7fe fa12 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800b3d2:	89ab      	ldrh	r3, [r5, #12]
 800b3d4:	071b      	lsls	r3, r3, #28
 800b3d6:	d501      	bpl.n	800b3dc <_vfiprintf_r+0x34>
 800b3d8:	692b      	ldr	r3, [r5, #16]
 800b3da:	b99b      	cbnz	r3, 800b404 <_vfiprintf_r+0x5c>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f000 f938 	bl	800b654 <__swsetup_r>
 800b3e4:	b170      	cbz	r0, 800b404 <_vfiprintf_r+0x5c>
 800b3e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3e8:	07dc      	lsls	r4, r3, #31
 800b3ea:	d504      	bpl.n	800b3f6 <_vfiprintf_r+0x4e>
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	b01d      	add	sp, #116	@ 0x74
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	0598      	lsls	r0, r3, #22
 800b3fa:	d4f7      	bmi.n	800b3ec <_vfiprintf_r+0x44>
 800b3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3fe:	f7fe f9fb 	bl	80097f8 <__retarget_lock_release_recursive>
 800b402:	e7f3      	b.n	800b3ec <_vfiprintf_r+0x44>
 800b404:	2300      	movs	r3, #0
 800b406:	9309      	str	r3, [sp, #36]	@ 0x24
 800b408:	2320      	movs	r3, #32
 800b40a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b40e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b412:	2330      	movs	r3, #48	@ 0x30
 800b414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5c4 <_vfiprintf_r+0x21c>
 800b418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b41c:	f04f 0901 	mov.w	r9, #1
 800b420:	4623      	mov	r3, r4
 800b422:	469a      	mov	sl, r3
 800b424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b428:	b10a      	cbz	r2, 800b42e <_vfiprintf_r+0x86>
 800b42a:	2a25      	cmp	r2, #37	@ 0x25
 800b42c:	d1f9      	bne.n	800b422 <_vfiprintf_r+0x7a>
 800b42e:	ebba 0b04 	subs.w	fp, sl, r4
 800b432:	d00b      	beq.n	800b44c <_vfiprintf_r+0xa4>
 800b434:	465b      	mov	r3, fp
 800b436:	4622      	mov	r2, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7ff ffa2 	bl	800b384 <__sfputs_r>
 800b440:	3001      	adds	r0, #1
 800b442:	f000 80a7 	beq.w	800b594 <_vfiprintf_r+0x1ec>
 800b446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b448:	445a      	add	r2, fp
 800b44a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b44c:	f89a 3000 	ldrb.w	r3, [sl]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 809f 	beq.w	800b594 <_vfiprintf_r+0x1ec>
 800b456:	2300      	movs	r3, #0
 800b458:	f04f 32ff 	mov.w	r2, #4294967295
 800b45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b460:	f10a 0a01 	add.w	sl, sl, #1
 800b464:	9304      	str	r3, [sp, #16]
 800b466:	9307      	str	r3, [sp, #28]
 800b468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b46c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b46e:	4654      	mov	r4, sl
 800b470:	2205      	movs	r2, #5
 800b472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b476:	4853      	ldr	r0, [pc, #332]	@ (800b5c4 <_vfiprintf_r+0x21c>)
 800b478:	f7f8 fc72 	bl	8003d60 <memchr>
 800b47c:	9a04      	ldr	r2, [sp, #16]
 800b47e:	b9d8      	cbnz	r0, 800b4b8 <_vfiprintf_r+0x110>
 800b480:	06d1      	lsls	r1, r2, #27
 800b482:	bf44      	itt	mi
 800b484:	2320      	movmi	r3, #32
 800b486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48a:	0713      	lsls	r3, r2, #28
 800b48c:	bf44      	itt	mi
 800b48e:	232b      	movmi	r3, #43	@ 0x2b
 800b490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b494:	f89a 3000 	ldrb.w	r3, [sl]
 800b498:	2b2a      	cmp	r3, #42	@ 0x2a
 800b49a:	d015      	beq.n	800b4c8 <_vfiprintf_r+0x120>
 800b49c:	9a07      	ldr	r2, [sp, #28]
 800b49e:	4654      	mov	r4, sl
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	f04f 0c0a 	mov.w	ip, #10
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ac:	3b30      	subs	r3, #48	@ 0x30
 800b4ae:	2b09      	cmp	r3, #9
 800b4b0:	d94b      	bls.n	800b54a <_vfiprintf_r+0x1a2>
 800b4b2:	b1b0      	cbz	r0, 800b4e2 <_vfiprintf_r+0x13a>
 800b4b4:	9207      	str	r2, [sp, #28]
 800b4b6:	e014      	b.n	800b4e2 <_vfiprintf_r+0x13a>
 800b4b8:	eba0 0308 	sub.w	r3, r0, r8
 800b4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	46a2      	mov	sl, r4
 800b4c6:	e7d2      	b.n	800b46e <_vfiprintf_r+0xc6>
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	1d19      	adds	r1, r3, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	9103      	str	r1, [sp, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	bfbb      	ittet	lt
 800b4d4:	425b      	neglt	r3, r3
 800b4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4da:	9307      	strge	r3, [sp, #28]
 800b4dc:	9307      	strlt	r3, [sp, #28]
 800b4de:	bfb8      	it	lt
 800b4e0:	9204      	strlt	r2, [sp, #16]
 800b4e2:	7823      	ldrb	r3, [r4, #0]
 800b4e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4e6:	d10a      	bne.n	800b4fe <_vfiprintf_r+0x156>
 800b4e8:	7863      	ldrb	r3, [r4, #1]
 800b4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ec:	d132      	bne.n	800b554 <_vfiprintf_r+0x1ac>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	1d1a      	adds	r2, r3, #4
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	9203      	str	r2, [sp, #12]
 800b4f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4fa:	3402      	adds	r4, #2
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5d4 <_vfiprintf_r+0x22c>
 800b502:	7821      	ldrb	r1, [r4, #0]
 800b504:	2203      	movs	r2, #3
 800b506:	4650      	mov	r0, sl
 800b508:	f7f8 fc2a 	bl	8003d60 <memchr>
 800b50c:	b138      	cbz	r0, 800b51e <_vfiprintf_r+0x176>
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	eba0 000a 	sub.w	r0, r0, sl
 800b514:	2240      	movs	r2, #64	@ 0x40
 800b516:	4082      	lsls	r2, r0
 800b518:	4313      	orrs	r3, r2
 800b51a:	3401      	adds	r4, #1
 800b51c:	9304      	str	r3, [sp, #16]
 800b51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b522:	4829      	ldr	r0, [pc, #164]	@ (800b5c8 <_vfiprintf_r+0x220>)
 800b524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b528:	2206      	movs	r2, #6
 800b52a:	f7f8 fc19 	bl	8003d60 <memchr>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d03f      	beq.n	800b5b2 <_vfiprintf_r+0x20a>
 800b532:	4b26      	ldr	r3, [pc, #152]	@ (800b5cc <_vfiprintf_r+0x224>)
 800b534:	bb1b      	cbnz	r3, 800b57e <_vfiprintf_r+0x1d6>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	3307      	adds	r3, #7
 800b53a:	f023 0307 	bic.w	r3, r3, #7
 800b53e:	3308      	adds	r3, #8
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b544:	443b      	add	r3, r7
 800b546:	9309      	str	r3, [sp, #36]	@ 0x24
 800b548:	e76a      	b.n	800b420 <_vfiprintf_r+0x78>
 800b54a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b54e:	460c      	mov	r4, r1
 800b550:	2001      	movs	r0, #1
 800b552:	e7a8      	b.n	800b4a6 <_vfiprintf_r+0xfe>
 800b554:	2300      	movs	r3, #0
 800b556:	3401      	adds	r4, #1
 800b558:	9305      	str	r3, [sp, #20]
 800b55a:	4619      	mov	r1, r3
 800b55c:	f04f 0c0a 	mov.w	ip, #10
 800b560:	4620      	mov	r0, r4
 800b562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b566:	3a30      	subs	r2, #48	@ 0x30
 800b568:	2a09      	cmp	r2, #9
 800b56a:	d903      	bls.n	800b574 <_vfiprintf_r+0x1cc>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0c6      	beq.n	800b4fe <_vfiprintf_r+0x156>
 800b570:	9105      	str	r1, [sp, #20]
 800b572:	e7c4      	b.n	800b4fe <_vfiprintf_r+0x156>
 800b574:	fb0c 2101 	mla	r1, ip, r1, r2
 800b578:	4604      	mov	r4, r0
 800b57a:	2301      	movs	r3, #1
 800b57c:	e7f0      	b.n	800b560 <_vfiprintf_r+0x1b8>
 800b57e:	ab03      	add	r3, sp, #12
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	462a      	mov	r2, r5
 800b584:	4b12      	ldr	r3, [pc, #72]	@ (800b5d0 <_vfiprintf_r+0x228>)
 800b586:	a904      	add	r1, sp, #16
 800b588:	4630      	mov	r0, r6
 800b58a:	f7fd fba5 	bl	8008cd8 <_printf_float>
 800b58e:	4607      	mov	r7, r0
 800b590:	1c78      	adds	r0, r7, #1
 800b592:	d1d6      	bne.n	800b542 <_vfiprintf_r+0x19a>
 800b594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b596:	07d9      	lsls	r1, r3, #31
 800b598:	d405      	bmi.n	800b5a6 <_vfiprintf_r+0x1fe>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	059a      	lsls	r2, r3, #22
 800b59e:	d402      	bmi.n	800b5a6 <_vfiprintf_r+0x1fe>
 800b5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5a2:	f7fe f929 	bl	80097f8 <__retarget_lock_release_recursive>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	065b      	lsls	r3, r3, #25
 800b5aa:	f53f af1f 	bmi.w	800b3ec <_vfiprintf_r+0x44>
 800b5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5b0:	e71e      	b.n	800b3f0 <_vfiprintf_r+0x48>
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	462a      	mov	r2, r5
 800b5b8:	4b05      	ldr	r3, [pc, #20]	@ (800b5d0 <_vfiprintf_r+0x228>)
 800b5ba:	a904      	add	r1, sp, #16
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7fd fe23 	bl	8009208 <_printf_i>
 800b5c2:	e7e4      	b.n	800b58e <_vfiprintf_r+0x1e6>
 800b5c4:	080ed208 	.word	0x080ed208
 800b5c8:	080ed212 	.word	0x080ed212
 800b5cc:	08008cd9 	.word	0x08008cd9
 800b5d0:	0800b385 	.word	0x0800b385
 800b5d4:	080ed20e 	.word	0x080ed20e

0800b5d8 <__swbuf_r>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	460e      	mov	r6, r1
 800b5dc:	4614      	mov	r4, r2
 800b5de:	4605      	mov	r5, r0
 800b5e0:	b118      	cbz	r0, 800b5ea <__swbuf_r+0x12>
 800b5e2:	6a03      	ldr	r3, [r0, #32]
 800b5e4:	b90b      	cbnz	r3, 800b5ea <__swbuf_r+0x12>
 800b5e6:	f7fd ffbb 	bl	8009560 <__sinit>
 800b5ea:	69a3      	ldr	r3, [r4, #24]
 800b5ec:	60a3      	str	r3, [r4, #8]
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	071a      	lsls	r2, r3, #28
 800b5f2:	d501      	bpl.n	800b5f8 <__swbuf_r+0x20>
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	b943      	cbnz	r3, 800b60a <__swbuf_r+0x32>
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	f000 f82a 	bl	800b654 <__swsetup_r>
 800b600:	b118      	cbz	r0, 800b60a <__swbuf_r+0x32>
 800b602:	f04f 37ff 	mov.w	r7, #4294967295
 800b606:	4638      	mov	r0, r7
 800b608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	6922      	ldr	r2, [r4, #16]
 800b60e:	1a98      	subs	r0, r3, r2
 800b610:	6963      	ldr	r3, [r4, #20]
 800b612:	b2f6      	uxtb	r6, r6
 800b614:	4283      	cmp	r3, r0
 800b616:	4637      	mov	r7, r6
 800b618:	dc05      	bgt.n	800b626 <__swbuf_r+0x4e>
 800b61a:	4621      	mov	r1, r4
 800b61c:	4628      	mov	r0, r5
 800b61e:	f7ff fd99 	bl	800b154 <_fflush_r>
 800b622:	2800      	cmp	r0, #0
 800b624:	d1ed      	bne.n	800b602 <__swbuf_r+0x2a>
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	3b01      	subs	r3, #1
 800b62a:	60a3      	str	r3, [r4, #8]
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	701e      	strb	r6, [r3, #0]
 800b634:	6962      	ldr	r2, [r4, #20]
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	429a      	cmp	r2, r3
 800b63a:	d004      	beq.n	800b646 <__swbuf_r+0x6e>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	07db      	lsls	r3, r3, #31
 800b640:	d5e1      	bpl.n	800b606 <__swbuf_r+0x2e>
 800b642:	2e0a      	cmp	r6, #10
 800b644:	d1df      	bne.n	800b606 <__swbuf_r+0x2e>
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f7ff fd83 	bl	800b154 <_fflush_r>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0d9      	beq.n	800b606 <__swbuf_r+0x2e>
 800b652:	e7d6      	b.n	800b602 <__swbuf_r+0x2a>

0800b654 <__swsetup_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4b29      	ldr	r3, [pc, #164]	@ (800b6fc <__swsetup_r+0xa8>)
 800b658:	4605      	mov	r5, r0
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	460c      	mov	r4, r1
 800b65e:	b118      	cbz	r0, 800b668 <__swsetup_r+0x14>
 800b660:	6a03      	ldr	r3, [r0, #32]
 800b662:	b90b      	cbnz	r3, 800b668 <__swsetup_r+0x14>
 800b664:	f7fd ff7c 	bl	8009560 <__sinit>
 800b668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b66c:	0719      	lsls	r1, r3, #28
 800b66e:	d422      	bmi.n	800b6b6 <__swsetup_r+0x62>
 800b670:	06da      	lsls	r2, r3, #27
 800b672:	d407      	bmi.n	800b684 <__swsetup_r+0x30>
 800b674:	2209      	movs	r2, #9
 800b676:	602a      	str	r2, [r5, #0]
 800b678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	e033      	b.n	800b6ec <__swsetup_r+0x98>
 800b684:	0758      	lsls	r0, r3, #29
 800b686:	d512      	bpl.n	800b6ae <__swsetup_r+0x5a>
 800b688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b68a:	b141      	cbz	r1, 800b69e <__swsetup_r+0x4a>
 800b68c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b690:	4299      	cmp	r1, r3
 800b692:	d002      	beq.n	800b69a <__swsetup_r+0x46>
 800b694:	4628      	mov	r0, r5
 800b696:	f7fe feff 	bl	800a498 <_free_r>
 800b69a:	2300      	movs	r3, #0
 800b69c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f043 0308 	orr.w	r3, r3, #8
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	b94b      	cbnz	r3, 800b6ce <__swsetup_r+0x7a>
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6c4:	d003      	beq.n	800b6ce <__swsetup_r+0x7a>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f000 f883 	bl	800b7d4 <__smakebuf_r>
 800b6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d2:	f013 0201 	ands.w	r2, r3, #1
 800b6d6:	d00a      	beq.n	800b6ee <__swsetup_r+0x9a>
 800b6d8:	2200      	movs	r2, #0
 800b6da:	60a2      	str	r2, [r4, #8]
 800b6dc:	6962      	ldr	r2, [r4, #20]
 800b6de:	4252      	negs	r2, r2
 800b6e0:	61a2      	str	r2, [r4, #24]
 800b6e2:	6922      	ldr	r2, [r4, #16]
 800b6e4:	b942      	cbnz	r2, 800b6f8 <__swsetup_r+0xa4>
 800b6e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6ea:	d1c5      	bne.n	800b678 <__swsetup_r+0x24>
 800b6ec:	bd38      	pop	{r3, r4, r5, pc}
 800b6ee:	0799      	lsls	r1, r3, #30
 800b6f0:	bf58      	it	pl
 800b6f2:	6962      	ldrpl	r2, [r4, #20]
 800b6f4:	60a2      	str	r2, [r4, #8]
 800b6f6:	e7f4      	b.n	800b6e2 <__swsetup_r+0x8e>
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	e7f7      	b.n	800b6ec <__swsetup_r+0x98>
 800b6fc:	20000018 	.word	0x20000018

0800b700 <_raise_r>:
 800b700:	291f      	cmp	r1, #31
 800b702:	b538      	push	{r3, r4, r5, lr}
 800b704:	4605      	mov	r5, r0
 800b706:	460c      	mov	r4, r1
 800b708:	d904      	bls.n	800b714 <_raise_r+0x14>
 800b70a:	2316      	movs	r3, #22
 800b70c:	6003      	str	r3, [r0, #0]
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b716:	b112      	cbz	r2, 800b71e <_raise_r+0x1e>
 800b718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b71c:	b94b      	cbnz	r3, 800b732 <_raise_r+0x32>
 800b71e:	4628      	mov	r0, r5
 800b720:	f000 f830 	bl	800b784 <_getpid_r>
 800b724:	4622      	mov	r2, r4
 800b726:	4601      	mov	r1, r0
 800b728:	4628      	mov	r0, r5
 800b72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b72e:	f000 b817 	b.w	800b760 <_kill_r>
 800b732:	2b01      	cmp	r3, #1
 800b734:	d00a      	beq.n	800b74c <_raise_r+0x4c>
 800b736:	1c59      	adds	r1, r3, #1
 800b738:	d103      	bne.n	800b742 <_raise_r+0x42>
 800b73a:	2316      	movs	r3, #22
 800b73c:	6003      	str	r3, [r0, #0]
 800b73e:	2001      	movs	r0, #1
 800b740:	e7e7      	b.n	800b712 <_raise_r+0x12>
 800b742:	2100      	movs	r1, #0
 800b744:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b748:	4620      	mov	r0, r4
 800b74a:	4798      	blx	r3
 800b74c:	2000      	movs	r0, #0
 800b74e:	e7e0      	b.n	800b712 <_raise_r+0x12>

0800b750 <raise>:
 800b750:	4b02      	ldr	r3, [pc, #8]	@ (800b75c <raise+0xc>)
 800b752:	4601      	mov	r1, r0
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	f7ff bfd3 	b.w	800b700 <_raise_r>
 800b75a:	bf00      	nop
 800b75c:	20000018 	.word	0x20000018

0800b760 <_kill_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	@ (800b780 <_kill_r+0x20>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f7fa f995 	bl	8005a9c <_kill>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	d102      	bne.n	800b77c <_kill_r+0x1c>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b103      	cbz	r3, 800b77c <_kill_r+0x1c>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
 800b77e:	bf00      	nop
 800b780:	20006d94 	.word	0x20006d94

0800b784 <_getpid_r>:
 800b784:	f7fa b982 	b.w	8005a8c <_getpid>

0800b788 <__swhatbuf_r>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	460c      	mov	r4, r1
 800b78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b790:	2900      	cmp	r1, #0
 800b792:	b096      	sub	sp, #88	@ 0x58
 800b794:	4615      	mov	r5, r2
 800b796:	461e      	mov	r6, r3
 800b798:	da0d      	bge.n	800b7b6 <__swhatbuf_r+0x2e>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7a0:	f04f 0100 	mov.w	r1, #0
 800b7a4:	bf14      	ite	ne
 800b7a6:	2340      	movne	r3, #64	@ 0x40
 800b7a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	6031      	str	r1, [r6, #0]
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	b016      	add	sp, #88	@ 0x58
 800b7b4:	bd70      	pop	{r4, r5, r6, pc}
 800b7b6:	466a      	mov	r2, sp
 800b7b8:	f000 f848 	bl	800b84c <_fstat_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	dbec      	blt.n	800b79a <__swhatbuf_r+0x12>
 800b7c0:	9901      	ldr	r1, [sp, #4]
 800b7c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7ca:	4259      	negs	r1, r3
 800b7cc:	4159      	adcs	r1, r3
 800b7ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7d2:	e7eb      	b.n	800b7ac <__swhatbuf_r+0x24>

0800b7d4 <__smakebuf_r>:
 800b7d4:	898b      	ldrh	r3, [r1, #12]
 800b7d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7d8:	079d      	lsls	r5, r3, #30
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460c      	mov	r4, r1
 800b7de:	d507      	bpl.n	800b7f0 <__smakebuf_r+0x1c>
 800b7e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	6123      	str	r3, [r4, #16]
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	6163      	str	r3, [r4, #20]
 800b7ec:	b003      	add	sp, #12
 800b7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f0:	ab01      	add	r3, sp, #4
 800b7f2:	466a      	mov	r2, sp
 800b7f4:	f7ff ffc8 	bl	800b788 <__swhatbuf_r>
 800b7f8:	9f00      	ldr	r7, [sp, #0]
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7fe febe 	bl	800a580 <_malloc_r>
 800b804:	b948      	cbnz	r0, 800b81a <__smakebuf_r+0x46>
 800b806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b80a:	059a      	lsls	r2, r3, #22
 800b80c:	d4ee      	bmi.n	800b7ec <__smakebuf_r+0x18>
 800b80e:	f023 0303 	bic.w	r3, r3, #3
 800b812:	f043 0302 	orr.w	r3, r3, #2
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	e7e2      	b.n	800b7e0 <__smakebuf_r+0xc>
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	6020      	str	r0, [r4, #0]
 800b81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b82a:	b15b      	cbz	r3, 800b844 <__smakebuf_r+0x70>
 800b82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f81d 	bl	800b870 <_isatty_r>
 800b836:	b128      	cbz	r0, 800b844 <__smakebuf_r+0x70>
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f023 0303 	bic.w	r3, r3, #3
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	431d      	orrs	r5, r3
 800b848:	81a5      	strh	r5, [r4, #12]
 800b84a:	e7cf      	b.n	800b7ec <__smakebuf_r+0x18>

0800b84c <_fstat_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d07      	ldr	r5, [pc, #28]	@ (800b86c <_fstat_r+0x20>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	4611      	mov	r1, r2
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	f7fa f97f 	bl	8005b5c <_fstat>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d102      	bne.n	800b868 <_fstat_r+0x1c>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	b103      	cbz	r3, 800b868 <_fstat_r+0x1c>
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	bd38      	pop	{r3, r4, r5, pc}
 800b86a:	bf00      	nop
 800b86c:	20006d94 	.word	0x20006d94

0800b870 <_isatty_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d06      	ldr	r5, [pc, #24]	@ (800b88c <_isatty_r+0x1c>)
 800b874:	2300      	movs	r3, #0
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	f7fa f97e 	bl	8005b7c <_isatty>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_isatty_r+0x1a>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_isatty_r+0x1a>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20006d94 	.word	0x20006d94

0800b890 <cosf>:
 800b890:	ee10 3a10 	vmov	r3, s0
 800b894:	b507      	push	{r0, r1, r2, lr}
 800b896:	4a1e      	ldr	r2, [pc, #120]	@ (800b910 <cosf+0x80>)
 800b898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d806      	bhi.n	800b8ae <cosf+0x1e>
 800b8a0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b914 <cosf+0x84>
 800b8a4:	b003      	add	sp, #12
 800b8a6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8aa:	f000 b835 	b.w	800b918 <__kernel_cosf>
 800b8ae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b8b2:	d304      	bcc.n	800b8be <cosf+0x2e>
 800b8b4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b8b8:	b003      	add	sp, #12
 800b8ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8be:	4668      	mov	r0, sp
 800b8c0:	f000 f8ca 	bl	800ba58 <__ieee754_rem_pio2f>
 800b8c4:	f000 0003 	and.w	r0, r0, #3
 800b8c8:	2801      	cmp	r0, #1
 800b8ca:	d009      	beq.n	800b8e0 <cosf+0x50>
 800b8cc:	2802      	cmp	r0, #2
 800b8ce:	d010      	beq.n	800b8f2 <cosf+0x62>
 800b8d0:	b9b0      	cbnz	r0, 800b900 <cosf+0x70>
 800b8d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8d6:	ed9d 0a00 	vldr	s0, [sp]
 800b8da:	f000 f81d 	bl	800b918 <__kernel_cosf>
 800b8de:	e7eb      	b.n	800b8b8 <cosf+0x28>
 800b8e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8e4:	ed9d 0a00 	vldr	s0, [sp]
 800b8e8:	f000 f86e 	bl	800b9c8 <__kernel_sinf>
 800b8ec:	eeb1 0a40 	vneg.f32	s0, s0
 800b8f0:	e7e2      	b.n	800b8b8 <cosf+0x28>
 800b8f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8f6:	ed9d 0a00 	vldr	s0, [sp]
 800b8fa:	f000 f80d 	bl	800b918 <__kernel_cosf>
 800b8fe:	e7f5      	b.n	800b8ec <cosf+0x5c>
 800b900:	eddd 0a01 	vldr	s1, [sp, #4]
 800b904:	ed9d 0a00 	vldr	s0, [sp]
 800b908:	2001      	movs	r0, #1
 800b90a:	f000 f85d 	bl	800b9c8 <__kernel_sinf>
 800b90e:	e7d3      	b.n	800b8b8 <cosf+0x28>
 800b910:	3f490fd8 	.word	0x3f490fd8
 800b914:	00000000 	.word	0x00000000

0800b918 <__kernel_cosf>:
 800b918:	ee10 3a10 	vmov	r3, s0
 800b91c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b920:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b924:	eef0 6a40 	vmov.f32	s13, s0
 800b928:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b92c:	d204      	bcs.n	800b938 <__kernel_cosf+0x20>
 800b92e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b932:	ee17 2a90 	vmov	r2, s15
 800b936:	b342      	cbz	r2, 800b98a <__kernel_cosf+0x72>
 800b938:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b93c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b9a8 <__kernel_cosf+0x90>
 800b940:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b9ac <__kernel_cosf+0x94>
 800b944:	4a1a      	ldr	r2, [pc, #104]	@ (800b9b0 <__kernel_cosf+0x98>)
 800b946:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b94a:	4293      	cmp	r3, r2
 800b94c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b9b4 <__kernel_cosf+0x9c>
 800b950:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b954:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b9b8 <__kernel_cosf+0xa0>
 800b958:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b95c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b9bc <__kernel_cosf+0xa4>
 800b960:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b964:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b9c0 <__kernel_cosf+0xa8>
 800b968:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b96c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b970:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b974:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b978:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b980:	d804      	bhi.n	800b98c <__kernel_cosf+0x74>
 800b982:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b986:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b98a:	4770      	bx	lr
 800b98c:	4a0d      	ldr	r2, [pc, #52]	@ (800b9c4 <__kernel_cosf+0xac>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	bf9a      	itte	ls
 800b992:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b996:	ee07 3a10 	vmovls	s14, r3
 800b99a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b99e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b9a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9a6:	e7ec      	b.n	800b982 <__kernel_cosf+0x6a>
 800b9a8:	ad47d74e 	.word	0xad47d74e
 800b9ac:	310f74f6 	.word	0x310f74f6
 800b9b0:	3e999999 	.word	0x3e999999
 800b9b4:	b493f27c 	.word	0xb493f27c
 800b9b8:	37d00d01 	.word	0x37d00d01
 800b9bc:	bab60b61 	.word	0xbab60b61
 800b9c0:	3d2aaaab 	.word	0x3d2aaaab
 800b9c4:	3f480000 	.word	0x3f480000

0800b9c8 <__kernel_sinf>:
 800b9c8:	ee10 3a10 	vmov	r3, s0
 800b9cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b9d4:	d204      	bcs.n	800b9e0 <__kernel_sinf+0x18>
 800b9d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b9da:	ee17 3a90 	vmov	r3, s15
 800b9de:	b35b      	cbz	r3, 800ba38 <__kernel_sinf+0x70>
 800b9e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b9e4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ba3c <__kernel_sinf+0x74>
 800b9e8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ba40 <__kernel_sinf+0x78>
 800b9ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b9f0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ba44 <__kernel_sinf+0x7c>
 800b9f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9f8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ba48 <__kernel_sinf+0x80>
 800b9fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ba00:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ba4c <__kernel_sinf+0x84>
 800ba04:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ba08:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba0c:	b930      	cbnz	r0, 800ba1c <__kernel_sinf+0x54>
 800ba0e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ba50 <__kernel_sinf+0x88>
 800ba12:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ba16:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ba1a:	4770      	bx	lr
 800ba1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ba20:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ba24:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ba28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ba2c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ba54 <__kernel_sinf+0x8c>
 800ba30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ba34:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ba40:	b2d72f34 	.word	0xb2d72f34
 800ba44:	3638ef1b 	.word	0x3638ef1b
 800ba48:	b9500d01 	.word	0xb9500d01
 800ba4c:	3c088889 	.word	0x3c088889
 800ba50:	be2aaaab 	.word	0xbe2aaaab
 800ba54:	3e2aaaab 	.word	0x3e2aaaab

0800ba58 <__ieee754_rem_pio2f>:
 800ba58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba5a:	ee10 6a10 	vmov	r6, s0
 800ba5e:	4b88      	ldr	r3, [pc, #544]	@ (800bc80 <__ieee754_rem_pio2f+0x228>)
 800ba60:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ba64:	429d      	cmp	r5, r3
 800ba66:	b087      	sub	sp, #28
 800ba68:	4604      	mov	r4, r0
 800ba6a:	d805      	bhi.n	800ba78 <__ieee754_rem_pio2f+0x20>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	ed80 0a00 	vstr	s0, [r0]
 800ba72:	6043      	str	r3, [r0, #4]
 800ba74:	2000      	movs	r0, #0
 800ba76:	e022      	b.n	800babe <__ieee754_rem_pio2f+0x66>
 800ba78:	4b82      	ldr	r3, [pc, #520]	@ (800bc84 <__ieee754_rem_pio2f+0x22c>)
 800ba7a:	429d      	cmp	r5, r3
 800ba7c:	d83a      	bhi.n	800baf4 <__ieee754_rem_pio2f+0x9c>
 800ba7e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ba82:	2e00      	cmp	r6, #0
 800ba84:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bc88 <__ieee754_rem_pio2f+0x230>
 800ba88:	4a80      	ldr	r2, [pc, #512]	@ (800bc8c <__ieee754_rem_pio2f+0x234>)
 800ba8a:	f023 030f 	bic.w	r3, r3, #15
 800ba8e:	dd18      	ble.n	800bac2 <__ieee754_rem_pio2f+0x6a>
 800ba90:	4293      	cmp	r3, r2
 800ba92:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ba96:	bf09      	itett	eq
 800ba98:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bc90 <__ieee754_rem_pio2f+0x238>
 800ba9c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bc94 <__ieee754_rem_pio2f+0x23c>
 800baa0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bc98 <__ieee754_rem_pio2f+0x240>
 800baa4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800baa8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800baac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bab0:	ed80 7a00 	vstr	s14, [r0]
 800bab4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bab8:	edc0 7a01 	vstr	s15, [r0, #4]
 800babc:	2001      	movs	r0, #1
 800babe:	b007      	add	sp, #28
 800bac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac2:	4293      	cmp	r3, r2
 800bac4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bac8:	bf09      	itett	eq
 800baca:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bc90 <__ieee754_rem_pio2f+0x238>
 800bace:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bc94 <__ieee754_rem_pio2f+0x23c>
 800bad2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bc98 <__ieee754_rem_pio2f+0x240>
 800bad6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bada:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bae2:	ed80 7a00 	vstr	s14, [r0]
 800bae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baea:	edc0 7a01 	vstr	s15, [r0, #4]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	e7e4      	b.n	800babe <__ieee754_rem_pio2f+0x66>
 800baf4:	4b69      	ldr	r3, [pc, #420]	@ (800bc9c <__ieee754_rem_pio2f+0x244>)
 800baf6:	429d      	cmp	r5, r3
 800baf8:	d873      	bhi.n	800bbe2 <__ieee754_rem_pio2f+0x18a>
 800bafa:	f000 f8dd 	bl	800bcb8 <fabsf>
 800bafe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bca0 <__ieee754_rem_pio2f+0x248>
 800bb02:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb06:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb12:	ee17 0a90 	vmov	r0, s15
 800bb16:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bc88 <__ieee754_rem_pio2f+0x230>
 800bb1a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bb1e:	281f      	cmp	r0, #31
 800bb20:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bc94 <__ieee754_rem_pio2f+0x23c>
 800bb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb28:	eeb1 6a47 	vneg.f32	s12, s14
 800bb2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bb30:	ee16 1a90 	vmov	r1, s13
 800bb34:	dc09      	bgt.n	800bb4a <__ieee754_rem_pio2f+0xf2>
 800bb36:	4a5b      	ldr	r2, [pc, #364]	@ (800bca4 <__ieee754_rem_pio2f+0x24c>)
 800bb38:	1e47      	subs	r7, r0, #1
 800bb3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bb3e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bb42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d107      	bne.n	800bb5a <__ieee754_rem_pio2f+0x102>
 800bb4a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bb4e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bb52:	2a08      	cmp	r2, #8
 800bb54:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bb58:	dc14      	bgt.n	800bb84 <__ieee754_rem_pio2f+0x12c>
 800bb5a:	6021      	str	r1, [r4, #0]
 800bb5c:	ed94 7a00 	vldr	s14, [r4]
 800bb60:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bb64:	2e00      	cmp	r6, #0
 800bb66:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb6a:	ed84 0a01 	vstr	s0, [r4, #4]
 800bb6e:	daa6      	bge.n	800babe <__ieee754_rem_pio2f+0x66>
 800bb70:	eeb1 7a47 	vneg.f32	s14, s14
 800bb74:	eeb1 0a40 	vneg.f32	s0, s0
 800bb78:	ed84 7a00 	vstr	s14, [r4]
 800bb7c:	ed84 0a01 	vstr	s0, [r4, #4]
 800bb80:	4240      	negs	r0, r0
 800bb82:	e79c      	b.n	800babe <__ieee754_rem_pio2f+0x66>
 800bb84:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bc90 <__ieee754_rem_pio2f+0x238>
 800bb88:	eef0 6a40 	vmov.f32	s13, s0
 800bb8c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bb90:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bb94:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bb98:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bc98 <__ieee754_rem_pio2f+0x240>
 800bb9c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bba0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bba4:	ee15 2a90 	vmov	r2, s11
 800bba8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bbac:	1a5b      	subs	r3, r3, r1
 800bbae:	2b19      	cmp	r3, #25
 800bbb0:	dc04      	bgt.n	800bbbc <__ieee754_rem_pio2f+0x164>
 800bbb2:	edc4 5a00 	vstr	s11, [r4]
 800bbb6:	eeb0 0a66 	vmov.f32	s0, s13
 800bbba:	e7cf      	b.n	800bb5c <__ieee754_rem_pio2f+0x104>
 800bbbc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bca8 <__ieee754_rem_pio2f+0x250>
 800bbc0:	eeb0 0a66 	vmov.f32	s0, s13
 800bbc4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bbc8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bbcc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bcac <__ieee754_rem_pio2f+0x254>
 800bbd0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bbd4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bbd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bbdc:	ed84 7a00 	vstr	s14, [r4]
 800bbe0:	e7bc      	b.n	800bb5c <__ieee754_rem_pio2f+0x104>
 800bbe2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bbe6:	d306      	bcc.n	800bbf6 <__ieee754_rem_pio2f+0x19e>
 800bbe8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bbec:	edc0 7a01 	vstr	s15, [r0, #4]
 800bbf0:	edc0 7a00 	vstr	s15, [r0]
 800bbf4:	e73e      	b.n	800ba74 <__ieee754_rem_pio2f+0x1c>
 800bbf6:	15ea      	asrs	r2, r5, #23
 800bbf8:	3a86      	subs	r2, #134	@ 0x86
 800bbfa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc06:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bcb0 <__ieee754_rem_pio2f+0x258>
 800bc0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc12:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc26:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bc2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc36:	edcd 7a05 	vstr	s15, [sp, #20]
 800bc3a:	d11e      	bne.n	800bc7a <__ieee754_rem_pio2f+0x222>
 800bc3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc44:	bf0c      	ite	eq
 800bc46:	2301      	moveq	r3, #1
 800bc48:	2302      	movne	r3, #2
 800bc4a:	491a      	ldr	r1, [pc, #104]	@ (800bcb4 <__ieee754_rem_pio2f+0x25c>)
 800bc4c:	9101      	str	r1, [sp, #4]
 800bc4e:	2102      	movs	r1, #2
 800bc50:	9100      	str	r1, [sp, #0]
 800bc52:	a803      	add	r0, sp, #12
 800bc54:	4621      	mov	r1, r4
 800bc56:	f000 f837 	bl	800bcc8 <__kernel_rem_pio2f>
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	f6bf af2f 	bge.w	800babe <__ieee754_rem_pio2f+0x66>
 800bc60:	edd4 7a00 	vldr	s15, [r4]
 800bc64:	eef1 7a67 	vneg.f32	s15, s15
 800bc68:	edc4 7a00 	vstr	s15, [r4]
 800bc6c:	edd4 7a01 	vldr	s15, [r4, #4]
 800bc70:	eef1 7a67 	vneg.f32	s15, s15
 800bc74:	edc4 7a01 	vstr	s15, [r4, #4]
 800bc78:	e782      	b.n	800bb80 <__ieee754_rem_pio2f+0x128>
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e7e5      	b.n	800bc4a <__ieee754_rem_pio2f+0x1f2>
 800bc7e:	bf00      	nop
 800bc80:	3f490fd8 	.word	0x3f490fd8
 800bc84:	4016cbe3 	.word	0x4016cbe3
 800bc88:	3fc90f80 	.word	0x3fc90f80
 800bc8c:	3fc90fd0 	.word	0x3fc90fd0
 800bc90:	37354400 	.word	0x37354400
 800bc94:	37354443 	.word	0x37354443
 800bc98:	2e85a308 	.word	0x2e85a308
 800bc9c:	43490f80 	.word	0x43490f80
 800bca0:	3f22f984 	.word	0x3f22f984
 800bca4:	080ed360 	.word	0x080ed360
 800bca8:	2e85a300 	.word	0x2e85a300
 800bcac:	248d3132 	.word	0x248d3132
 800bcb0:	43800000 	.word	0x43800000
 800bcb4:	080ed3e0 	.word	0x080ed3e0

0800bcb8 <fabsf>:
 800bcb8:	ee10 3a10 	vmov	r3, s0
 800bcbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcc0:	ee00 3a10 	vmov	s0, r3
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <__kernel_rem_pio2f>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	ed2d 8b04 	vpush	{d8-d9}
 800bcd0:	b0d9      	sub	sp, #356	@ 0x164
 800bcd2:	4690      	mov	r8, r2
 800bcd4:	9001      	str	r0, [sp, #4]
 800bcd6:	4ab9      	ldr	r2, [pc, #740]	@ (800bfbc <__kernel_rem_pio2f+0x2f4>)
 800bcd8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bcda:	f118 0f04 	cmn.w	r8, #4
 800bcde:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bce2:	460f      	mov	r7, r1
 800bce4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bce8:	db27      	blt.n	800bd3a <__kernel_rem_pio2f+0x72>
 800bcea:	f1b8 0203 	subs.w	r2, r8, #3
 800bcee:	bf48      	it	mi
 800bcf0:	f108 0204 	addmi.w	r2, r8, #4
 800bcf4:	10d2      	asrs	r2, r2, #3
 800bcf6:	1c55      	adds	r5, r2, #1
 800bcf8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bcfa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800bcfe:	00e8      	lsls	r0, r5, #3
 800bd00:	eba2 060b 	sub.w	r6, r2, fp
 800bd04:	9002      	str	r0, [sp, #8]
 800bd06:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bd0a:	eb0a 0c0b 	add.w	ip, sl, fp
 800bd0e:	ac1c      	add	r4, sp, #112	@ 0x70
 800bd10:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bd14:	2000      	movs	r0, #0
 800bd16:	4560      	cmp	r0, ip
 800bd18:	dd11      	ble.n	800bd3e <__kernel_rem_pio2f+0x76>
 800bd1a:	a91c      	add	r1, sp, #112	@ 0x70
 800bd1c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bd20:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bd24:	f04f 0c00 	mov.w	ip, #0
 800bd28:	45d4      	cmp	ip, sl
 800bd2a:	dc27      	bgt.n	800bd7c <__kernel_rem_pio2f+0xb4>
 800bd2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd30:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800bd34:	4606      	mov	r6, r0
 800bd36:	2400      	movs	r4, #0
 800bd38:	e016      	b.n	800bd68 <__kernel_rem_pio2f+0xa0>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	e7db      	b.n	800bcf6 <__kernel_rem_pio2f+0x2e>
 800bd3e:	42c6      	cmn	r6, r0
 800bd40:	bf5d      	ittte	pl
 800bd42:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bd46:	ee07 1a90 	vmovpl	s15, r1
 800bd4a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bd4e:	eef0 7a47 	vmovmi.f32	s15, s14
 800bd52:	ece4 7a01 	vstmia	r4!, {s15}
 800bd56:	3001      	adds	r0, #1
 800bd58:	e7dd      	b.n	800bd16 <__kernel_rem_pio2f+0x4e>
 800bd5a:	ecfe 6a01 	vldmia	lr!, {s13}
 800bd5e:	ed96 7a00 	vldr	s14, [r6]
 800bd62:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd66:	3401      	adds	r4, #1
 800bd68:	455c      	cmp	r4, fp
 800bd6a:	f1a6 0604 	sub.w	r6, r6, #4
 800bd6e:	ddf4      	ble.n	800bd5a <__kernel_rem_pio2f+0x92>
 800bd70:	ece9 7a01 	vstmia	r9!, {s15}
 800bd74:	f10c 0c01 	add.w	ip, ip, #1
 800bd78:	3004      	adds	r0, #4
 800bd7a:	e7d5      	b.n	800bd28 <__kernel_rem_pio2f+0x60>
 800bd7c:	a908      	add	r1, sp, #32
 800bd7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd82:	9104      	str	r1, [sp, #16]
 800bd84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bd86:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800bfc8 <__kernel_rem_pio2f+0x300>
 800bd8a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800bfc4 <__kernel_rem_pio2f+0x2fc>
 800bd8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bd92:	9203      	str	r2, [sp, #12]
 800bd94:	4654      	mov	r4, sl
 800bd96:	00a2      	lsls	r2, r4, #2
 800bd98:	9205      	str	r2, [sp, #20]
 800bd9a:	aa58      	add	r2, sp, #352	@ 0x160
 800bd9c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bda0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bda4:	a944      	add	r1, sp, #272	@ 0x110
 800bda6:	aa08      	add	r2, sp, #32
 800bda8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bdac:	4694      	mov	ip, r2
 800bdae:	4626      	mov	r6, r4
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	f1a0 0004 	sub.w	r0, r0, #4
 800bdb6:	dc4c      	bgt.n	800be52 <__kernel_rem_pio2f+0x18a>
 800bdb8:	4628      	mov	r0, r5
 800bdba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bdbe:	f000 f9f5 	bl	800c1ac <scalbnf>
 800bdc2:	eeb0 8a40 	vmov.f32	s16, s0
 800bdc6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bdca:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bdce:	f000 fa53 	bl	800c278 <floorf>
 800bdd2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bdd6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bde0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bde4:	ee17 9a90 	vmov	r9, s15
 800bde8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdec:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bdf0:	dd41      	ble.n	800be76 <__kernel_rem_pio2f+0x1ae>
 800bdf2:	f104 3cff 	add.w	ip, r4, #4294967295
 800bdf6:	a908      	add	r1, sp, #32
 800bdf8:	f1c5 0e08 	rsb	lr, r5, #8
 800bdfc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800be00:	fa46 f00e 	asr.w	r0, r6, lr
 800be04:	4481      	add	r9, r0
 800be06:	fa00 f00e 	lsl.w	r0, r0, lr
 800be0a:	1a36      	subs	r6, r6, r0
 800be0c:	f1c5 0007 	rsb	r0, r5, #7
 800be10:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800be14:	4106      	asrs	r6, r0
 800be16:	2e00      	cmp	r6, #0
 800be18:	dd3c      	ble.n	800be94 <__kernel_rem_pio2f+0x1cc>
 800be1a:	f04f 0e00 	mov.w	lr, #0
 800be1e:	f109 0901 	add.w	r9, r9, #1
 800be22:	4670      	mov	r0, lr
 800be24:	4574      	cmp	r4, lr
 800be26:	dc68      	bgt.n	800befa <__kernel_rem_pio2f+0x232>
 800be28:	2d00      	cmp	r5, #0
 800be2a:	dd03      	ble.n	800be34 <__kernel_rem_pio2f+0x16c>
 800be2c:	2d01      	cmp	r5, #1
 800be2e:	d074      	beq.n	800bf1a <__kernel_rem_pio2f+0x252>
 800be30:	2d02      	cmp	r5, #2
 800be32:	d07d      	beq.n	800bf30 <__kernel_rem_pio2f+0x268>
 800be34:	2e02      	cmp	r6, #2
 800be36:	d12d      	bne.n	800be94 <__kernel_rem_pio2f+0x1cc>
 800be38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be3c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800be40:	b340      	cbz	r0, 800be94 <__kernel_rem_pio2f+0x1cc>
 800be42:	4628      	mov	r0, r5
 800be44:	9306      	str	r3, [sp, #24]
 800be46:	f000 f9b1 	bl	800c1ac <scalbnf>
 800be4a:	9b06      	ldr	r3, [sp, #24]
 800be4c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be50:	e020      	b.n	800be94 <__kernel_rem_pio2f+0x1cc>
 800be52:	ee60 7a28 	vmul.f32	s15, s0, s17
 800be56:	3e01      	subs	r6, #1
 800be58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be60:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800be64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be68:	ecac 0a01 	vstmia	ip!, {s0}
 800be6c:	ed90 0a00 	vldr	s0, [r0]
 800be70:	ee37 0a80 	vadd.f32	s0, s15, s0
 800be74:	e79c      	b.n	800bdb0 <__kernel_rem_pio2f+0xe8>
 800be76:	d105      	bne.n	800be84 <__kernel_rem_pio2f+0x1bc>
 800be78:	1e60      	subs	r0, r4, #1
 800be7a:	a908      	add	r1, sp, #32
 800be7c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800be80:	11f6      	asrs	r6, r6, #7
 800be82:	e7c8      	b.n	800be16 <__kernel_rem_pio2f+0x14e>
 800be84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800be88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be90:	da31      	bge.n	800bef6 <__kernel_rem_pio2f+0x22e>
 800be92:	2600      	movs	r6, #0
 800be94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9c:	f040 8098 	bne.w	800bfd0 <__kernel_rem_pio2f+0x308>
 800bea0:	1e60      	subs	r0, r4, #1
 800bea2:	2200      	movs	r2, #0
 800bea4:	4550      	cmp	r0, sl
 800bea6:	da4b      	bge.n	800bf40 <__kernel_rem_pio2f+0x278>
 800bea8:	2a00      	cmp	r2, #0
 800beaa:	d065      	beq.n	800bf78 <__kernel_rem_pio2f+0x2b0>
 800beac:	3c01      	subs	r4, #1
 800beae:	ab08      	add	r3, sp, #32
 800beb0:	3d08      	subs	r5, #8
 800beb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0f8      	beq.n	800beac <__kernel_rem_pio2f+0x1e4>
 800beba:	4628      	mov	r0, r5
 800bebc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bec0:	f000 f974 	bl	800c1ac <scalbnf>
 800bec4:	1c63      	adds	r3, r4, #1
 800bec6:	aa44      	add	r2, sp, #272	@ 0x110
 800bec8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bfc8 <__kernel_rem_pio2f+0x300>
 800becc:	0099      	lsls	r1, r3, #2
 800bece:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bed2:	4623      	mov	r3, r4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f280 80a9 	bge.w	800c02c <__kernel_rem_pio2f+0x364>
 800beda:	4623      	mov	r3, r4
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f2c0 80c7 	blt.w	800c070 <__kernel_rem_pio2f+0x3a8>
 800bee2:	aa44      	add	r2, sp, #272	@ 0x110
 800bee4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bee8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bfc0 <__kernel_rem_pio2f+0x2f8>
 800beec:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800bef0:	2000      	movs	r0, #0
 800bef2:	1ae2      	subs	r2, r4, r3
 800bef4:	e0b1      	b.n	800c05a <__kernel_rem_pio2f+0x392>
 800bef6:	2602      	movs	r6, #2
 800bef8:	e78f      	b.n	800be1a <__kernel_rem_pio2f+0x152>
 800befa:	f852 1b04 	ldr.w	r1, [r2], #4
 800befe:	b948      	cbnz	r0, 800bf14 <__kernel_rem_pio2f+0x24c>
 800bf00:	b121      	cbz	r1, 800bf0c <__kernel_rem_pio2f+0x244>
 800bf02:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bf06:	f842 1c04 	str.w	r1, [r2, #-4]
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	f10e 0e01 	add.w	lr, lr, #1
 800bf10:	4608      	mov	r0, r1
 800bf12:	e787      	b.n	800be24 <__kernel_rem_pio2f+0x15c>
 800bf14:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bf18:	e7f5      	b.n	800bf06 <__kernel_rem_pio2f+0x23e>
 800bf1a:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf1e:	aa08      	add	r2, sp, #32
 800bf20:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf28:	a908      	add	r1, sp, #32
 800bf2a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bf2e:	e781      	b.n	800be34 <__kernel_rem_pio2f+0x16c>
 800bf30:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf34:	aa08      	add	r2, sp, #32
 800bf36:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf3a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bf3e:	e7f3      	b.n	800bf28 <__kernel_rem_pio2f+0x260>
 800bf40:	a908      	add	r1, sp, #32
 800bf42:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf46:	3801      	subs	r0, #1
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	e7ab      	b.n	800bea4 <__kernel_rem_pio2f+0x1dc>
 800bf4c:	3201      	adds	r2, #1
 800bf4e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bf52:	2e00      	cmp	r6, #0
 800bf54:	d0fa      	beq.n	800bf4c <__kernel_rem_pio2f+0x284>
 800bf56:	9905      	ldr	r1, [sp, #20]
 800bf58:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bf5c:	eb0d 0001 	add.w	r0, sp, r1
 800bf60:	18e6      	adds	r6, r4, r3
 800bf62:	a91c      	add	r1, sp, #112	@ 0x70
 800bf64:	f104 0c01 	add.w	ip, r4, #1
 800bf68:	384c      	subs	r0, #76	@ 0x4c
 800bf6a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bf6e:	4422      	add	r2, r4
 800bf70:	4562      	cmp	r2, ip
 800bf72:	da04      	bge.n	800bf7e <__kernel_rem_pio2f+0x2b6>
 800bf74:	4614      	mov	r4, r2
 800bf76:	e70e      	b.n	800bd96 <__kernel_rem_pio2f+0xce>
 800bf78:	9804      	ldr	r0, [sp, #16]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	e7e7      	b.n	800bf4e <__kernel_rem_pio2f+0x286>
 800bf7e:	9903      	ldr	r1, [sp, #12]
 800bf80:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bf84:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bf88:	9105      	str	r1, [sp, #20]
 800bf8a:	ee07 1a90 	vmov	s15, r1
 800bf8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf92:	2400      	movs	r4, #0
 800bf94:	ece6 7a01 	vstmia	r6!, {s15}
 800bf98:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800bf9c:	46b1      	mov	r9, r6
 800bf9e:	455c      	cmp	r4, fp
 800bfa0:	dd04      	ble.n	800bfac <__kernel_rem_pio2f+0x2e4>
 800bfa2:	ece0 7a01 	vstmia	r0!, {s15}
 800bfa6:	f10c 0c01 	add.w	ip, ip, #1
 800bfaa:	e7e1      	b.n	800bf70 <__kernel_rem_pio2f+0x2a8>
 800bfac:	ecfe 6a01 	vldmia	lr!, {s13}
 800bfb0:	ed39 7a01 	vldmdb	r9!, {s14}
 800bfb4:	3401      	adds	r4, #1
 800bfb6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfba:	e7f0      	b.n	800bf9e <__kernel_rem_pio2f+0x2d6>
 800bfbc:	080ed724 	.word	0x080ed724
 800bfc0:	080ed6f8 	.word	0x080ed6f8
 800bfc4:	43800000 	.word	0x43800000
 800bfc8:	3b800000 	.word	0x3b800000
 800bfcc:	00000000 	.word	0x00000000
 800bfd0:	9b02      	ldr	r3, [sp, #8]
 800bfd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bfd6:	eba3 0008 	sub.w	r0, r3, r8
 800bfda:	f000 f8e7 	bl	800c1ac <scalbnf>
 800bfde:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bfc4 <__kernel_rem_pio2f+0x2fc>
 800bfe2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfea:	db19      	blt.n	800c020 <__kernel_rem_pio2f+0x358>
 800bfec:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bfc8 <__kernel_rem_pio2f+0x300>
 800bff0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bff4:	aa08      	add	r2, sp, #32
 800bff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bffa:	3508      	adds	r5, #8
 800bffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c000:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c008:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c00c:	ee10 3a10 	vmov	r3, s0
 800c010:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c014:	ee17 3a90 	vmov	r3, s15
 800c018:	3401      	adds	r4, #1
 800c01a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c01e:	e74c      	b.n	800beba <__kernel_rem_pio2f+0x1f2>
 800c020:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c024:	aa08      	add	r2, sp, #32
 800c026:	ee10 3a10 	vmov	r3, s0
 800c02a:	e7f6      	b.n	800c01a <__kernel_rem_pio2f+0x352>
 800c02c:	a808      	add	r0, sp, #32
 800c02e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c032:	9001      	str	r0, [sp, #4]
 800c034:	ee07 0a90 	vmov	s15, r0
 800c038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c03c:	3b01      	subs	r3, #1
 800c03e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c042:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c046:	ed62 7a01 	vstmdb	r2!, {s15}
 800c04a:	e743      	b.n	800bed4 <__kernel_rem_pio2f+0x20c>
 800c04c:	ecfc 6a01 	vldmia	ip!, {s13}
 800c050:	ecb5 7a01 	vldmia	r5!, {s14}
 800c054:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c058:	3001      	adds	r0, #1
 800c05a:	4550      	cmp	r0, sl
 800c05c:	dc01      	bgt.n	800c062 <__kernel_rem_pio2f+0x39a>
 800c05e:	4282      	cmp	r2, r0
 800c060:	daf4      	bge.n	800c04c <__kernel_rem_pio2f+0x384>
 800c062:	a858      	add	r0, sp, #352	@ 0x160
 800c064:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c068:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c06c:	3b01      	subs	r3, #1
 800c06e:	e735      	b.n	800bedc <__kernel_rem_pio2f+0x214>
 800c070:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c072:	2b02      	cmp	r3, #2
 800c074:	dc09      	bgt.n	800c08a <__kernel_rem_pio2f+0x3c2>
 800c076:	2b00      	cmp	r3, #0
 800c078:	dc2b      	bgt.n	800c0d2 <__kernel_rem_pio2f+0x40a>
 800c07a:	d044      	beq.n	800c106 <__kernel_rem_pio2f+0x43e>
 800c07c:	f009 0007 	and.w	r0, r9, #7
 800c080:	b059      	add	sp, #356	@ 0x164
 800c082:	ecbd 8b04 	vpop	{d8-d9}
 800c086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d1f5      	bne.n	800c07c <__kernel_rem_pio2f+0x3b4>
 800c090:	aa30      	add	r2, sp, #192	@ 0xc0
 800c092:	1f0b      	subs	r3, r1, #4
 800c094:	4413      	add	r3, r2
 800c096:	461a      	mov	r2, r3
 800c098:	4620      	mov	r0, r4
 800c09a:	2800      	cmp	r0, #0
 800c09c:	f1a2 0204 	sub.w	r2, r2, #4
 800c0a0:	dc52      	bgt.n	800c148 <__kernel_rem_pio2f+0x480>
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	2a01      	cmp	r2, #1
 800c0a6:	f1a3 0304 	sub.w	r3, r3, #4
 800c0aa:	dc5d      	bgt.n	800c168 <__kernel_rem_pio2f+0x4a0>
 800c0ac:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0ae:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800c0b2:	440b      	add	r3, r1
 800c0b4:	2c01      	cmp	r4, #1
 800c0b6:	dc67      	bgt.n	800c188 <__kernel_rem_pio2f+0x4c0>
 800c0b8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c0bc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c0c0:	2e00      	cmp	r6, #0
 800c0c2:	d167      	bne.n	800c194 <__kernel_rem_pio2f+0x4cc>
 800c0c4:	edc7 6a00 	vstr	s13, [r7]
 800c0c8:	ed87 7a01 	vstr	s14, [r7, #4]
 800c0cc:	edc7 7a02 	vstr	s15, [r7, #8]
 800c0d0:	e7d4      	b.n	800c07c <__kernel_rem_pio2f+0x3b4>
 800c0d2:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0d4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800c0d8:	440b      	add	r3, r1
 800c0da:	4622      	mov	r2, r4
 800c0dc:	2a00      	cmp	r2, #0
 800c0de:	da24      	bge.n	800c12a <__kernel_rem_pio2f+0x462>
 800c0e0:	b34e      	cbz	r6, 800c136 <__kernel_rem_pio2f+0x46e>
 800c0e2:	eef1 7a47 	vneg.f32	s15, s14
 800c0e6:	edc7 7a00 	vstr	s15, [r7]
 800c0ea:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c0ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0f2:	aa31      	add	r2, sp, #196	@ 0xc4
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	da20      	bge.n	800c13c <__kernel_rem_pio2f+0x474>
 800c0fa:	b10e      	cbz	r6, 800c100 <__kernel_rem_pio2f+0x438>
 800c0fc:	eef1 7a67 	vneg.f32	s15, s15
 800c100:	edc7 7a01 	vstr	s15, [r7, #4]
 800c104:	e7ba      	b.n	800c07c <__kernel_rem_pio2f+0x3b4>
 800c106:	ab30      	add	r3, sp, #192	@ 0xc0
 800c108:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800bfcc <__kernel_rem_pio2f+0x304>
 800c10c:	440b      	add	r3, r1
 800c10e:	2c00      	cmp	r4, #0
 800c110:	da05      	bge.n	800c11e <__kernel_rem_pio2f+0x456>
 800c112:	b10e      	cbz	r6, 800c118 <__kernel_rem_pio2f+0x450>
 800c114:	eef1 7a67 	vneg.f32	s15, s15
 800c118:	edc7 7a00 	vstr	s15, [r7]
 800c11c:	e7ae      	b.n	800c07c <__kernel_rem_pio2f+0x3b4>
 800c11e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c122:	3c01      	subs	r4, #1
 800c124:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c128:	e7f1      	b.n	800c10e <__kernel_rem_pio2f+0x446>
 800c12a:	ed73 7a01 	vldmdb	r3!, {s15}
 800c12e:	3a01      	subs	r2, #1
 800c130:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c134:	e7d2      	b.n	800c0dc <__kernel_rem_pio2f+0x414>
 800c136:	eef0 7a47 	vmov.f32	s15, s14
 800c13a:	e7d4      	b.n	800c0e6 <__kernel_rem_pio2f+0x41e>
 800c13c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c140:	3301      	adds	r3, #1
 800c142:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c146:	e7d6      	b.n	800c0f6 <__kernel_rem_pio2f+0x42e>
 800c148:	edd2 7a00 	vldr	s15, [r2]
 800c14c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c150:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c154:	3801      	subs	r0, #1
 800c156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c15a:	ed82 7a00 	vstr	s14, [r2]
 800c15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c162:	edc2 7a01 	vstr	s15, [r2, #4]
 800c166:	e798      	b.n	800c09a <__kernel_rem_pio2f+0x3d2>
 800c168:	edd3 7a00 	vldr	s15, [r3]
 800c16c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c170:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c174:	3a01      	subs	r2, #1
 800c176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c17a:	ed83 7a00 	vstr	s14, [r3]
 800c17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c182:	edc3 7a01 	vstr	s15, [r3, #4]
 800c186:	e78d      	b.n	800c0a4 <__kernel_rem_pio2f+0x3dc>
 800c188:	ed33 7a01 	vldmdb	r3!, {s14}
 800c18c:	3c01      	subs	r4, #1
 800c18e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c192:	e78f      	b.n	800c0b4 <__kernel_rem_pio2f+0x3ec>
 800c194:	eef1 6a66 	vneg.f32	s13, s13
 800c198:	eeb1 7a47 	vneg.f32	s14, s14
 800c19c:	edc7 6a00 	vstr	s13, [r7]
 800c1a0:	ed87 7a01 	vstr	s14, [r7, #4]
 800c1a4:	eef1 7a67 	vneg.f32	s15, s15
 800c1a8:	e790      	b.n	800c0cc <__kernel_rem_pio2f+0x404>
 800c1aa:	bf00      	nop

0800c1ac <scalbnf>:
 800c1ac:	ee10 3a10 	vmov	r3, s0
 800c1b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c1b4:	d02b      	beq.n	800c20e <scalbnf+0x62>
 800c1b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c1ba:	d302      	bcc.n	800c1c2 <scalbnf+0x16>
 800c1bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1c0:	4770      	bx	lr
 800c1c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c1c6:	d123      	bne.n	800c210 <scalbnf+0x64>
 800c1c8:	4b24      	ldr	r3, [pc, #144]	@ (800c25c <scalbnf+0xb0>)
 800c1ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c260 <scalbnf+0xb4>
 800c1ce:	4298      	cmp	r0, r3
 800c1d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1d4:	db17      	blt.n	800c206 <scalbnf+0x5a>
 800c1d6:	ee10 3a10 	vmov	r3, s0
 800c1da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1de:	3a19      	subs	r2, #25
 800c1e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c1e4:	4288      	cmp	r0, r1
 800c1e6:	dd15      	ble.n	800c214 <scalbnf+0x68>
 800c1e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c264 <scalbnf+0xb8>
 800c1ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c268 <scalbnf+0xbc>
 800c1f0:	ee10 3a10 	vmov	r3, s0
 800c1f4:	eeb0 7a67 	vmov.f32	s14, s15
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	bfb8      	it	lt
 800c1fc:	eef0 7a66 	vmovlt.f32	s15, s13
 800c200:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c204:	4770      	bx	lr
 800c206:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c26c <scalbnf+0xc0>
 800c20a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c20e:	4770      	bx	lr
 800c210:	0dd2      	lsrs	r2, r2, #23
 800c212:	e7e5      	b.n	800c1e0 <scalbnf+0x34>
 800c214:	4410      	add	r0, r2
 800c216:	28fe      	cmp	r0, #254	@ 0xfe
 800c218:	dce6      	bgt.n	800c1e8 <scalbnf+0x3c>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	dd06      	ble.n	800c22c <scalbnf+0x80>
 800c21e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c222:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c226:	ee00 3a10 	vmov	s0, r3
 800c22a:	4770      	bx	lr
 800c22c:	f110 0f16 	cmn.w	r0, #22
 800c230:	da09      	bge.n	800c246 <scalbnf+0x9a>
 800c232:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c26c <scalbnf+0xc0>
 800c236:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c270 <scalbnf+0xc4>
 800c23a:	ee10 3a10 	vmov	r3, s0
 800c23e:	eeb0 7a67 	vmov.f32	s14, s15
 800c242:	2b00      	cmp	r3, #0
 800c244:	e7d9      	b.n	800c1fa <scalbnf+0x4e>
 800c246:	3019      	adds	r0, #25
 800c248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c24c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c250:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c274 <scalbnf+0xc8>
 800c254:	ee07 3a90 	vmov	s15, r3
 800c258:	e7d7      	b.n	800c20a <scalbnf+0x5e>
 800c25a:	bf00      	nop
 800c25c:	ffff3cb0 	.word	0xffff3cb0
 800c260:	4c000000 	.word	0x4c000000
 800c264:	7149f2ca 	.word	0x7149f2ca
 800c268:	f149f2ca 	.word	0xf149f2ca
 800c26c:	0da24260 	.word	0x0da24260
 800c270:	8da24260 	.word	0x8da24260
 800c274:	33000000 	.word	0x33000000

0800c278 <floorf>:
 800c278:	ee10 3a10 	vmov	r3, s0
 800c27c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c280:	3a7f      	subs	r2, #127	@ 0x7f
 800c282:	2a16      	cmp	r2, #22
 800c284:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c288:	dc2b      	bgt.n	800c2e2 <floorf+0x6a>
 800c28a:	2a00      	cmp	r2, #0
 800c28c:	da12      	bge.n	800c2b4 <floorf+0x3c>
 800c28e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2f4 <floorf+0x7c>
 800c292:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c296:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c29e:	dd06      	ble.n	800c2ae <floorf+0x36>
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da24      	bge.n	800c2ee <floorf+0x76>
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	4b14      	ldr	r3, [pc, #80]	@ (800c2f8 <floorf+0x80>)
 800c2a8:	bf08      	it	eq
 800c2aa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c2ae:	ee00 3a10 	vmov	s0, r3
 800c2b2:	4770      	bx	lr
 800c2b4:	4911      	ldr	r1, [pc, #68]	@ (800c2fc <floorf+0x84>)
 800c2b6:	4111      	asrs	r1, r2
 800c2b8:	420b      	tst	r3, r1
 800c2ba:	d0fa      	beq.n	800c2b2 <floorf+0x3a>
 800c2bc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c2f4 <floorf+0x7c>
 800c2c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2cc:	ddef      	ble.n	800c2ae <floorf+0x36>
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfbe      	ittt	lt
 800c2d2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c2d6:	fa40 f202 	asrlt.w	r2, r0, r2
 800c2da:	189b      	addlt	r3, r3, r2
 800c2dc:	ea23 0301 	bic.w	r3, r3, r1
 800c2e0:	e7e5      	b.n	800c2ae <floorf+0x36>
 800c2e2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c2e6:	d3e4      	bcc.n	800c2b2 <floorf+0x3a>
 800c2e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2ec:	4770      	bx	lr
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e7dd      	b.n	800c2ae <floorf+0x36>
 800c2f2:	bf00      	nop
 800c2f4:	7149f2ca 	.word	0x7149f2ca
 800c2f8:	bf800000 	.word	0xbf800000
 800c2fc:	007fffff 	.word	0x007fffff

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
