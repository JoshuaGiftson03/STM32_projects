
RFID_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080073c8  080073c8  000083c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007740  08007740  000091d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007740  08007740  00008740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007748  08007748  000091d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007748  08007748  00008748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08007750  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d0  2**0
                  CONTENTS
 10 .bss          000005cc  200001d0  200001d0  000091d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000079c  2000079c  000091d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b99b  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021fb  00000000  00000000  00014b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  00016d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  000177f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d4b  00000000  00000000  00017fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dce6  00000000  00000000  0001bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a91  00000000  00000000  000299e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f3477  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039b4  00000000  00000000  000f34bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  000f6e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073b0 	.word	0x080073b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	080073b0 	.word	0x080073b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
  SystemClock_Config();
  MX_GPIO_Init();
  MX_USB_HOST_Init();
  MX_SPI1_Init();*/
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	//4 bytes = 32 bits
	uint8_t MyID[5] = {0xE4, 0xA8, 0x8A, 0x3F};
 8000bae:	4a35      	ldr	r2, [pc, #212]	@ (8000c84 <main+0xdc>)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb6:	6018      	str	r0, [r3, #0]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	7019      	strb	r1, [r3, #0]

		 //cho phep USART2 hoat dong
		MF522_init();
 8000bbc:	f000 f88e 	bl	8000cdc <MF522_init>
		delay_init(168);
 8000bc0:	20a8      	movs	r0, #168	@ 0xa8
 8000bc2:	f000 fbe3 	bl	800138c <delay_init>
    MFRC522_Reset();
 8000bc6:	f000 f919 	bl	8000dfc <MFRC522_Reset>
//    MFRC522_AntennaOff();
    MFRC522_AntennaOn();
 8000bca:	f000 fbc9 	bl	8001360 <MFRC522_AntennaOn>
		//printf("CHUONG TRINH RFID\r\n");
	 //Read64Block();
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd4:	482c      	ldr	r0, [pc, #176]	@ (8000c88 <main+0xe0>)
 8000bd6:	f000 ff81 	bl	8001adc <HAL_GPIO_WritePin>
	while(1)
	{
		status = MFRC522_Request(PICC_REQALL, g_ucTempbuf);
 8000bda:	492c      	ldr	r1, [pc, #176]	@ (8000c8c <main+0xe4>)
 8000bdc:	2052      	movs	r0, #82	@ 0x52
 8000bde:	f000 f9b3 	bl	8000f48 <MFRC522_Request>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c90 <main+0xe8>)
 8000be8:	701a      	strb	r2, [r3, #0]
    if (status != MI_OK)
 8000bea:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <main+0xe8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <main+0x52>
    {
		  flag_loop=0;
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <main+0xec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
      continue;
 8000bf8:	e043      	b.n	8000c82 <main+0xda>
    }
		status = MFRC522_Anticoll(g_ucTempbuf);
 8000bfa:	4824      	ldr	r0, [pc, #144]	@ (8000c8c <main+0xe4>)
 8000bfc:	f000 f9da 	bl	8000fb4 <MFRC522_Anticoll>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <main+0xe8>)
 8000c06:	701a      	strb	r2, [r3, #0]
    if (status != MI_OK)
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <main+0xe8>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <main+0x70>
         {
					 flag_loop=0;
 8000c10:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <main+0xec>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
           continue;
 8000c16:	e034      	b.n	8000c82 <main+0xda>
         }
	  if(flag_loop==1)
 8000c18:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <main+0xec>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <main+0x7e>
        {
				 MFRC522_Halt();
 8000c20:	f000 fa1c 	bl	800105c <MFRC522_Halt>
				 continue;
 8000c24:	e02d      	b.n	8000c82 <main+0xda>
				}
		flag_loop=1;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <main+0xec>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
		//printf("\n UID=%x:%x:%x:%x\r\n",g_ucTempbuf[0],g_ucTempbuf[1],g_ucTempbuf[2],g_ucTempbuf[3] );
		MFRC522_Halt();
 8000c2c:	f000 fa16 	bl	800105c <MFRC522_Halt>
	  if (CompareID(g_ucTempbuf,MyID) == MI_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4815      	ldr	r0, [pc, #84]	@ (8000c8c <main+0xe4>)
 8000c36:	f000 f82f 	bl	8000c98 <CompareID>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d110      	bne.n	8000c62 <main+0xba>
			{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Blue ON
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c46:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <main+0xe0>)
 8000c48:	f000 ff48 	bl	8001adc <HAL_GPIO_WritePin>
				  delay_ms(500);
 8000c4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c50:	f000 fbf0 	bl	8001434 <delay_ms>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); // Blue OFF
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5a:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <main+0xe0>)
 8000c5c:	f000 ff3e 	bl	8001adc <HAL_GPIO_WritePin>
 8000c60:	e7bb      	b.n	8000bda <main+0x32>
			}
		else
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Red ON
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c68:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <main+0xe0>)
 8000c6a:	f000 ff37 	bl	8001adc <HAL_GPIO_WritePin>
				delay_ms(500);
 8000c6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c72:	f000 fbdf 	bl	8001434 <delay_ms>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Red OFF
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <main+0xe0>)
 8000c7e:	f000 ff2d 	bl	8001adc <HAL_GPIO_WritePin>
		status = MFRC522_Request(PICC_REQALL, g_ucTempbuf);
 8000c82:	e7aa      	b.n	8000bda <main+0x32>
 8000c84:	080073c8 	.word	0x080073c8
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	200001f0 	.word	0x200001f0
 8000c90:	200001ec 	.word	0x200001ec
 8000c94:	20000204 	.word	0x20000204

08000c98 <CompareID>:


	}
}
uint8_t CompareID(uint8_t* CardID, uint8_t* CompareID)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e00e      	b.n	8000cc6 <CompareID+0x2e>
		if (CardID[i] != CompareID[i])
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	440b      	add	r3, r1
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d001      	beq.n	8000cc0 <CompareID+0x28>
			{
			return MI_ERR;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e006      	b.n	8000cce <CompareID+0x36>
	for (i = 0; i < 5; i++) {
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d9ed      	bls.n	8000ca8 <CompareID+0x10>
		  }
	}
	return MI_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <MF522_init>:
#define MF522_CS_ENABLE    HAL_GPIO_WritePin(MF522_PORT_CS, MF522_PIN_CS, GPIO_PIN_RESET)
#define MF522_CS_DISABLE   HAL_GPIO_WritePin(MF522_PORT_CS, MF522_PIN_CS, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi1; // Declare SPI handle
//Initilize the pinouts. GPIO for SPI AF
void MF522_init(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
     // Use your actual SPI handle

    // Enable GPIOA and SPI1 clocks (HAL method)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8000de8 <MF522_init+0x10c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000de8 <MF522_init+0x10c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b39      	ldr	r3, [pc, #228]	@ (8000de8 <MF522_init+0x10c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b35      	ldr	r3, [pc, #212]	@ (8000de8 <MF522_init+0x10c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a34      	ldr	r2, [pc, #208]	@ (8000de8 <MF522_init+0x10c>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b32      	ldr	r3, [pc, #200]	@ (8000de8 <MF522_init+0x10c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <MF522_init+0x10c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <MF522_init+0x10c>)
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MF522_init+0x10c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

    //LED
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;       // Orange LED pin
 8000d46:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4823      	ldr	r0, [pc, #140]	@ (8000dec <MF522_init+0x110>)
 8000d60:	f000 fd20 	bl	80017a4 <HAL_GPIO_Init>
    // Configure SCK (PA5), MISO (PA6), MOSI (PA7) as SPI
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000d64:	23e0      	movs	r3, #224	@ 0xe0
 8000d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d74:	2305      	movs	r3, #5
 8000d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481c      	ldr	r0, [pc, #112]	@ (8000df0 <MF522_init+0x114>)
 8000d80:	f000 fd10 	bl	80017a4 <HAL_GPIO_Init>

    // Configure CS (PA2) and RST (PA3) as outputs
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000d84:	230c      	movs	r3, #12
 8000d86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4815      	ldr	r0, [pc, #84]	@ (8000df0 <MF522_init+0x114>)
 8000d9c:	f000 fd02 	bl	80017a4 <HAL_GPIO_Init>

    // Initialize SPI using HAL
    hspi1.Instance = SPI1;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MF522_init+0x118>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <MF522_init+0x11c>)
 8000da4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MF522_init+0x118>)
 8000da8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dac:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MF522_init+0x118>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MF522_init+0x118>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MF522_init+0x118>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MF522_init+0x118>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MF522_init+0x118>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dcc:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MF522_init+0x118>)
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <MF522_init+0x118>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
    HAL_SPI_Init(&hspi1);
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MF522_init+0x118>)
 8000ddc:	f002 fc3e 	bl	800365c <HAL_SPI_Init>
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40020000 	.word	0x40020000
 8000df4:	20000210 	.word	0x20000210
 8000df8:	40013000 	.word	0x40013000

08000dfc <MFRC522_Reset>:
    HAL_SPI_TransmitReceive(&hspi1, &data, &received, 1, HAL_MAX_DELAY);
    return received;
}

uint8_t MFRC522_Reset(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	MF522_CS_DISABLE;
 8000e00:	2201      	movs	r2, #1
 8000e02:	2104      	movs	r1, #4
 8000e04:	481d      	ldr	r0, [pc, #116]	@ (8000e7c <MFRC522_Reset+0x80>)
 8000e06:	f000 fe69 	bl	8001adc <HAL_GPIO_WritePin>
  delay_us(8000);
 8000e0a:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000e0e:	f000 fae3 	bl	80013d8 <delay_us>
	MF522_RST_RESET;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	4819      	ldr	r0, [pc, #100]	@ (8000e7c <MFRC522_Reset+0x80>)
 8000e18:	f000 fe60 	bl	8001adc <HAL_GPIO_WritePin>
  delay_us(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e20:	f000 fada 	bl	80013d8 <delay_us>
	MF522_RST_SET;
 8000e24:	2201      	movs	r2, #1
 8000e26:	2108      	movs	r1, #8
 8000e28:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <MFRC522_Reset+0x80>)
 8000e2a:	f000 fe57 	bl	8001adc <HAL_GPIO_WritePin>
  delay_us(1000);
 8000e2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e32:	f000 fad1 	bl	80013d8 <delay_us>
  MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_RESETPHASE);
 8000e36:	210f      	movs	r1, #15
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 f855 	bl	8000ee8 <MFRC522_WriteRegister>
  delay_us(1000);
 8000e3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e42:	f000 fac9 	bl	80013d8 <delay_us>

  MFRC522_WriteRegister(MODE_REGISTER,0x29);
 8000e46:	2129      	movs	r1, #41	@ 0x29
 8000e48:	2011      	movs	r0, #17
 8000e4a:	f000 f84d 	bl	8000ee8 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TIMER_RELOAD_H_REGISTER,0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	202c      	movs	r0, #44	@ 0x2c
 8000e52:	f000 f849 	bl	8000ee8 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TIMER_RELOAD_L_REGISTER,30);
 8000e56:	211e      	movs	r1, #30
 8000e58:	202d      	movs	r0, #45	@ 0x2d
 8000e5a:	f000 f845 	bl	8000ee8 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TMODE_REGISTER,0x8D); //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000e5e:	218d      	movs	r1, #141	@ 0x8d
 8000e60:	202a      	movs	r0, #42	@ 0x2a
 8000e62:	f000 f841 	bl	8000ee8 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TIMER_PRESCALER_REGISTER,0x3E);
 8000e66:	213e      	movs	r1, #62	@ 0x3e
 8000e68:	202b      	movs	r0, #43	@ 0x2b
 8000e6a:	f000 f83d 	bl	8000ee8 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TX_ASK_REGISTER,0x40);
 8000e6e:	2140      	movs	r1, #64	@ 0x40
 8000e70:	2015      	movs	r0, #21
 8000e72:	f000 f839 	bl	8000ee8 <MFRC522_WriteRegister>

  return MI_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40020000 	.word	0x40020000

08000e80 <MFRC522_ReadRegister>:
uint8_t MFRC522_ReadRegister(uint8_t Address) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    uint8_t address_byte = (Address << 1) | 0x80;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // CS Enable
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <MFRC522_ReadRegister+0x60>)
 8000ea0:	f000 fe1c 	bl	8001adc <HAL_GPIO_WritePin>
    delay_us(5);
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f000 fa97 	bl	80013d8 <delay_us>
    HAL_SPI_Transmit(&hspi1, &address_byte, 1, HAL_MAX_DELAY);
 8000eaa:	f107 010e 	add.w	r1, r7, #14
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <MFRC522_ReadRegister+0x64>)
 8000eb6:	f002 fc5a 	bl	800376e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &val, 1, HAL_MAX_DELAY);
 8000eba:	f107 010f 	add.w	r1, r7, #15
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MFRC522_ReadRegister+0x64>)
 8000ec6:	f002 fd96 	bl	80039f6 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // CS Disable
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MFRC522_ReadRegister+0x60>)
 8000ed0:	f000 fe04 	bl	8001adc <HAL_GPIO_WritePin>
    return val;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	20000210 	.word	0x20000210

08000ee8 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t Address, uint8_t value) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
    uint8_t address_byte = Address << 1;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // CS Enable
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	480e      	ldr	r0, [pc, #56]	@ (8000f40 <MFRC522_WriteRegister+0x58>)
 8000f06:	f000 fde9 	bl	8001adc <HAL_GPIO_WritePin>
    delay_us(5);
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f000 fa64 	bl	80013d8 <delay_us>
    HAL_SPI_Transmit(&hspi1, &address_byte, 1, HAL_MAX_DELAY);
 8000f10:	f107 010f 	add.w	r1, r7, #15
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2201      	movs	r2, #1
 8000f1a:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <MFRC522_WriteRegister+0x5c>)
 8000f1c:	f002 fc27 	bl	800376e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000f20:	1db9      	adds	r1, r7, #6
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2201      	movs	r2, #1
 8000f28:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MFRC522_WriteRegister+0x5c>)
 8000f2a:	f002 fc20 	bl	800376e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // CS Disable
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2104      	movs	r1, #4
 8000f32:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <MFRC522_WriteRegister+0x58>)
 8000f34:	f000 fdd2 	bl	8001adc <HAL_GPIO_WritePin>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020000 	.word	0x40020000
 8000f44:	20000210 	.word	0x20000210

08000f48 <MFRC522_Request>:
Tra Ve      :   OK          :    Co tim thay thiet bi.
                NOT_OK      :    Chua tim thay thiet bi.
********************************************************************************/

uint8_t MFRC522_Request(uint8_t req_code,uint8_t* pTagType)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
   uint8_t status=MI_ERR;
 8000f54:	2302      	movs	r3, #2
 8000f56:	77fb      	strb	r3, [r7, #31]
   uint16_t  Length;
   uint8_t Buffer[MAXRLEN];

   ClearBitMask(STATUS2_REGISTER,0x08);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	2008      	movs	r0, #8
 8000f5c:	f000 f907 	bl	800116e <ClearBitMask>
   MFRC522_WriteRegister(BIT_FRAMING_REGISTER,0x07);
 8000f60:	2107      	movs	r1, #7
 8000f62:	200d      	movs	r0, #13
 8000f64:	f7ff ffc0 	bl	8000ee8 <MFRC522_WriteRegister>
   SetBitMask(TX_CONTROL_REGISTER,0x03);
 8000f68:	2103      	movs	r1, #3
 8000f6a:	2014      	movs	r0, #20
 8000f6c:	f000 f8e2 	bl	8001134 <SetBitMask>
   Buffer[0] = req_code;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	723b      	strb	r3, [r7, #8]
   status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,1,Buffer,&Length);
 8000f74:	f107 0208 	add.w	r2, r7, #8
 8000f78:	f107 0108 	add.w	r1, r7, #8
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4613      	mov	r3, r2
 8000f84:	2201      	movs	r2, #1
 8000f86:	200c      	movs	r0, #12
 8000f88:	f000 f913 	bl	80011b2 <MFRC522_ComMF522>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	77fb      	strb	r3, [r7, #31]
   if ((status == MI_OK) && (Length == 0x10))
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d109      	bne.n	8000faa <MFRC522_Request+0x62>
 8000f96:	8bbb      	ldrh	r3, [r7, #28]
 8000f98:	2b10      	cmp	r3, #16
 8000f9a:	d106      	bne.n	8000faa <MFRC522_Request+0x62>
   {
       *pTagType     = Buffer[0];
 8000f9c:	7a3a      	ldrb	r2, [r7, #8]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	701a      	strb	r2, [r3, #0]
       *(pTagType+1) = Buffer[1];
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	7a7a      	ldrb	r2, [r7, #9]
 8000fa8:	701a      	strb	r2, [r3, #0]
   }
   return status;
 8000faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <MFRC522_Anticoll>:
Tra Ve      :   OK          :    Thanh cong.
                NOT_OK      :    That bai.
********************************************************************************/

uint8_t MFRC522_Anticoll(uint8_t *pSnr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i,snr_check=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	777b      	strb	r3, [r7, #29]
    uint16_t  Length;
    uint8_t Buffer[MAXRLEN];


    ClearBitMask(STATUS2_REGISTER,0x08);
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	2008      	movs	r0, #8
 8000fc4:	f000 f8d3 	bl	800116e <ClearBitMask>
    MFRC522_WriteRegister(BIT_FRAMING_REGISTER,0x00);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	200d      	movs	r0, #13
 8000fcc:	f7ff ff8c 	bl	8000ee8 <MFRC522_WriteRegister>
    ClearBitMask(COLLISION_REGISTER,0x80);
 8000fd0:	2180      	movs	r1, #128	@ 0x80
 8000fd2:	200e      	movs	r0, #14
 8000fd4:	f000 f8cb 	bl	800116e <ClearBitMask>

    Buffer[0] = PICC_ANTICOLL1;
 8000fd8:	2393      	movs	r3, #147	@ 0x93
 8000fda:	723b      	strb	r3, [r7, #8]
    Buffer[1] = 0x20;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,2,Buffer,&Length);
 8000fe0:	f107 0208 	add.w	r2, r7, #8
 8000fe4:	f107 0108 	add.w	r1, r7, #8
 8000fe8:	f107 031a 	add.w	r3, r7, #26
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	200c      	movs	r0, #12
 8000ff4:	f000 f8dd 	bl	80011b2 <MFRC522_ComMF522>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	77fb      	strb	r3, [r7, #31]

    if (status == MI_OK)
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d123      	bne.n	800104a <MFRC522_Anticoll+0x96>
    {
        for (i=0; i<4; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	77bb      	strb	r3, [r7, #30]
 8001006:	e013      	b.n	8001030 <MFRC522_Anticoll+0x7c>
         {
             *(pSnr+i)  = Buffer[i];
 8001008:	7fba      	ldrb	r2, [r7, #30]
 800100a:	7fbb      	ldrb	r3, [r7, #30]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	440b      	add	r3, r1
 8001010:	3220      	adds	r2, #32
 8001012:	443a      	add	r2, r7
 8001014:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001018:	701a      	strb	r2, [r3, #0]
             snr_check ^= Buffer[i];
 800101a:	7fbb      	ldrb	r3, [r7, #30]
 800101c:	3320      	adds	r3, #32
 800101e:	443b      	add	r3, r7
 8001020:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001024:	7f7b      	ldrb	r3, [r7, #29]
 8001026:	4053      	eors	r3, r2
 8001028:	777b      	strb	r3, [r7, #29]
        for (i=0; i<4; i++)
 800102a:	7fbb      	ldrb	r3, [r7, #30]
 800102c:	3301      	adds	r3, #1
 800102e:	77bb      	strb	r3, [r7, #30]
 8001030:	7fbb      	ldrb	r3, [r7, #30]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d9e8      	bls.n	8001008 <MFRC522_Anticoll+0x54>
         }
         if (snr_check != Buffer[i])
 8001036:	7fbb      	ldrb	r3, [r7, #30]
 8001038:	3320      	adds	r3, #32
 800103a:	443b      	add	r3, r7
 800103c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001040:	7f7a      	ldrb	r2, [r7, #29]
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <MFRC522_Anticoll+0x96>
         {   status = MI_ERR;    }
 8001046:	2302      	movs	r3, #2
 8001048:	77fb      	strb	r3, [r7, #31]
    }

    SetBitMask(COLLISION_REGISTER,0x80);
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	200e      	movs	r0, #14
 800104e:	f000 f871 	bl	8001134 <SetBitMask>
    return status;
 8001052:	7ffb      	ldrb	r3, [r7, #31]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <MFRC522_Halt>:
    {   status = MI_ERR;   }

    return status;
}
uint8_t MFRC522_Halt(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af02      	add	r7, sp, #8
    uint8_t status;
    uint16_t  Length;
    uint8_t Buffer[MAXRLEN];

    Buffer[0] = PICC_HALT;
 8001062:	2350      	movs	r3, #80	@ 0x50
 8001064:	703b      	strb	r3, [r7, #0]
    Buffer[1] = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	707b      	strb	r3, [r7, #1]
    CalulateCRC(Buffer,2,&Buffer[2]);
 800106a:	463b      	mov	r3, r7
 800106c:	1c9a      	adds	r2, r3, #2
 800106e:	463b      	mov	r3, r7
 8001070:	2102      	movs	r1, #2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f811 	bl	800109a <CalulateCRC>

    status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,4,Buffer,&Length);
 8001078:	463a      	mov	r2, r7
 800107a:	4639      	mov	r1, r7
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	2204      	movs	r2, #4
 8001086:	200c      	movs	r0, #12
 8001088:	f000 f893 	bl	80011b2 <MFRC522_ComMF522>
 800108c:	4603      	mov	r3, r0
 800108e:	75fb      	strb	r3, [r7, #23]

    return MI_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <CalulateCRC>:
void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData)
{
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b087      	sub	sp, #28
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	460b      	mov	r3, r1
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	72fb      	strb	r3, [r7, #11]
    uint8_t i,n;
    ClearBitMask(DIV_IRQ_REGISTER,0x04);
 80010a8:	2104      	movs	r1, #4
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 f85f 	bl	800116e <ClearBitMask>
    MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 80010b0:	2100      	movs	r1, #0
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff18 	bl	8000ee8 <MFRC522_WriteRegister>
    SetBitMask(FIFO_LEVEL_REGISTER,0x80);
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 f83a 	bl	8001134 <SetBitMask>
    for (i=0; i<len; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
 80010c4:	e00a      	b.n	80010dc <CalulateCRC+0x42>
    {   MFRC522_WriteRegister(FIFO_DATA_REGISTER, *(pIndata+i));   }
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	2009      	movs	r0, #9
 80010d2:	f7ff ff09 	bl	8000ee8 <MFRC522_WriteRegister>
    for (i=0; i<len; i++)
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	3301      	adds	r3, #1
 80010da:	75fb      	strb	r3, [r7, #23]
 80010dc:	7dfa      	ldrb	r2, [r7, #23]
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3f0      	bcc.n	80010c6 <CalulateCRC+0x2c>
    MFRC522_WriteRegister(COMMAND_REGISTER, MFRC522_CALCCRC);
 80010e4:	2103      	movs	r1, #3
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fefe 	bl	8000ee8 <MFRC522_WriteRegister>
    i = 0xFF;
 80010ec:	23ff      	movs	r3, #255	@ 0xff
 80010ee:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = MFRC522_ReadRegister(DIV_IRQ_REGISTER);
 80010f0:	2005      	movs	r0, #5
 80010f2:	f7ff fec5 	bl	8000e80 <MFRC522_ReadRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	75bb      	strb	r3, [r7, #22]
        i--;
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <CalulateCRC+0x76>
 8001106:	7dbb      	ldrb	r3, [r7, #22]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0ef      	beq.n	80010f0 <CalulateCRC+0x56>
    pOutData[0] = MFRC522_ReadRegister(CRC_RESULT_L_REGISTER);
 8001110:	2022      	movs	r0, #34	@ 0x22
 8001112:	f7ff feb5 	bl	8000e80 <MFRC522_ReadRegister>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	701a      	strb	r2, [r3, #0]
    pOutData[1] = MFRC522_ReadRegister(CRC_RESULT_M_REGISTER);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1c5c      	adds	r4, r3, #1
 8001122:	2021      	movs	r0, #33	@ 0x21
 8001124:	f7ff feac 	bl	8000e80 <MFRC522_ReadRegister>
 8001128:	4603      	mov	r3, r0
 800112a:	7023      	strb	r3, [r4, #0]
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <SetBitMask>:

void SetBitMask(uint8_t reg,uint8_t mask)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
    tmp = MFRC522_ReadRegister(reg);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe98 	bl	8000e80 <MFRC522_ReadRegister>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg,tmp | mask);  // set bit mask
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	4313      	orrs	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fec1 	bl	8000ee8 <MFRC522_WriteRegister>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <ClearBitMask>:
reg: MFRC522's internal register.
mask: specify bits to be cleared.

*/
void ClearBitMask(uint8_t reg,uint8_t mask)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	460a      	mov	r2, r1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	4613      	mov	r3, r2
 800117c:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = 0x0;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
    tmp = MFRC522_ReadRegister(reg);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe7b 	bl	8000e80 <MFRC522_ReadRegister>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp & (~mask));  // clear bit mask
 800118e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001192:	43db      	mvns	r3, r3
 8001194:	b25a      	sxtb	r2, r3
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4013      	ands	r3, r2
 800119c:	b25b      	sxtb	r3, r3
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe9f 	bl	8000ee8 <MFRC522_WriteRegister>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <MFRC522_ComMF522>:
uint8_t  Command,
uint8_t  *pInData,
uint8_t  InLenByte,
uint8_t  *pOutData,
uint16_t *pOutLenBit)
{
 80011b2:	b590      	push	{r4, r7, lr}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	4613      	mov	r3, r2
 80011c2:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 80011c4:	2302      	movs	r3, #2
 80011c6:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn   = 0x00;
 80011c8:	2300      	movs	r3, #0
 80011ca:	75bb      	strb	r3, [r7, #22]
    uint8_t waitFor = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;
    switch (Command)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d006      	beq.n	80011e4 <MFRC522_ComMF522+0x32>
 80011d6:	2b0e      	cmp	r3, #14
 80011d8:	d109      	bne.n	80011ee <MFRC522_ComMF522+0x3c>
    {
       case MFRC522_AUTHENT:
          irqEn   = 0x12;
 80011da:	2312      	movs	r3, #18
 80011dc:	75bb      	strb	r3, [r7, #22]
          waitFor = 0x10;
 80011de:	2310      	movs	r3, #16
 80011e0:	757b      	strb	r3, [r7, #21]
          break;
 80011e2:	e005      	b.n	80011f0 <MFRC522_ComMF522+0x3e>
       case MFRC522_TRANSCEIVE:
          irqEn   = 0x77;
 80011e4:	2377      	movs	r3, #119	@ 0x77
 80011e6:	75bb      	strb	r3, [r7, #22]
          waitFor = 0x30;
 80011e8:	2330      	movs	r3, #48	@ 0x30
 80011ea:	757b      	strb	r3, [r7, #21]
          break;
 80011ec:	e000      	b.n	80011f0 <MFRC522_ComMF522+0x3e>
       default:
         break;
 80011ee:	bf00      	nop
    }

    MFRC522_WriteRegister(IE_REGISTER,irqEn|0x80);
 80011f0:	7dbb      	ldrb	r3, [r7, #22]
 80011f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff fe74 	bl	8000ee8 <MFRC522_WriteRegister>
    ClearBitMask(IRQ_REGISTER,0x80);
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	2004      	movs	r0, #4
 8001204:	f7ff ffb3 	bl	800116e <ClearBitMask>
    MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 8001208:	2100      	movs	r1, #0
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff fe6c 	bl	8000ee8 <MFRC522_WriteRegister>
    SetBitMask(FIFO_LEVEL_REGISTER,0x80);
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	200a      	movs	r0, #10
 8001214:	f7ff ff8e 	bl	8001134 <SetBitMask>

    for (i=0; i<InLenByte; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	827b      	strh	r3, [r7, #18]
 800121c:	e00a      	b.n	8001234 <MFRC522_ComMF522+0x82>
    {
        MFRC522_WriteRegister(FIFO_DATA_REGISTER, pInData[i]);
 800121e:	8a7b      	ldrh	r3, [r7, #18]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	2009      	movs	r0, #9
 800122a:	f7ff fe5d 	bl	8000ee8 <MFRC522_WriteRegister>
    for (i=0; i<InLenByte; i++)
 800122e:	8a7b      	ldrh	r3, [r7, #18]
 8001230:	3301      	adds	r3, #1
 8001232:	827b      	strh	r3, [r7, #18]
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	b29b      	uxth	r3, r3
 8001238:	8a7a      	ldrh	r2, [r7, #18]
 800123a:	429a      	cmp	r2, r3
 800123c:	d3ef      	bcc.n	800121e <MFRC522_ComMF522+0x6c>
    }
    MFRC522_WriteRegister(COMMAND_REGISTER, Command);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	4619      	mov	r1, r3
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff fe50 	bl	8000ee8 <MFRC522_WriteRegister>
    if (Command == MFRC522_TRANSCEIVE)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d103      	bne.n	8001256 <MFRC522_ComMF522+0xa4>
    {    SetBitMask(BIT_FRAMING_REGISTER,0x80);  }
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	200d      	movs	r0, #13
 8001252:	f7ff ff6f 	bl	8001134 <SetBitMask>

    i = 600;//25ms
 8001256:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800125a:	827b      	strh	r3, [r7, #18]
    do
    {
         n = MFRC522_ReadRegister(IRQ_REGISTER);
 800125c:	2004      	movs	r0, #4
 800125e:	f7ff fe0f 	bl	8000e80 <MFRC522_ReadRegister>
 8001262:	4603      	mov	r3, r0
 8001264:	753b      	strb	r3, [r7, #20]
         i--;
 8001266:	8a7b      	ldrh	r3, [r7, #18]
 8001268:	3b01      	subs	r3, #1
 800126a:	827b      	strh	r3, [r7, #18]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitFor));
 800126c:	8a7b      	ldrh	r3, [r7, #18]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00a      	beq.n	8001288 <MFRC522_ComMF522+0xd6>
 8001272:	7d3b      	ldrb	r3, [r7, #20]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <MFRC522_ComMF522+0xd6>
 800127c:	7d3a      	ldrb	r2, [r7, #20]
 800127e:	7d7b      	ldrb	r3, [r7, #21]
 8001280:	4013      	ands	r3, r2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e9      	beq.n	800125c <MFRC522_ComMF522+0xaa>
    ClearBitMask(BIT_FRAMING_REGISTER,0x80);
 8001288:	2180      	movs	r1, #128	@ 0x80
 800128a:	200d      	movs	r0, #13
 800128c:	f7ff ff6f 	bl	800116e <ClearBitMask>

    if (i!=0)
 8001290:	8a7b      	ldrh	r3, [r7, #18]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d057      	beq.n	8001346 <MFRC522_ComMF522+0x194>
    {
         if(!(MFRC522_ReadRegister(ERROR_REGISTER)&0x1B))
 8001296:	2006      	movs	r0, #6
 8001298:	f7ff fdf2 	bl	8000e80 <MFRC522_ReadRegister>
 800129c:	4603      	mov	r3, r0
 800129e:	f003 031b 	and.w	r3, r3, #27
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d14d      	bne.n	8001342 <MFRC522_ComMF522+0x190>
         {
             status = MI_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
             if (n & irqEn & 0x01)
 80012aa:	7d3a      	ldrb	r2, [r7, #20]
 80012ac:	7dbb      	ldrb	r3, [r7, #22]
 80012ae:	4013      	ands	r3, r2
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MFRC522_ComMF522+0x10c>
             {
                status = MI_NOTAGERR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
             }
                   if (Command == MFRC522_TRANSCEIVE)
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d140      	bne.n	8001346 <MFRC522_ComMF522+0x194>
              {
                    n = MFRC522_ReadRegister(FIFO_LEVEL_REGISTER);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f7ff fddb 	bl	8000e80 <MFRC522_ReadRegister>
 80012ca:	4603      	mov	r3, r0
 80012cc:	753b      	strb	r3, [r7, #20]
                   lastBits = MFRC522_ReadRegister(CONTROL_REGISTER) & 0x07;
 80012ce:	200c      	movs	r0, #12
 80012d0:	f7ff fdd6 	bl	8000e80 <MFRC522_ReadRegister>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	747b      	strb	r3, [r7, #17]
                  if (lastBits)
 80012dc:	7c7b      	ldrb	r3, [r7, #17]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <MFRC522_ComMF522+0x148>
                  {
                      *pOutLenBit = (n-1)*8 + lastBits;
 80012e2:	7d3b      	ldrb	r3, [r7, #20]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	7c7b      	ldrb	r3, [r7, #17]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f6:	801a      	strh	r2, [r3, #0]
 80012f8:	e005      	b.n	8001306 <MFRC522_ComMF522+0x154>
                  }
                  else
                  {
                      *pOutLenBit = n*8;
 80012fa:	7d3b      	ldrb	r3, [r7, #20]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	b29a      	uxth	r2, r3
 8001302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001304:	801a      	strh	r2, [r3, #0]
                  }
                  if (n == 0)
 8001306:	7d3b      	ldrb	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <MFRC522_ComMF522+0x15e>
                  {
                      n = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	753b      	strb	r3, [r7, #20]
                  }
                  if (n > MAXRLEN)
 8001310:	7d3b      	ldrb	r3, [r7, #20]
 8001312:	2b12      	cmp	r3, #18
 8001314:	d901      	bls.n	800131a <MFRC522_ComMF522+0x168>
                  {
                      n = MAXRLEN;
 8001316:	2312      	movs	r3, #18
 8001318:	753b      	strb	r3, [r7, #20]
                  }
                  for (i=0; i<n; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	827b      	strh	r3, [r7, #18]
 800131e:	e00a      	b.n	8001336 <MFRC522_ComMF522+0x184>
                  {
                      pOutData[i] = MFRC522_ReadRegister(FIFO_DATA_REGISTER);
 8001320:	8a7b      	ldrh	r3, [r7, #18]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	18d4      	adds	r4, r2, r3
 8001326:	2009      	movs	r0, #9
 8001328:	f7ff fdaa 	bl	8000e80 <MFRC522_ReadRegister>
 800132c:	4603      	mov	r3, r0
 800132e:	7023      	strb	r3, [r4, #0]
                  for (i=0; i<n; i++)
 8001330:	8a7b      	ldrh	r3, [r7, #18]
 8001332:	3301      	adds	r3, #1
 8001334:	827b      	strh	r3, [r7, #18]
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	b29b      	uxth	r3, r3
 800133a:	8a7a      	ldrh	r2, [r7, #18]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3ef      	bcc.n	8001320 <MFRC522_ComMF522+0x16e>
 8001340:	e001      	b.n	8001346 <MFRC522_ComMF522+0x194>
                  }
               }
         }
         else
         {
            status = MI_ERR;
 8001342:	2302      	movs	r3, #2
 8001344:	75fb      	strb	r3, [r7, #23]
         }
   }
   SetBitMask(CONTROL_REGISTER,0x80);                    // stop timer now
 8001346:	2180      	movs	r1, #128	@ 0x80
 8001348:	200c      	movs	r0, #12
 800134a:	f7ff fef3 	bl	8001134 <SetBitMask>
   MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 800134e:	2100      	movs	r1, #0
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fdc9 	bl	8000ee8 <MFRC522_WriteRegister>
   return status;
 8001356:	7dfb      	ldrb	r3, [r7, #23]
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}

08001360 <MFRC522_AntennaOn>:
void MFRC522_AntennaOn()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
    uint8_t i;
    i = MFRC522_ReadRegister(TX_CONTROL_REGISTER);
 8001366:	2014      	movs	r0, #20
 8001368:	f7ff fd8a 	bl	8000e80 <MFRC522_ReadRegister>
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
    if (!(i & 0x03))
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <MFRC522_AntennaOn+0x22>
    {
        SetBitMask(TX_CONTROL_REGISTER, 0x03);
 800137a:	2103      	movs	r1, #3
 800137c:	2014      	movs	r0, #20
 800137e:	f7ff fed9 	bl	8001134 <SetBitMask>
    }
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <delay_init>:

static uint32_t fac_us=0;
static uint32_t fac_ms=0;

void delay_init(uint8_t SYSCLK)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
    SysTick->CTRL&=0xfffffffb;
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <delay_init+0x40>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <delay_init+0x40>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6013      	str	r3, [r2, #0]
    fac_us=SYSCLK/8;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <delay_init+0x44>)
 80013ac:	601a      	str	r2, [r3, #0]
    fac_ms=fac_us*1000;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <delay_init+0x44>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <delay_init+0x48>)
 80013bc:	6013      	str	r3, [r2, #0]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010
 80013d0:	20000208 	.word	0x20000208
 80013d4:	2000020c 	.word	0x2000020c

080013d8 <delay_us>:
void delay_us(uint32_t nus)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    uint32_t temp;
    SysTick->LOAD=nus*fac_us;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <delay_us+0x54>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4912      	ldr	r1, [pc, #72]	@ (8001430 <delay_us+0x58>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	604b      	str	r3, [r1, #4]
    SysTick->VAL=0x00;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <delay_us+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    SysTick->CTRL=0x01 ;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <delay_us+0x58>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
    do
    {
        temp=SysTick->CTRL;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <delay_us+0x58>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
    }
    while(temp&0x01&&!(temp&(1<<16)));
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <delay_us+0x3c>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f2      	beq.n	80013fa <delay_us+0x22>
    SysTick->CTRL=0x00;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <delay_us+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    SysTick->VAL =0X00;
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <delay_us+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000208 	.word	0x20000208
 8001430:	e000e010 	.word	0xe000e010

08001434 <delay_ms>:
void delay_ms(uint32_t nms)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	while(--nms) delay_us(1000);
 800143c:	e003      	b.n	8001446 <delay_ms+0x12>
 800143e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001442:	f7ff ffc9 	bl	80013d8 <delay_us>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f5      	bne.n	800143e <delay_ms+0xa>
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_SPI_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12b      	bne.n	80014d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <HAL_SPI_MspInit+0x88>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_SPI_MspInit+0x88>)
 8001488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_SPI_MspInit+0x88>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_SPI_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_SPI_MspInit+0x88>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_SPI_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014b6:	23e0      	movs	r3, #224	@ 0xe0
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c6:	2305      	movs	r3, #5
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <HAL_SPI_MspInit+0x8c>)
 80014d2:	f000 f967 	bl	80017a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40013000 	.word	0x40013000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <MemManage_Handler+0x4>

08001504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f90f 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <OTG_FS_IRQHandler+0x10>)
 8001552:	f000 fadc 	bl	8001b0e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000270 	.word	0x20000270

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157a:	f004 f9a1 	bl	80058c0 <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	bf00      	nop
 80015a4:	e7fd      	b.n	80015a2 <_exit+0x12>

080015a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e00a      	b.n	80015ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b8:	f3af 8000 	nop.w
 80015bc:	4601      	mov	r1, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbf0      	blt.n	80015b8 <_read+0x12>
  }

  return len;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e009      	b.n	8001606 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	60ba      	str	r2, [r7, #8]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbf1      	blt.n	80015f2 <_write+0x12>
  }
  return len;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_close>:

int _close(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001640:	605a      	str	r2, [r3, #4]
  return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_isatty>:

int _isatty(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f004 f906 	bl	80058c0 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20020000 	.word	0x20020000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000268 	.word	0x20000268
 80016e8:	200007a0 	.word	0x200007a0

080016ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001748 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001714:	f7ff ffea 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	@ (8001750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	@ (800175c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f004 f8c5 	bl	80058cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fa31 	bl	8000ba8 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001754:	08007750 	.word	0x08007750
  ldr r2, =_sbss
 8001758:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800175c:	2000079c 	.word	0x2000079c

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000004 	.word	0x20000004
 8001788:	2000026c 	.word	0x2000026c

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000026c 	.word	0x2000026c

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	@ 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e16b      	b.n	8001a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 815a 	bne.w	8001a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d005      	beq.n	80017f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d130      	bne.n	8001858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182c:	2201      	movs	r2, #1
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 0201 	and.w	r2, r3, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b03      	cmp	r3, #3
 8001862:	d017      	beq.n	8001894 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d123      	bne.n	80018e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	69b9      	ldr	r1, [r7, #24]
 80018e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80b4 	beq.w	8001a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b60      	ldr	r3, [pc, #384]	@ (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab0 <HAL_GPIO_Init+0x30c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab0 <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001946:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab4 <HAL_GPIO_Init+0x310>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_GPIO_Init+0x314>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a51      	ldr	r2, [pc, #324]	@ (8001abc <HAL_GPIO_Init+0x318>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a50      	ldr	r2, [pc, #320]	@ (8001ac0 <HAL_GPIO_Init+0x31c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac4 <HAL_GPIO_Init+0x320>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x21a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac8 <HAL_GPIO_Init+0x324>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x216>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4d      	ldr	r2, [pc, #308]	@ (8001acc <HAL_GPIO_Init+0x328>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x212>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad0 <HAL_GPIO_Init+0x32c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x20e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ad4 <HAL_GPIO_Init+0x330>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x20a>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00e      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x228>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	@ (8001ab4 <HAL_GPIO_Init+0x310>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a32      	ldr	r2, [pc, #200]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a62:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <HAL_GPIO_Init+0x334>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae90 	bls.w	80017c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fc79 	bl	800441c <USB_GetMode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 80fb 	bne.w	8001d28 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fc3c 	bl	80043b4 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80f1 	beq.w	8001d26 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 fc33 	bl	80043b4 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b58:	d104      	bne.n	8001b64 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b62:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fc23 	bl	80043b4 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b78:	d104      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b82:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 fc13 	bl	80043b4 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b98:	d104      	bne.n	8001ba4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ba2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fc03 	bl	80043b4 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d103      	bne.n	8001bc0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fbf5 	bl	80043b4 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd4:	d120      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bde:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d113      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	6938      	ldr	r0, [r7, #16]
 8001bf4:	f002 fb26 	bl	8004244 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bf8:	6938      	ldr	r0, [r7, #16]
 8001bfa:	f002 fb55 	bl	80042a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7a5b      	ldrb	r3, [r3, #9]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d105      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fc13 	bl	8004438 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f002 fecb 	bl	80049ae <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fbc9 	bl	80043b4 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d102      	bne.n	8001c34 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f001 fca1 	bl	8003576 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fbbb 	bl	80043b4 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d106      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f002 fe94 	bl	8004976 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2208      	movs	r2, #8
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fbaa 	bl	80043b4 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c6a:	d139      	bne.n	8001ce0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fc1e 	bl	80044b2 <USB_HC_ReadInterrupt>
 8001c76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e025      	b.n	8001cca <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d018      	beq.n	8001cc4 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f859 	bl	8001d68 <HCD_HC_IN_IRQHandler>
 8001cb6:	e005      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 febb 	bl	8002a3a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d3d3      	bcc.n	8001c7e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fb65 	bl	80043b4 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_IRQHandler+0x1ea>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_HCD_IRQHandler+0x1ec>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d014      	beq.n	8001d28 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0210 	bic.w	r2, r2, #16
 8001d0c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f001 fb52 	bl	80033b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0210 	orr.w	r2, r2, #16
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	e000      	b.n	8001d28 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d26:	bf00      	nop
    }
  }
}
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_HCD_Stop+0x16>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e00d      	b.n	8001d60 <HAL_HCD_Stop+0x32>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 fcdf 	bl	8004714 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fb27 	bl	80043da <USB_ReadChInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d11a      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da2:	461a      	mov	r2, r3
 8001da4:	2304      	movs	r3, #4
 8001da6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	334d      	adds	r3, #77	@ 0x4d
 8001db8:	2207      	movs	r2, #7
 8001dba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fb85 	bl	80044d4 <USB_HC_Halt>
 8001dca:	e09e      	b.n	8001f0a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fb00 	bl	80043da <USB_ReadChInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de4:	d11b      	bne.n	8001e1e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df2:	461a      	mov	r2, r3
 8001df4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	334d      	adds	r3, #77	@ 0x4d
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fb5c 	bl	80044d4 <USB_HC_Halt>
 8001e1c:	e075      	b.n	8001f0a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fad7 	bl	80043da <USB_ReadChInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11a      	bne.n	8001e6c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e42:	461a      	mov	r2, r3
 8001e44:	2308      	movs	r3, #8
 8001e46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	334d      	adds	r3, #77	@ 0x4d
 8001e58:	2206      	movs	r2, #6
 8001e5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fb35 	bl	80044d4 <USB_HC_Halt>
 8001e6a:	e04e      	b.n	8001f0a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fab0 	bl	80043da <USB_ReadChInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e84:	d11b      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e92:	461a      	mov	r2, r3
 8001e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	334d      	adds	r3, #77	@ 0x4d
 8001eaa:	2209      	movs	r2, #9
 8001eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fb0c 	bl	80044d4 <USB_HC_Halt>
 8001ebc:	e025      	b.n	8001f0a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fa87 	bl	80043da <USB_ReadChInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed2:	2b80      	cmp	r3, #128	@ 0x80
 8001ed4:	d119      	bne.n	8001f0a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	334d      	adds	r3, #77	@ 0x4d
 8001ef8:	2207      	movs	r2, #7
 8001efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fae5 	bl	80044d4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fa61 	bl	80043da <USB_ReadChInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f22:	d112      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fad1 	bl	80044d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f44:	6093      	str	r3, [r2, #8]
 8001f46:	f000 bd75 	b.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fa41 	bl	80043da <USB_ReadChInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	f040 8128 	bne.w	80021b4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2320      	movs	r3, #32
 8001f74:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	331b      	adds	r3, #27
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d119      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	0151      	lsls	r1, r2, #5
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	440a      	add	r2, r1
 8001fb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	799b      	ldrb	r3, [r3, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3330      	adds	r3, #48	@ 0x30
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	1ac9      	subs	r1, r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4403      	add	r3, r0
 8001ffc:	3338      	adds	r3, #56	@ 0x38
 8001ffe:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	334d      	adds	r3, #77	@ 0x4d
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	@ 0x44
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3326      	adds	r3, #38	@ 0x26
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3326      	adds	r3, #38	@ 0x26
 8002060:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002062:	2b02      	cmp	r3, #2
 8002064:	d110      	bne.n	8002088 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f002 fa30 	bl	80044d4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2310      	movs	r3, #16
 8002084:	6093      	str	r3, [r2, #8]
 8002086:	e03d      	b.n	8002104 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3326      	adds	r3, #38	@ 0x26
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d00a      	beq.n	80020b4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3326      	adds	r3, #38	@ 0x26
 80020ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d127      	bne.n	8002104 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	0151      	lsls	r1, r2, #5
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	440a      	add	r2, r1
 80020ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	334c      	adds	r3, #76	@ 0x4c
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	334c      	adds	r3, #76	@ 0x4c
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f002 fc63 	bl	80049ca <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	799b      	ldrb	r3, [r3, #6]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d13b      	bne.n	8002184 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3338      	adds	r3, #56	@ 0x38
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	3328      	adds	r3, #40	@ 0x28
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	440b      	add	r3, r1
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	3328      	adds	r3, #40	@ 0x28
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	fbb1 f3f3 	udiv	r3, r1, r3
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8470 	beq.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	333c      	adds	r3, #60	@ 0x3c
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2d8      	uxtb	r0, r3
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	333c      	adds	r3, #60	@ 0x3c
 800217c:	4602      	mov	r2, r0
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	f000 bc58 	b.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	333c      	adds	r3, #60	@ 0x3c
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	333c      	adds	r3, #60	@ 0x3c
 80021ac:	4602      	mov	r2, r0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	f000 bc40 	b.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 f90c 	bl	80043da <USB_ReadChInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d131      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	2320      	movs	r3, #32
 80021dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	331a      	adds	r3, #26
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 841f 	bne.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	331b      	adds	r3, #27
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	334d      	adds	r3, #77	@ 0x4d
 800221a:	2203      	movs	r2, #3
 800221c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f002 f954 	bl	80044d4 <USB_HC_Halt>
 800222c:	f000 bc02 	b.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f002 f8ce 	bl	80043da <USB_ReadChInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	f040 8305 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002256:	461a      	mov	r2, r3
 8002258:	2302      	movs	r3, #2
 800225a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	334d      	adds	r3, #77	@ 0x4d
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d114      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	334d      	adds	r3, #77	@ 0x4d
 8002282:	2202      	movs	r2, #2
 8002284:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	334c      	adds	r3, #76	@ 0x4c
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e2cc      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	334d      	adds	r3, #77	@ 0x4d
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d114      	bne.n	80022dc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	334d      	adds	r3, #77	@ 0x4d
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	334c      	adds	r3, #76	@ 0x4c
 80022d6:	2205      	movs	r2, #5
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	e2ac      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334d      	adds	r3, #77	@ 0x4d
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d00b      	beq.n	800230a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	334d      	adds	r3, #77	@ 0x4d
 8002302:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002304:	2b09      	cmp	r3, #9
 8002306:	f040 80a6 	bne.w	8002456 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	334d      	adds	r3, #77	@ 0x4d
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3344      	adds	r3, #68	@ 0x44
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	3344      	adds	r3, #68	@ 0x44
 8002340:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3344      	adds	r3, #68	@ 0x44
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d943      	bls.n	80023e0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3344      	adds	r3, #68	@ 0x44
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	331a      	adds	r3, #26
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d123      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	331b      	adds	r3, #27
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	331c      	adds	r3, #28
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	0151      	lsls	r1, r2, #5
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	440a      	add	r2, r1
 80023c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	334c      	adds	r3, #76	@ 0x4c
 80023da:	2204      	movs	r2, #4
 80023dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023de:	e229      	b.n	8002834 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334c      	adds	r3, #76	@ 0x4c
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3326      	adds	r3, #38	@ 0x26
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3326      	adds	r3, #38	@ 0x26
 800241a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800241c:	2b02      	cmp	r3, #2
 800241e:	f040 8209 	bne.w	8002834 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002438:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002440:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002454:	e1ee      	b.n	8002834 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	334d      	adds	r3, #77	@ 0x4d
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b05      	cmp	r3, #5
 800246a:	f040 80c8 	bne.w	80025fe <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	334d      	adds	r3, #77	@ 0x4d
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	331b      	adds	r3, #27
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 81ce 	bne.w	8002836 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	3326      	adds	r3, #38	@ 0x26
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d16b      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3348      	adds	r3, #72	@ 0x48
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4403      	add	r3, r0
 80024d0:	3348      	adds	r3, #72	@ 0x48
 80024d2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3348      	adds	r3, #72	@ 0x48
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d943      	bls.n	8002572 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3348      	adds	r3, #72	@ 0x48
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	331b      	adds	r3, #27
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3344      	adds	r3, #68	@ 0x44
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d809      	bhi.n	800253c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	331c      	adds	r3, #28
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	0151      	lsls	r1, r2, #5
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	440a      	add	r2, r1
 8002552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334c      	adds	r3, #76	@ 0x4c
 800256c:	2204      	movs	r2, #4
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e014      	b.n	800259c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	334c      	adds	r3, #76	@ 0x4c
 8002582:	2202      	movs	r2, #2
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e009      	b.n	800259c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334c      	adds	r3, #76	@ 0x4c
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3326      	adds	r3, #38	@ 0x26
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3326      	adds	r3, #38	@ 0x26
 80025c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f040 8136 	bne.w	8002836 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e11b      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	334d      	adds	r3, #77	@ 0x4d
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b03      	cmp	r3, #3
 8002612:	f040 8081 	bne.w	8002718 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	334d      	adds	r3, #77	@ 0x4d
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	331b      	adds	r3, #27
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 80fa 	bne.w	8002836 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	334c      	adds	r3, #76	@ 0x4c
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	0151      	lsls	r1, r2, #5
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	440a      	add	r2, r1
 800266c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002674:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	0151      	lsls	r1, r2, #5
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	440a      	add	r2, r1
 800268c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002694:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	0151      	lsls	r1, r2, #5
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	440a      	add	r2, r1
 80026ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026b0:	f023 0320 	bic.w	r3, r3, #32
 80026b4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3326      	adds	r3, #38	@ 0x26
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3326      	adds	r3, #38	@ 0x26
 80026dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026de:	2b02      	cmp	r3, #2
 80026e0:	f040 80a9 	bne.w	8002836 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002702:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e08e      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334d      	adds	r3, #77	@ 0x4d
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d143      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334d      	adds	r3, #77	@ 0x4d
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	334c      	adds	r3, #76	@ 0x4c
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3326      	adds	r3, #38	@ 0x26
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3326      	adds	r3, #38	@ 0x26
 800277c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800277e:	2b02      	cmp	r3, #2
 8002780:	d159      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002798:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027a0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e03f      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	334d      	adds	r3, #77	@ 0x4d
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d126      	bne.n	800281a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	334d      	adds	r3, #77	@ 0x4d
 80027dc:	2202      	movs	r2, #2
 80027de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3344      	adds	r3, #68	@ 0x44
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4403      	add	r3, r0
 8002800:	3344      	adds	r3, #68	@ 0x44
 8002802:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334c      	adds	r3, #76	@ 0x4c
 8002814:	2204      	movs	r2, #4
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e00d      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334d      	adds	r3, #77	@ 0x4d
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	f000 8100 	beq.w	8002a32 <HCD_HC_IN_IRQHandler+0xcca>
 8002832:	e000      	b.n	8002836 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002834:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	334c      	adds	r3, #76	@ 0x4c
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f002 f8bc 	bl	80049ca <HAL_HCD_HC_NotifyURBChange_Callback>
 8002852:	e0ef      	b.n	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fdbc 	bl	80043da <USB_ReadChInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d12f      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	2340      	movs	r3, #64	@ 0x40
 800287c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	334d      	adds	r3, #77	@ 0x4d
 800288e:	2205      	movs	r2, #5
 8002890:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	331a      	adds	r3, #26
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3344      	adds	r3, #68	@ 0x44
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 fe05 	bl	80044d4 <USB_HC_Halt>
 80028ca:	e0b3      	b.n	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fd80 	bl	80043da <USB_ReadChInterrupts>
 80028da:	4603      	mov	r3, r0
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	f040 80a7 	bne.w	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	3326      	adds	r3, #38	@ 0x26
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d11b      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3344      	adds	r3, #68	@ 0x44
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	334d      	adds	r3, #77	@ 0x4d
 8002920:	2204      	movs	r2, #4
 8002922:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f001 fdd1 	bl	80044d4 <USB_HC_Halt>
 8002932:	e03f      	b.n	80029b4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3326      	adds	r3, #38	@ 0x26
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3326      	adds	r3, #38	@ 0x26
 800295a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800295c:	2b02      	cmp	r3, #2
 800295e:	d129      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3344      	adds	r3, #68	@ 0x44
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	799b      	ldrb	r3, [r3, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HCD_HC_IN_IRQHandler+0xc2a>
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	331b      	adds	r3, #27
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d110      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	334d      	adds	r3, #77	@ 0x4d
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fd90 	bl	80044d4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	331b      	adds	r3, #27
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d129      	bne.n	8002a1e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	331b      	adds	r3, #27
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	0151      	lsls	r1, r2, #5
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	440a      	add	r2, r1
 80029f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	0151      	lsls	r1, r2, #5
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	440a      	add	r2, r1
 8002a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e000      	b.n	8002a34 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a32:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 fcbe 	bl	80043da <USB_ReadChInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2304      	movs	r3, #4
 8002a78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334d      	adds	r3, #77	@ 0x4d
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fd1c 	bl	80044d4 <USB_HC_Halt>
 8002a9c:	f000 bc89 	b.w	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fc96 	bl	80043da <USB_ReadChInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	f040 8082 	bne.w	8002bbe <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2320      	movs	r3, #32
 8002aca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3319      	adds	r3, #25
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d124      	bne.n	8002b2c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3319      	adds	r3, #25
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	334c      	adds	r3, #76	@ 0x4c
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	334d      	adds	r3, #77	@ 0x4d
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fcd4 	bl	80044d4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	331a      	adds	r3, #26
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	f040 8437 	bne.w	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	331b      	adds	r3, #27
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 842b 	bne.w	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3326      	adds	r3, #38	@ 0x26
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d009      	beq.n	8002b86 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	331b      	adds	r3, #27
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	334d      	adds	r3, #77	@ 0x4d
 8002b96:	2203      	movs	r2, #3
 8002b98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 fc96 	bl	80044d4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3344      	adds	r3, #68	@ 0x44
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e3f9      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fc07 	bl	80043da <USB_ReadChInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd6:	d111      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fc6d 	bl	80044d4 <USB_HC_Halt>
 8002bfa:	e3da      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fbe8 	bl	80043da <USB_ReadChInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d168      	bne.n	8002ce6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3344      	adds	r3, #68	@ 0x44
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fbd2 	bl	80043da <USB_ReadChInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3c:	2b40      	cmp	r3, #64	@ 0x40
 8002c3e:	d112      	bne.n	8002c66 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3319      	adds	r3, #25
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c60:	461a      	mov	r2, r3
 8002c62:	2340      	movs	r3, #64	@ 0x40
 8002c64:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	331b      	adds	r3, #27
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d019      	beq.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	331b      	adds	r3, #27
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	334d      	adds	r3, #77	@ 0x4d
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 fbf8 	bl	80044d4 <USB_HC_Halt>
 8002ce4:	e365      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fb73 	bl	80043da <USB_ReadChInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfa:	2b40      	cmp	r3, #64	@ 0x40
 8002cfc:	d139      	bne.n	8002d72 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	334d      	adds	r3, #77	@ 0x4d
 8002d0e:	2205      	movs	r2, #5
 8002d10:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	331a      	adds	r3, #26
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3319      	adds	r3, #25
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3344      	adds	r3, #68	@ 0x44
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fbbb 	bl	80044d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2340      	movs	r3, #64	@ 0x40
 8002d6e:	6093      	str	r3, [r2, #8]
 8002d70:	e31f      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 fb2d 	bl	80043da <USB_ReadChInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11a      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	2308      	movs	r3, #8
 8002d9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	334d      	adds	r3, #77	@ 0x4d
 8002dac:	2206      	movs	r2, #6
 8002dae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 fb8b 	bl	80044d4 <USB_HC_Halt>
 8002dbe:	e2f8      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fb06 	bl	80043da <USB_ReadChInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d144      	bne.n	8002e62 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3344      	adds	r3, #68	@ 0x44
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3319      	adds	r3, #25
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d114      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3318      	adds	r3, #24
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3319      	adds	r3, #25
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fb43 	bl	80044d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e2a7      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fab5 	bl	80043da <USB_ReadChInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	2b80      	cmp	r3, #128	@ 0x80
 8002e78:	f040 8083 	bne.w	8002f82 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	799b      	ldrb	r3, [r3, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	334d      	adds	r3, #77	@ 0x4d
 8002e94:	2207      	movs	r2, #7
 8002e96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fb17 	bl	80044d4 <USB_HC_Halt>
 8002ea6:	e062      	b.n	8002f6e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3344      	adds	r3, #68	@ 0x44
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4403      	add	r3, r0
 8002ec8:	3344      	adds	r3, #68	@ 0x44
 8002eca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3344      	adds	r3, #68	@ 0x44
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d922      	bls.n	8002f28 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3344      	adds	r3, #68	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	334c      	adds	r3, #76	@ 0x4c
 8002f06:	2204      	movs	r2, #4
 8002f08:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	334c      	adds	r3, #76	@ 0x4c
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f001 fd52 	bl	80049ca <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f26:	e022      	b.n	8002f6e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334c      	adds	r3, #76	@ 0x4c
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f52:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f5a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	6093      	str	r3, [r2, #8]
 8002f80:	e217      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 fa25 	bl	80043da <USB_ReadChInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d11b      	bne.n	8002fd4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	334d      	adds	r3, #77	@ 0x4d
 8002fac:	2209      	movs	r2, #9
 8002fae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 fa8b 	bl	80044d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fd0:	6093      	str	r3, [r2, #8]
 8002fd2:	e1ee      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 f9fc 	bl	80043da <USB_ReadChInterrupts>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	f040 81df 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334d      	adds	r3, #77	@ 0x4d
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 8093 	bne.w	800313e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	@ 0x4d
 8003028:	2202      	movs	r2, #2
 800302a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334c      	adds	r3, #76	@ 0x4c
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3326      	adds	r3, #38	@ 0x26
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d00b      	beq.n	800306e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3326      	adds	r3, #38	@ 0x26
 8003066:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003068:	2b03      	cmp	r3, #3
 800306a:	f040 8190 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	799b      	ldrb	r3, [r3, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	333d      	adds	r3, #61	@ 0x3d
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	f083 0301 	eor.w	r3, r3, #1
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	333d      	adds	r3, #61	@ 0x3d
 800309e:	4602      	mov	r2, r0
 80030a0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	799b      	ldrb	r3, [r3, #6]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f040 8171 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x954>
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3334      	adds	r3, #52	@ 0x34
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8165 	beq.w	800338e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3334      	adds	r3, #52	@ 0x34
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4403      	add	r3, r0
 80030e4:	3328      	adds	r3, #40	@ 0x28
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	440b      	add	r3, r1
 80030ea:	1e59      	subs	r1, r3, #1
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	3328      	adds	r3, #40	@ 0x28
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003102:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 813f 	beq.w	800338e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	@ 0x3d
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333d      	adds	r3, #61	@ 0x3d
 8003138:	4602      	mov	r2, r0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e127      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334d      	adds	r3, #77	@ 0x4d
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d120      	bne.n	8003196 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	@ 0x4d
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	331b      	adds	r3, #27
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	f040 8107 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334c      	adds	r3, #76	@ 0x4c
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e0fb      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334d      	adds	r3, #77	@ 0x4d
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d13a      	bne.n	8003222 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	334d      	adds	r3, #77	@ 0x4d
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334c      	adds	r3, #76	@ 0x4c
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	331b      	adds	r3, #27
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	f040 80d1 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	331b      	adds	r3, #27
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	440a      	add	r2, r1
 8003216:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800321a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321e:	6053      	str	r3, [r2, #4]
 8003220:	e0b5      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	334d      	adds	r3, #77	@ 0x4d
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d114      	bne.n	8003262 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	334d      	adds	r3, #77	@ 0x4d
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	334c      	adds	r3, #76	@ 0x4c
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e095      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	334d      	adds	r3, #77	@ 0x4d
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d114      	bne.n	80032a2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334d      	adds	r3, #77	@ 0x4d
 8003288:	2202      	movs	r2, #2
 800328a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	334c      	adds	r3, #76	@ 0x4c
 800329c:	2205      	movs	r2, #5
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e075      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334d      	adds	r3, #77	@ 0x4d
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b07      	cmp	r3, #7
 80032b6:	d00a      	beq.n	80032ce <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	d170      	bne.n	80033b0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3344      	adds	r3, #68	@ 0x44
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c59      	adds	r1, r3, #1
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4403      	add	r3, r0
 8003302:	3344      	adds	r3, #68	@ 0x44
 8003304:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3344      	adds	r3, #68	@ 0x44
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d914      	bls.n	8003346 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3344      	adds	r3, #68	@ 0x44
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334c      	adds	r3, #76	@ 0x4c
 8003340:	2204      	movs	r2, #4
 8003342:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003344:	e022      	b.n	800338c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334c      	adds	r3, #76	@ 0x4c
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003370:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003378:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800338c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334c      	adds	r3, #76	@ 0x4c
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f001 fb10 	bl	80049ca <HAL_HCD_HC_NotifyURBChange_Callback>
 80033aa:	e002      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80033b0:	bf00      	nop
  }
}
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	0c5b      	lsrs	r3, r3, #17
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d004      	beq.n	80033fe <HCD_RXQLVL_IRQHandler+0x46>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	f000 80b6 	beq.w	8003568 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033fc:	e0b7      	b.n	800356e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80b3 	beq.w	800356c <HCD_RXQLVL_IRQHandler+0x1b4>
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	332c      	adds	r3, #44	@ 0x2c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a7 	beq.w	800356c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3338      	adds	r3, #56	@ 0x38
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	18d1      	adds	r1, r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4403      	add	r3, r0
 8003442:	3334      	adds	r3, #52	@ 0x34
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4299      	cmp	r1, r3
 8003448:	f200 8083 	bhi.w	8003552 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	332c      	adds	r3, #44	@ 0x2c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	b292      	uxth	r2, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f000 ff4c 	bl	8004304 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	332c      	adds	r3, #44	@ 0x2c
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	18d1      	adds	r1, r2, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4403      	add	r3, r0
 8003490:	332c      	adds	r3, #44	@ 0x2c
 8003492:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3338      	adds	r3, #56	@ 0x38
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	18d1      	adds	r1, r2, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3338      	adds	r3, #56	@ 0x38
 80034ba:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	0cdb      	lsrs	r3, r3, #19
 80034cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3328      	adds	r3, #40	@ 0x28
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d13f      	bne.n	800356c <HCD_RXQLVL_IRQHandler+0x1b4>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03c      	beq.n	800356c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003508:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003510:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	333c      	adds	r3, #60	@ 0x3c
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2d8      	uxtb	r0, r3
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	333c      	adds	r3, #60	@ 0x3c
 800354c:	4602      	mov	r2, r0
 800354e:	701a      	strb	r2, [r3, #0]
      break;
 8003550:	e00c      	b.n	800356c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	334c      	adds	r3, #76	@ 0x4c
 8003562:	2204      	movs	r2, #4
 8003564:	701a      	strb	r2, [r3, #0]
      break;
 8003566:	e001      	b.n	800356c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800356c:	bf00      	nop
  }
}
 800356e:	bf00      	nop
 8003570:	3728      	adds	r7, #40	@ 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035a2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d10b      	bne.n	80035c6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d102      	bne.n	80035be <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f001 f9ea 	bl	8004992 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d132      	bne.n	8003636 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f043 0308 	orr.w	r3, r3, #8
 80035d6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d126      	bne.n	8003630 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7a5b      	ldrb	r3, [r3, #9]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d113      	bne.n	8003612 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035f4:	d106      	bne.n	8003604 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 ff1b 	bl	8004438 <USB_InitFSLSPClkSel>
 8003602:	e011      	b.n	8003628 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 ff14 	bl	8004438 <USB_InitFSLSPClkSel>
 8003610:	e00a      	b.n	8003628 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	79db      	ldrb	r3, [r3, #7]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d106      	bne.n	8003628 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003620:	461a      	mov	r2, r3
 8003622:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003626:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f001 f9dc 	bl	80049e6 <HAL_HCD_PortEnabled_Callback>
 800362e:	e002      	b.n	8003636 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f001 f9e6 	bl	8004a02 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d103      	bne.n	8003648 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f043 0320 	orr.w	r3, r3, #32
 8003646:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07b      	b.n	8003766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800367e:	d009      	beq.n	8003694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	61da      	str	r2, [r3, #28]
 8003686:	e005      	b.n	8003694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fed4 	bl	800145c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	ea42 0103 	orr.w	r1, r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	f003 0104 	and.w	r1, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	f003 0210 	and.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800377e:	f7fe f805 	bl	800178c <HAL_GetTick>
 8003782:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
 8003796:	e12a      	b.n	80039ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_SPI_Transmit+0x36>
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e122      	b.n	80039ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_SPI_Transmit+0x48>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e11b      	b.n	80039ee <HAL_SPI_Transmit+0x280>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2203      	movs	r2, #3
 80037c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003804:	d10f      	bne.n	8003826 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d007      	beq.n	8003844 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384c:	d152      	bne.n	80038f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0xee>
 8003856:	8b7b      	ldrh	r3, [r7, #26]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d145      	bne.n	80038e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003880:	e032      	b.n	80038e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d112      	bne.n	80038b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038b4:	e018      	b.n	80038e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b6:	f7fd ff69 	bl	800178c <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Transmit+0x160>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit+0x166>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e082      	b.n	80039ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1c7      	bne.n	8003882 <HAL_SPI_Transmit+0x114>
 80038f2:	e053      	b.n	800399c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Transmit+0x194>
 80038fc:	8b7b      	ldrh	r3, [r7, #26]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d147      	bne.n	8003992 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003928:	e033      	b.n	8003992 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d113      	bne.n	8003960 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	7812      	ldrb	r2, [r2, #0]
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800395e:	e018      	b.n	8003992 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003960:	f7fd ff14 	bl	800178c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d803      	bhi.n	8003978 <HAL_SPI_Transmit+0x20a>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d102      	bne.n	800397e <HAL_SPI_Transmit+0x210>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e02d      	b.n	80039ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1c6      	bne.n	800392a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	6839      	ldr	r1, [r7, #0]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fbd9 	bl	8004158 <SPI_EndRxTxTransaction>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b088      	sub	sp, #32
 80039fa:	af02      	add	r7, sp, #8
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e104      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a1e:	d112      	bne.n	8003a46 <HAL_SPI_Receive+0x50>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10e      	bne.n	8003a46 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8f3 	bl	8003c28 <HAL_SPI_TransmitReceive>
 8003a42:	4603      	mov	r3, r0
 8003a44:	e0ec      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a46:	f7fd fea1 	bl	800178c <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_Receive+0x62>
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0e1      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_SPI_Receive+0x74>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0da      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2204      	movs	r2, #4
 8003a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab8:	d10f      	bne.n	8003ada <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b40      	cmp	r3, #64	@ 0x40
 8003ae6:	d007      	beq.n	8003af8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d170      	bne.n	8003be2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b00:	e035      	b.n	8003b6e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f103 020c 	add.w	r2, r3, #12
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b3a:	e018      	b.n	8003b6e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3c:	f7fd fe26 	bl	800178c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d803      	bhi.n	8003b54 <HAL_SPI_Receive+0x15e>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d102      	bne.n	8003b5a <HAL_SPI_Receive+0x164>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e058      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1c4      	bne.n	8003b02 <HAL_SPI_Receive+0x10c>
 8003b78:	e038      	b.n	8003bec <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d113      	bne.n	8003bb0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	b292      	uxth	r2, r2
 8003b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	1c9a      	adds	r2, r3, #2
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bae:	e018      	b.n	8003be2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb0:	f7fd fdec 	bl	800178c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d803      	bhi.n	8003bc8 <HAL_SPI_Receive+0x1d2>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_Receive+0x1d8>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e01e      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1c6      	bne.n	8003b7a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	6839      	ldr	r1, [r7, #0]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fa4b 	bl	800408c <SPI_EndRxTransaction>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c36:	2301      	movs	r3, #1
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fd fda7 	bl	800178c <HAL_GetTick>
 8003c3e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c46:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d00c      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x4a>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c5e:	d106      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x46>
 8003c68:	7ffb      	ldrb	r3, [r7, #31]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d001      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e17f      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x5c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x5c>
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e174      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x6e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e16d      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d003      	beq.n	8003cb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2205      	movs	r2, #5
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	887a      	ldrh	r2, [r7, #2]
 8003cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d007      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d0e:	d17e      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_SPI_TransmitReceive+0xf6>
 8003d18:	8afb      	ldrh	r3, [r7, #22]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d16c      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d42:	e059      	b.n	8003df8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d11b      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x162>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x162>
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d113      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d119      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x1a4>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	b292      	uxth	r2, r2
 8003dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dcc:	f7fd fcde 	bl	800178c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d80d      	bhi.n	8003df8 <HAL_SPI_TransmitReceive+0x1d0>
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d009      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0bc      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1a0      	bne.n	8003d44 <HAL_SPI_TransmitReceive+0x11c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d19b      	bne.n	8003d44 <HAL_SPI_TransmitReceive+0x11c>
 8003e0c:	e082      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x1f4>
 8003e16:	8afb      	ldrh	r3, [r7, #22]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d171      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e42:	e05d      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d11c      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x264>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x264>
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d114      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d119      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x2a6>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d014      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ece:	f7fd fc5d 	bl	800178c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d803      	bhi.n	8003ee6 <HAL_SPI_TransmitReceive+0x2be>
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x2c4>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e038      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d19c      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x21c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d197      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f91d 	bl	8004158 <SPI_EndRxTxTransaction>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01d      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3728      	adds	r7, #40	@ 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f8c:	f7fd fbfe 	bl	800178c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4413      	add	r3, r2
 8003f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f9c:	f7fd fbf6 	bl	800178c <HAL_GetTick>
 8003fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa2:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	0d1b      	lsrs	r3, r3, #20
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb2:	e054      	b.n	800405e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d050      	beq.n	800405e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fbc:	f7fd fbe6 	bl	800178c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d902      	bls.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d13d      	bne.n	800404e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fea:	d111      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff4:	d004      	beq.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d107      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004018:	d10f      	bne.n	800403a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e017      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3b01      	subs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	429a      	cmp	r2, r3
 800407a:	d19b      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000000 	.word	0x20000000

0800408c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040a0:	d111      	bne.n	80040c6 <SPI_EndRxTransaction+0x3a>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040aa:	d004      	beq.n	80040b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b4:	d107      	bne.n	80040c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ce:	d12a      	bne.n	8004126 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d8:	d012      	beq.n	8004100 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	@ 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff ff49 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02d      	beq.n	800414c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e026      	b.n	800414e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	2101      	movs	r1, #1
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff ff36 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01a      	beq.n	800414c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e013      	b.n	800414e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	2101      	movs	r1, #1
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff ff23 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e000      	b.n	800414e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2201      	movs	r2, #1
 800416c:	2102      	movs	r1, #2
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff04 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e032      	b.n	80041f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <SPI_EndRxTxTransaction+0xa0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1b      	ldr	r2, [pc, #108]	@ (80041fc <SPI_EndRxTxTransaction+0xa4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0d5b      	lsrs	r3, r3, #21
 8004196:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a8:	d112      	bne.n	80041d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	@ 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff fee1 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e00f      	b.n	80041f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	3b01      	subs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e6:	2b80      	cmp	r3, #128	@ 0x80
 80041e8:	d0f2      	beq.n	80041d0 <SPI_EndRxTxTransaction+0x78>
 80041ea:	e000      	b.n	80041ee <SPI_EndRxTxTransaction+0x96>
        break;
 80041ec:	bf00      	nop
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000000 	.word	0x20000000
 80041fc:	165e9f81 	.word	0x165e9f81

08004200 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800425e:	d901      	bls.n	8004264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e01b      	b.n	800429c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	daf2      	bge.n	8004252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	019b      	lsls	r3, r3, #6
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004288:	d901      	bls.n	800428e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e006      	b.n	800429c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b20      	cmp	r3, #32
 8004298:	d0f0      	beq.n	800427c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042c0:	d901      	bls.n	80042c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e018      	b.n	80042f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	daf2      	bge.n	80042b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2210      	movs	r2, #16
 80042d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042e4:	d901      	bls.n	80042ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e006      	b.n	80042f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d0f0      	beq.n	80042d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004304:	b480      	push	{r7}
 8004306:	b08b      	sub	sp, #44	@ 0x2c
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	b29b      	uxth	r3, r3
 8004320:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	e014      	b.n	800435a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	601a      	str	r2, [r3, #0]
    pDest++;
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	3301      	adds	r3, #1
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	3301      	adds	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	3301      	adds	r3, #1
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	3301      	adds	r3, #1
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	3301      	adds	r3, #1
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	429a      	cmp	r2, r3
 8004360:	d3e6      	bcc.n	8004330 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004362:	8bfb      	ldrh	r3, [r7, #30]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01e      	beq.n	80043a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004372:	461a      	mov	r2, r3
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	b2da      	uxtb	r2, r3
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	701a      	strb	r2, [r3, #0]
      i++;
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	3301      	adds	r3, #1
 8004392:	623b      	str	r3, [r7, #32]
      pDest++;
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	3301      	adds	r3, #1
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800439a:	8bfb      	ldrh	r3, [r7, #30]
 800439c:	3b01      	subs	r3, #1
 800439e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80043a0:	8bfb      	ldrh	r3, [r7, #30]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ea      	bne.n	800437c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	372c      	adds	r7, #44	@ 0x2c
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800440e:	68bb      	ldr	r3, [r7, #8]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0301 	and.w	r3, r3, #1
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004480:	461a      	mov	r2, r3
 8004482:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004486:	6053      	str	r3, [r2, #4]
 8004488:	e00c      	b.n	80044a4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d107      	bne.n	80044a0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004496:	461a      	mov	r2, r3
 8004498:	f241 7370 	movw	r3, #6000	@ 0x1770
 800449c:	6053      	str	r3, [r2, #4]
 800449e:	e001      	b.n	80044a4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	b29b      	uxth	r3, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	@ 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	0c9b      	lsrs	r3, r3, #18
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	0fdb      	lsrs	r3, r3, #31
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	0fdb      	lsrs	r3, r3, #31
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d10d      	bne.n	8004556 <USB_HC_Halt+0x82>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <USB_HC_Halt+0x82>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d002      	beq.n	8004552 <USB_HC_Halt+0x7e>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d101      	bne.n	8004556 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e0d8      	b.n	8004708 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <USB_HC_Halt+0x8e>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d173      	bne.n	800464a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	440a      	add	r2, r1
 8004578:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800457c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004580:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d14a      	bne.n	8004624 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d133      	bne.n	8004602 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045d8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3301      	adds	r3, #1
 80045de:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045e6:	d82e      	bhi.n	8004646 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045fe:	d0ec      	beq.n	80045da <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004600:	e081      	b.n	8004706 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800461c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004620:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004622:	e070      	b.n	8004706 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800463e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004642:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004644:	e05f      	b.n	8004706 <USB_HC_Halt+0x232>
            break;
 8004646:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004648:	e05d      	b.n	8004706 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004664:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004668:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d133      	bne.n	80046e2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004694:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004698:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046b8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3301      	adds	r3, #1
 80046be:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046c6:	d81d      	bhi.n	8004704 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046de:	d0ec      	beq.n	80046ba <USB_HC_Halt+0x1e6>
 80046e0:	e011      	b.n	8004706 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e000      	b.n	8004706 <USB_HC_Halt+0x232>
          break;
 8004704:	bf00      	nop
    }
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3724      	adds	r7, #36	@ 0x24
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fd7a 	bl	8004222 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800472e:	2110      	movs	r1, #16
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fd87 	bl	8004244 <USB_FlushTxFifo>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fdb1 	bl	80042a8 <USB_FlushRxFifo>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e01f      	b.n	8004796 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800476c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004774:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800477c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	3301      	adds	r3, #1
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b0f      	cmp	r3, #15
 800479a:	d9dc      	bls.n	8004756 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e034      	b.n	800480c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047e8:	d80c      	bhi.n	8004804 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004800:	d0ec      	beq.n	80047dc <USB_StopHost+0xc8>
 8004802:	e000      	b.n	8004806 <USB_StopHost+0xf2>
        break;
 8004804:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3301      	adds	r3, #1
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	d9c7      	bls.n	80047a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fce9 	bl	8004200 <USB_EnableGlobalInt>

  return ret;
 800482e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f804 	bl	800485c <USBH_HandleSof>
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b0b      	cmp	r3, #11
 800486c:	d10a      	bne.n	8004884 <USBH_HandleSof+0x28>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
  }
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800489c:	bf00      	nop
}
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80048b8:	bf00      	nop
}
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f883 	bl	8004a1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	791b      	ldrb	r3, [r3, #4]
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f80b 	bl	800493a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	795b      	ldrb	r3, [r3, #5]
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f805 	bl	800493a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d80d      	bhi.n	8004968 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	33e0      	adds	r3, #224	@ 0xe0
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	33e0      	adds	r3, #224	@ 0xe0
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff57 	bl	8004838 <USBH_LL_IncTimer>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff8f 	bl	80048c4 <USBH_LL_Connect>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff98 	bl	80048f2 <USBH_LL_Disconnect>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	70fb      	strb	r3, [r7, #3]
 80049d6:	4613      	mov	r3, r2
 80049d8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff49 	bl	800488c <USBH_LL_PortEnabled>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ff49 	bl	80048a8 <USBH_LL_PortDisabled>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd f97a 	bl	8001d2e <HAL_HCD_Stop>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 f807 	bl	8004a54 <USBH_Get_USB_Status>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d817      	bhi.n	8004a98 <USBH_Get_USB_Status+0x44>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <USBH_Get_USB_Status+0x1c>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a87 	.word	0x08004a87
 8004a78:	08004a8d 	.word	0x08004a8d
 8004a7c:	08004a93 	.word	0x08004a93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
    break;
 8004a84:	e00b      	b.n	8004a9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004a86:	2302      	movs	r3, #2
 8004a88:	73fb      	strb	r3, [r7, #15]
    break;
 8004a8a:	e008      	b.n	8004a9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a90:	e005      	b.n	8004a9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004a92:	2302      	movs	r3, #2
 8004a94:	73fb      	strb	r3, [r7, #15]
    break;
 8004a96:	e002      	b.n	8004a9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8004a9c:	bf00      	nop
  }
  return usb_status;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <malloc>:
 8004aac:	4b02      	ldr	r3, [pc, #8]	@ (8004ab8 <malloc+0xc>)
 8004aae:	4601      	mov	r1, r0
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f000 b825 	b.w	8004b00 <_malloc_r>
 8004ab6:	bf00      	nop
 8004ab8:	20000014 	.word	0x20000014

08004abc <sbrk_aligned>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4e0f      	ldr	r6, [pc, #60]	@ (8004afc <sbrk_aligned+0x40>)
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	6831      	ldr	r1, [r6, #0]
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	b911      	cbnz	r1, 8004ace <sbrk_aligned+0x12>
 8004ac8:	f000 fed8 	bl	800587c <_sbrk_r>
 8004acc:	6030      	str	r0, [r6, #0]
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 fed3 	bl	800587c <_sbrk_r>
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	d103      	bne.n	8004ae2 <sbrk_aligned+0x26>
 8004ada:	f04f 34ff 	mov.w	r4, #4294967295
 8004ade:	4620      	mov	r0, r4
 8004ae0:	bd70      	pop	{r4, r5, r6, pc}
 8004ae2:	1cc4      	adds	r4, r0, #3
 8004ae4:	f024 0403 	bic.w	r4, r4, #3
 8004ae8:	42a0      	cmp	r0, r4
 8004aea:	d0f8      	beq.n	8004ade <sbrk_aligned+0x22>
 8004aec:	1a21      	subs	r1, r4, r0
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 fec4 	bl	800587c <_sbrk_r>
 8004af4:	3001      	adds	r0, #1
 8004af6:	d1f2      	bne.n	8004ade <sbrk_aligned+0x22>
 8004af8:	e7ef      	b.n	8004ada <sbrk_aligned+0x1e>
 8004afa:	bf00      	nop
 8004afc:	20000650 	.word	0x20000650

08004b00 <_malloc_r>:
 8004b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b04:	1ccd      	adds	r5, r1, #3
 8004b06:	f025 0503 	bic.w	r5, r5, #3
 8004b0a:	3508      	adds	r5, #8
 8004b0c:	2d0c      	cmp	r5, #12
 8004b0e:	bf38      	it	cc
 8004b10:	250c      	movcc	r5, #12
 8004b12:	2d00      	cmp	r5, #0
 8004b14:	4606      	mov	r6, r0
 8004b16:	db01      	blt.n	8004b1c <_malloc_r+0x1c>
 8004b18:	42a9      	cmp	r1, r5
 8004b1a:	d904      	bls.n	8004b26 <_malloc_r+0x26>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	2000      	movs	r0, #0
 8004b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bfc <_malloc_r+0xfc>
 8004b2a:	f000 f869 	bl	8004c00 <__malloc_lock>
 8004b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b32:	461c      	mov	r4, r3
 8004b34:	bb44      	cbnz	r4, 8004b88 <_malloc_r+0x88>
 8004b36:	4629      	mov	r1, r5
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f7ff ffbf 	bl	8004abc <sbrk_aligned>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	4604      	mov	r4, r0
 8004b42:	d158      	bne.n	8004bf6 <_malloc_r+0xf6>
 8004b44:	f8d8 4000 	ldr.w	r4, [r8]
 8004b48:	4627      	mov	r7, r4
 8004b4a:	2f00      	cmp	r7, #0
 8004b4c:	d143      	bne.n	8004bd6 <_malloc_r+0xd6>
 8004b4e:	2c00      	cmp	r4, #0
 8004b50:	d04b      	beq.n	8004bea <_malloc_r+0xea>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	4639      	mov	r1, r7
 8004b56:	4630      	mov	r0, r6
 8004b58:	eb04 0903 	add.w	r9, r4, r3
 8004b5c:	f000 fe8e 	bl	800587c <_sbrk_r>
 8004b60:	4581      	cmp	r9, r0
 8004b62:	d142      	bne.n	8004bea <_malloc_r+0xea>
 8004b64:	6821      	ldr	r1, [r4, #0]
 8004b66:	1a6d      	subs	r5, r5, r1
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f7ff ffa6 	bl	8004abc <sbrk_aligned>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d03a      	beq.n	8004bea <_malloc_r+0xea>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	442b      	add	r3, r5
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	bb62      	cbnz	r2, 8004bdc <_malloc_r+0xdc>
 8004b82:	f8c8 7000 	str.w	r7, [r8]
 8004b86:	e00f      	b.n	8004ba8 <_malloc_r+0xa8>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	1b52      	subs	r2, r2, r5
 8004b8c:	d420      	bmi.n	8004bd0 <_malloc_r+0xd0>
 8004b8e:	2a0b      	cmp	r2, #11
 8004b90:	d917      	bls.n	8004bc2 <_malloc_r+0xc2>
 8004b92:	1961      	adds	r1, r4, r5
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	6025      	str	r5, [r4, #0]
 8004b98:	bf18      	it	ne
 8004b9a:	6059      	strne	r1, [r3, #4]
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	bf08      	it	eq
 8004ba0:	f8c8 1000 	streq.w	r1, [r8]
 8004ba4:	5162      	str	r2, [r4, r5]
 8004ba6:	604b      	str	r3, [r1, #4]
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f82f 	bl	8004c0c <__malloc_unlock>
 8004bae:	f104 000b 	add.w	r0, r4, #11
 8004bb2:	1d23      	adds	r3, r4, #4
 8004bb4:	f020 0007 	bic.w	r0, r0, #7
 8004bb8:	1ac2      	subs	r2, r0, r3
 8004bba:	bf1c      	itt	ne
 8004bbc:	1a1b      	subne	r3, r3, r0
 8004bbe:	50a3      	strne	r3, [r4, r2]
 8004bc0:	e7af      	b.n	8004b22 <_malloc_r+0x22>
 8004bc2:	6862      	ldr	r2, [r4, #4]
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	bf0c      	ite	eq
 8004bc8:	f8c8 2000 	streq.w	r2, [r8]
 8004bcc:	605a      	strne	r2, [r3, #4]
 8004bce:	e7eb      	b.n	8004ba8 <_malloc_r+0xa8>
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	6864      	ldr	r4, [r4, #4]
 8004bd4:	e7ae      	b.n	8004b34 <_malloc_r+0x34>
 8004bd6:	463c      	mov	r4, r7
 8004bd8:	687f      	ldr	r7, [r7, #4]
 8004bda:	e7b6      	b.n	8004b4a <_malloc_r+0x4a>
 8004bdc:	461a      	mov	r2, r3
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d1fb      	bne.n	8004bdc <_malloc_r+0xdc>
 8004be4:	2300      	movs	r3, #0
 8004be6:	6053      	str	r3, [r2, #4]
 8004be8:	e7de      	b.n	8004ba8 <_malloc_r+0xa8>
 8004bea:	230c      	movs	r3, #12
 8004bec:	6033      	str	r3, [r6, #0]
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 f80c 	bl	8004c0c <__malloc_unlock>
 8004bf4:	e794      	b.n	8004b20 <_malloc_r+0x20>
 8004bf6:	6005      	str	r5, [r0, #0]
 8004bf8:	e7d6      	b.n	8004ba8 <_malloc_r+0xa8>
 8004bfa:	bf00      	nop
 8004bfc:	20000654 	.word	0x20000654

08004c00 <__malloc_lock>:
 8004c00:	4801      	ldr	r0, [pc, #4]	@ (8004c08 <__malloc_lock+0x8>)
 8004c02:	f000 be88 	b.w	8005916 <__retarget_lock_acquire_recursive>
 8004c06:	bf00      	nop
 8004c08:	20000798 	.word	0x20000798

08004c0c <__malloc_unlock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	@ (8004c14 <__malloc_unlock+0x8>)
 8004c0e:	f000 be83 	b.w	8005918 <__retarget_lock_release_recursive>
 8004c12:	bf00      	nop
 8004c14:	20000798 	.word	0x20000798

08004c18 <__cvt>:
 8004c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	ec57 6b10 	vmov	r6, r7, d0
 8004c20:	2f00      	cmp	r7, #0
 8004c22:	460c      	mov	r4, r1
 8004c24:	4619      	mov	r1, r3
 8004c26:	463b      	mov	r3, r7
 8004c28:	bfbb      	ittet	lt
 8004c2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c2e:	461f      	movlt	r7, r3
 8004c30:	2300      	movge	r3, #0
 8004c32:	232d      	movlt	r3, #45	@ 0x2d
 8004c34:	700b      	strb	r3, [r1, #0]
 8004c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c3c:	4691      	mov	r9, r2
 8004c3e:	f023 0820 	bic.w	r8, r3, #32
 8004c42:	bfbc      	itt	lt
 8004c44:	4632      	movlt	r2, r6
 8004c46:	4616      	movlt	r6, r2
 8004c48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c4c:	d005      	beq.n	8004c5a <__cvt+0x42>
 8004c4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c52:	d100      	bne.n	8004c56 <__cvt+0x3e>
 8004c54:	3401      	adds	r4, #1
 8004c56:	2102      	movs	r1, #2
 8004c58:	e000      	b.n	8004c5c <__cvt+0x44>
 8004c5a:	2103      	movs	r1, #3
 8004c5c:	ab03      	add	r3, sp, #12
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	ab02      	add	r3, sp, #8
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	ec47 6b10 	vmov	d0, r6, r7
 8004c68:	4653      	mov	r3, sl
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	f000 fee0 	bl	8005a30 <_dtoa_r>
 8004c70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c74:	4605      	mov	r5, r0
 8004c76:	d119      	bne.n	8004cac <__cvt+0x94>
 8004c78:	f019 0f01 	tst.w	r9, #1
 8004c7c:	d00e      	beq.n	8004c9c <__cvt+0x84>
 8004c7e:	eb00 0904 	add.w	r9, r0, r4
 8004c82:	2200      	movs	r2, #0
 8004c84:	2300      	movs	r3, #0
 8004c86:	4630      	mov	r0, r6
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c8e:	b108      	cbz	r0, 8004c94 <__cvt+0x7c>
 8004c90:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c94:	2230      	movs	r2, #48	@ 0x30
 8004c96:	9b03      	ldr	r3, [sp, #12]
 8004c98:	454b      	cmp	r3, r9
 8004c9a:	d31e      	bcc.n	8004cda <__cvt+0xc2>
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ca0:	1b5b      	subs	r3, r3, r5
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	b004      	add	sp, #16
 8004ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004cb0:	eb00 0904 	add.w	r9, r0, r4
 8004cb4:	d1e5      	bne.n	8004c82 <__cvt+0x6a>
 8004cb6:	7803      	ldrb	r3, [r0, #0]
 8004cb8:	2b30      	cmp	r3, #48	@ 0x30
 8004cba:	d10a      	bne.n	8004cd2 <__cvt+0xba>
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cc8:	b918      	cbnz	r0, 8004cd2 <__cvt+0xba>
 8004cca:	f1c4 0401 	rsb	r4, r4, #1
 8004cce:	f8ca 4000 	str.w	r4, [sl]
 8004cd2:	f8da 3000 	ldr.w	r3, [sl]
 8004cd6:	4499      	add	r9, r3
 8004cd8:	e7d3      	b.n	8004c82 <__cvt+0x6a>
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	9103      	str	r1, [sp, #12]
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e7d9      	b.n	8004c96 <__cvt+0x7e>

08004ce2 <__exponent>:
 8004ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	bfba      	itte	lt
 8004ce8:	4249      	neglt	r1, r1
 8004cea:	232d      	movlt	r3, #45	@ 0x2d
 8004cec:	232b      	movge	r3, #43	@ 0x2b
 8004cee:	2909      	cmp	r1, #9
 8004cf0:	7002      	strb	r2, [r0, #0]
 8004cf2:	7043      	strb	r3, [r0, #1]
 8004cf4:	dd29      	ble.n	8004d4a <__exponent+0x68>
 8004cf6:	f10d 0307 	add.w	r3, sp, #7
 8004cfa:	461d      	mov	r5, r3
 8004cfc:	270a      	movs	r7, #10
 8004cfe:	461a      	mov	r2, r3
 8004d00:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d04:	fb07 1416 	mls	r4, r7, r6, r1
 8004d08:	3430      	adds	r4, #48	@ 0x30
 8004d0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d0e:	460c      	mov	r4, r1
 8004d10:	2c63      	cmp	r4, #99	@ 0x63
 8004d12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d16:	4631      	mov	r1, r6
 8004d18:	dcf1      	bgt.n	8004cfe <__exponent+0x1c>
 8004d1a:	3130      	adds	r1, #48	@ 0x30
 8004d1c:	1e94      	subs	r4, r2, #2
 8004d1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d22:	1c41      	adds	r1, r0, #1
 8004d24:	4623      	mov	r3, r4
 8004d26:	42ab      	cmp	r3, r5
 8004d28:	d30a      	bcc.n	8004d40 <__exponent+0x5e>
 8004d2a:	f10d 0309 	add.w	r3, sp, #9
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	42ac      	cmp	r4, r5
 8004d32:	bf88      	it	hi
 8004d34:	2300      	movhi	r3, #0
 8004d36:	3302      	adds	r3, #2
 8004d38:	4403      	add	r3, r0
 8004d3a:	1a18      	subs	r0, r3, r0
 8004d3c:	b003      	add	sp, #12
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d48:	e7ed      	b.n	8004d26 <__exponent+0x44>
 8004d4a:	2330      	movs	r3, #48	@ 0x30
 8004d4c:	3130      	adds	r1, #48	@ 0x30
 8004d4e:	7083      	strb	r3, [r0, #2]
 8004d50:	70c1      	strb	r1, [r0, #3]
 8004d52:	1d03      	adds	r3, r0, #4
 8004d54:	e7f1      	b.n	8004d3a <__exponent+0x58>
	...

08004d58 <_printf_float>:
 8004d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5c:	b08d      	sub	sp, #52	@ 0x34
 8004d5e:	460c      	mov	r4, r1
 8004d60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d64:	4616      	mov	r6, r2
 8004d66:	461f      	mov	r7, r3
 8004d68:	4605      	mov	r5, r0
 8004d6a:	f000 fd4f 	bl	800580c <_localeconv_r>
 8004d6e:	6803      	ldr	r3, [r0, #0]
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fa7c 	bl	8000270 <strlen>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d80:	9005      	str	r0, [sp, #20]
 8004d82:	3307      	adds	r3, #7
 8004d84:	f023 0307 	bic.w	r3, r3, #7
 8004d88:	f103 0208 	add.w	r2, r3, #8
 8004d8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d90:	f8d4 b000 	ldr.w	fp, [r4]
 8004d94:	f8c8 2000 	str.w	r2, [r8]
 8004d98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004da0:	9307      	str	r3, [sp, #28]
 8004da2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004da6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dae:	4b9c      	ldr	r3, [pc, #624]	@ (8005020 <_printf_float+0x2c8>)
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	f7fb feba 	bl	8000b2c <__aeabi_dcmpun>
 8004db8:	bb70      	cbnz	r0, 8004e18 <_printf_float+0xc0>
 8004dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dbe:	4b98      	ldr	r3, [pc, #608]	@ (8005020 <_printf_float+0x2c8>)
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	f7fb fe94 	bl	8000af0 <__aeabi_dcmple>
 8004dc8:	bb30      	cbnz	r0, 8004e18 <_printf_float+0xc0>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	f7fb fe83 	bl	8000adc <__aeabi_dcmplt>
 8004dd6:	b110      	cbz	r0, 8004dde <_printf_float+0x86>
 8004dd8:	232d      	movs	r3, #45	@ 0x2d
 8004dda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dde:	4a91      	ldr	r2, [pc, #580]	@ (8005024 <_printf_float+0x2cc>)
 8004de0:	4b91      	ldr	r3, [pc, #580]	@ (8005028 <_printf_float+0x2d0>)
 8004de2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004de6:	bf94      	ite	ls
 8004de8:	4690      	movls	r8, r2
 8004dea:	4698      	movhi	r8, r3
 8004dec:	2303      	movs	r3, #3
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	f02b 0304 	bic.w	r3, fp, #4
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	f04f 0900 	mov.w	r9, #0
 8004dfa:	9700      	str	r7, [sp, #0]
 8004dfc:	4633      	mov	r3, r6
 8004dfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e00:	4621      	mov	r1, r4
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 f9d2 	bl	80051ac <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f040 808d 	bne.w	8004f28 <_printf_float+0x1d0>
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	b00d      	add	sp, #52	@ 0x34
 8004e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	4649      	mov	r1, r9
 8004e20:	f7fb fe84 	bl	8000b2c <__aeabi_dcmpun>
 8004e24:	b140      	cbz	r0, 8004e38 <_printf_float+0xe0>
 8004e26:	464b      	mov	r3, r9
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bfbc      	itt	lt
 8004e2c:	232d      	movlt	r3, #45	@ 0x2d
 8004e2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e32:	4a7e      	ldr	r2, [pc, #504]	@ (800502c <_printf_float+0x2d4>)
 8004e34:	4b7e      	ldr	r3, [pc, #504]	@ (8005030 <_printf_float+0x2d8>)
 8004e36:	e7d4      	b.n	8004de2 <_printf_float+0x8a>
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e3e:	9206      	str	r2, [sp, #24]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	d13b      	bne.n	8004ebc <_printf_float+0x164>
 8004e44:	2306      	movs	r3, #6
 8004e46:	6063      	str	r3, [r4, #4]
 8004e48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	9303      	str	r3, [sp, #12]
 8004e52:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e58:	ab09      	add	r3, sp, #36	@ 0x24
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	6861      	ldr	r1, [r4, #4]
 8004e5e:	ec49 8b10 	vmov	d0, r8, r9
 8004e62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e66:	4628      	mov	r0, r5
 8004e68:	f7ff fed6 	bl	8004c18 <__cvt>
 8004e6c:	9b06      	ldr	r3, [sp, #24]
 8004e6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e70:	2b47      	cmp	r3, #71	@ 0x47
 8004e72:	4680      	mov	r8, r0
 8004e74:	d129      	bne.n	8004eca <_printf_float+0x172>
 8004e76:	1cc8      	adds	r0, r1, #3
 8004e78:	db02      	blt.n	8004e80 <_printf_float+0x128>
 8004e7a:	6863      	ldr	r3, [r4, #4]
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	dd41      	ble.n	8004f04 <_printf_float+0x1ac>
 8004e80:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e84:	fa5f fa8a 	uxtb.w	sl, sl
 8004e88:	3901      	subs	r1, #1
 8004e8a:	4652      	mov	r2, sl
 8004e8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e90:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e92:	f7ff ff26 	bl	8004ce2 <__exponent>
 8004e96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e98:	1813      	adds	r3, r2, r0
 8004e9a:	2a01      	cmp	r2, #1
 8004e9c:	4681      	mov	r9, r0
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	dc02      	bgt.n	8004ea8 <_printf_float+0x150>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	07d2      	lsls	r2, r2, #31
 8004ea6:	d501      	bpl.n	8004eac <_printf_float+0x154>
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0a2      	beq.n	8004dfa <_printf_float+0xa2>
 8004eb4:	232d      	movs	r3, #45	@ 0x2d
 8004eb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eba:	e79e      	b.n	8004dfa <_printf_float+0xa2>
 8004ebc:	9a06      	ldr	r2, [sp, #24]
 8004ebe:	2a47      	cmp	r2, #71	@ 0x47
 8004ec0:	d1c2      	bne.n	8004e48 <_printf_float+0xf0>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1c0      	bne.n	8004e48 <_printf_float+0xf0>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e7bd      	b.n	8004e46 <_printf_float+0xee>
 8004eca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ece:	d9db      	bls.n	8004e88 <_printf_float+0x130>
 8004ed0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ed4:	d118      	bne.n	8004f08 <_printf_float+0x1b0>
 8004ed6:	2900      	cmp	r1, #0
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	dd0b      	ble.n	8004ef4 <_printf_float+0x19c>
 8004edc:	6121      	str	r1, [r4, #16]
 8004ede:	b913      	cbnz	r3, 8004ee6 <_printf_float+0x18e>
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	07d0      	lsls	r0, r2, #31
 8004ee4:	d502      	bpl.n	8004eec <_printf_float+0x194>
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	440b      	add	r3, r1
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004eee:	f04f 0900 	mov.w	r9, #0
 8004ef2:	e7db      	b.n	8004eac <_printf_float+0x154>
 8004ef4:	b913      	cbnz	r3, 8004efc <_printf_float+0x1a4>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	07d2      	lsls	r2, r2, #31
 8004efa:	d501      	bpl.n	8004f00 <_printf_float+0x1a8>
 8004efc:	3302      	adds	r3, #2
 8004efe:	e7f4      	b.n	8004eea <_printf_float+0x192>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e7f2      	b.n	8004eea <_printf_float+0x192>
 8004f04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f0a:	4299      	cmp	r1, r3
 8004f0c:	db05      	blt.n	8004f1a <_printf_float+0x1c2>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	6121      	str	r1, [r4, #16]
 8004f12:	07d8      	lsls	r0, r3, #31
 8004f14:	d5ea      	bpl.n	8004eec <_printf_float+0x194>
 8004f16:	1c4b      	adds	r3, r1, #1
 8004f18:	e7e7      	b.n	8004eea <_printf_float+0x192>
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	bfd4      	ite	le
 8004f1e:	f1c1 0202 	rsble	r2, r1, #2
 8004f22:	2201      	movgt	r2, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	e7e0      	b.n	8004eea <_printf_float+0x192>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	055a      	lsls	r2, r3, #21
 8004f2c:	d407      	bmi.n	8004f3e <_printf_float+0x1e6>
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	4642      	mov	r2, r8
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d12b      	bne.n	8004f94 <_printf_float+0x23c>
 8004f3c:	e767      	b.n	8004e0e <_printf_float+0xb6>
 8004f3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f42:	f240 80dd 	bls.w	8005100 <_printf_float+0x3a8>
 8004f46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f7fb fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d033      	beq.n	8004fbe <_printf_float+0x266>
 8004f56:	4a37      	ldr	r2, [pc, #220]	@ (8005034 <_printf_float+0x2dc>)
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f af54 	beq.w	8004e0e <_printf_float+0xb6>
 8004f66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f6a:	4543      	cmp	r3, r8
 8004f6c:	db02      	blt.n	8004f74 <_printf_float+0x21c>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07d8      	lsls	r0, r3, #31
 8004f72:	d50f      	bpl.n	8004f94 <_printf_float+0x23c>
 8004f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f af45 	beq.w	8004e0e <_printf_float+0xb6>
 8004f84:	f04f 0900 	mov.w	r9, #0
 8004f88:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f8c:	f104 0a1a 	add.w	sl, r4, #26
 8004f90:	45c8      	cmp	r8, r9
 8004f92:	dc09      	bgt.n	8004fa8 <_printf_float+0x250>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	f100 8103 	bmi.w	80051a2 <_printf_float+0x44a>
 8004f9c:	68e0      	ldr	r0, [r4, #12]
 8004f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fa0:	4298      	cmp	r0, r3
 8004fa2:	bfb8      	it	lt
 8004fa4:	4618      	movlt	r0, r3
 8004fa6:	e734      	b.n	8004e12 <_printf_float+0xba>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4652      	mov	r2, sl
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af2b 	beq.w	8004e0e <_printf_float+0xb6>
 8004fb8:	f109 0901 	add.w	r9, r9, #1
 8004fbc:	e7e8      	b.n	8004f90 <_printf_float+0x238>
 8004fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dc39      	bgt.n	8005038 <_printf_float+0x2e0>
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <_printf_float+0x2dc>)
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f43f af1d 	beq.w	8004e0e <_printf_float+0xb6>
 8004fd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fd8:	ea59 0303 	orrs.w	r3, r9, r3
 8004fdc:	d102      	bne.n	8004fe4 <_printf_float+0x28c>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	07d9      	lsls	r1, r3, #31
 8004fe2:	d5d7      	bpl.n	8004f94 <_printf_float+0x23c>
 8004fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4628      	mov	r0, r5
 8004fec:	47b8      	blx	r7
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f43f af0d 	beq.w	8004e0e <_printf_float+0xb6>
 8004ff4:	f04f 0a00 	mov.w	sl, #0
 8004ff8:	f104 0b1a 	add.w	fp, r4, #26
 8004ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ffe:	425b      	negs	r3, r3
 8005000:	4553      	cmp	r3, sl
 8005002:	dc01      	bgt.n	8005008 <_printf_float+0x2b0>
 8005004:	464b      	mov	r3, r9
 8005006:	e793      	b.n	8004f30 <_printf_float+0x1d8>
 8005008:	2301      	movs	r3, #1
 800500a:	465a      	mov	r2, fp
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f aefb 	beq.w	8004e0e <_printf_float+0xb6>
 8005018:	f10a 0a01 	add.w	sl, sl, #1
 800501c:	e7ee      	b.n	8004ffc <_printf_float+0x2a4>
 800501e:	bf00      	nop
 8005020:	7fefffff 	.word	0x7fefffff
 8005024:	080073cd 	.word	0x080073cd
 8005028:	080073d1 	.word	0x080073d1
 800502c:	080073d5 	.word	0x080073d5
 8005030:	080073d9 	.word	0x080073d9
 8005034:	080073dd 	.word	0x080073dd
 8005038:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800503a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800503e:	4553      	cmp	r3, sl
 8005040:	bfa8      	it	ge
 8005042:	4653      	movge	r3, sl
 8005044:	2b00      	cmp	r3, #0
 8005046:	4699      	mov	r9, r3
 8005048:	dc36      	bgt.n	80050b8 <_printf_float+0x360>
 800504a:	f04f 0b00 	mov.w	fp, #0
 800504e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005052:	f104 021a 	add.w	r2, r4, #26
 8005056:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005058:	9306      	str	r3, [sp, #24]
 800505a:	eba3 0309 	sub.w	r3, r3, r9
 800505e:	455b      	cmp	r3, fp
 8005060:	dc31      	bgt.n	80050c6 <_printf_float+0x36e>
 8005062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005064:	459a      	cmp	sl, r3
 8005066:	dc3a      	bgt.n	80050de <_printf_float+0x386>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	07da      	lsls	r2, r3, #31
 800506c:	d437      	bmi.n	80050de <_printf_float+0x386>
 800506e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005070:	ebaa 0903 	sub.w	r9, sl, r3
 8005074:	9b06      	ldr	r3, [sp, #24]
 8005076:	ebaa 0303 	sub.w	r3, sl, r3
 800507a:	4599      	cmp	r9, r3
 800507c:	bfa8      	it	ge
 800507e:	4699      	movge	r9, r3
 8005080:	f1b9 0f00 	cmp.w	r9, #0
 8005084:	dc33      	bgt.n	80050ee <_printf_float+0x396>
 8005086:	f04f 0800 	mov.w	r8, #0
 800508a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800508e:	f104 0b1a 	add.w	fp, r4, #26
 8005092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005094:	ebaa 0303 	sub.w	r3, sl, r3
 8005098:	eba3 0309 	sub.w	r3, r3, r9
 800509c:	4543      	cmp	r3, r8
 800509e:	f77f af79 	ble.w	8004f94 <_printf_float+0x23c>
 80050a2:	2301      	movs	r3, #1
 80050a4:	465a      	mov	r2, fp
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f aeae 	beq.w	8004e0e <_printf_float+0xb6>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	e7ec      	b.n	8005092 <_printf_float+0x33a>
 80050b8:	4642      	mov	r2, r8
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	d1c2      	bne.n	800504a <_printf_float+0x2f2>
 80050c4:	e6a3      	b.n	8004e0e <_printf_float+0xb6>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	9206      	str	r2, [sp, #24]
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	f43f ae9c 	beq.w	8004e0e <_printf_float+0xb6>
 80050d6:	9a06      	ldr	r2, [sp, #24]
 80050d8:	f10b 0b01 	add.w	fp, fp, #1
 80050dc:	e7bb      	b.n	8005056 <_printf_float+0x2fe>
 80050de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	d1c0      	bne.n	800506e <_printf_float+0x316>
 80050ec:	e68f      	b.n	8004e0e <_printf_float+0xb6>
 80050ee:	9a06      	ldr	r2, [sp, #24]
 80050f0:	464b      	mov	r3, r9
 80050f2:	4442      	add	r2, r8
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	d1c3      	bne.n	8005086 <_printf_float+0x32e>
 80050fe:	e686      	b.n	8004e0e <_printf_float+0xb6>
 8005100:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005104:	f1ba 0f01 	cmp.w	sl, #1
 8005108:	dc01      	bgt.n	800510e <_printf_float+0x3b6>
 800510a:	07db      	lsls	r3, r3, #31
 800510c:	d536      	bpl.n	800517c <_printf_float+0x424>
 800510e:	2301      	movs	r3, #1
 8005110:	4642      	mov	r2, r8
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae78 	beq.w	8004e0e <_printf_float+0xb6>
 800511e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005122:	4631      	mov	r1, r6
 8005124:	4628      	mov	r0, r5
 8005126:	47b8      	blx	r7
 8005128:	3001      	adds	r0, #1
 800512a:	f43f ae70 	beq.w	8004e0e <_printf_float+0xb6>
 800512e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005132:	2200      	movs	r2, #0
 8005134:	2300      	movs	r3, #0
 8005136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800513a:	f7fb fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800513e:	b9c0      	cbnz	r0, 8005172 <_printf_float+0x41a>
 8005140:	4653      	mov	r3, sl
 8005142:	f108 0201 	add.w	r2, r8, #1
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	d10c      	bne.n	800516a <_printf_float+0x412>
 8005150:	e65d      	b.n	8004e0e <_printf_float+0xb6>
 8005152:	2301      	movs	r3, #1
 8005154:	465a      	mov	r2, fp
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f ae56 	beq.w	8004e0e <_printf_float+0xb6>
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	45d0      	cmp	r8, sl
 8005168:	dbf3      	blt.n	8005152 <_printf_float+0x3fa>
 800516a:	464b      	mov	r3, r9
 800516c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005170:	e6df      	b.n	8004f32 <_printf_float+0x1da>
 8005172:	f04f 0800 	mov.w	r8, #0
 8005176:	f104 0b1a 	add.w	fp, r4, #26
 800517a:	e7f4      	b.n	8005166 <_printf_float+0x40e>
 800517c:	2301      	movs	r3, #1
 800517e:	4642      	mov	r2, r8
 8005180:	e7e1      	b.n	8005146 <_printf_float+0x3ee>
 8005182:	2301      	movs	r3, #1
 8005184:	464a      	mov	r2, r9
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f ae3e 	beq.w	8004e0e <_printf_float+0xb6>
 8005192:	f108 0801 	add.w	r8, r8, #1
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800519a:	1a5b      	subs	r3, r3, r1
 800519c:	4543      	cmp	r3, r8
 800519e:	dcf0      	bgt.n	8005182 <_printf_float+0x42a>
 80051a0:	e6fc      	b.n	8004f9c <_printf_float+0x244>
 80051a2:	f04f 0800 	mov.w	r8, #0
 80051a6:	f104 0919 	add.w	r9, r4, #25
 80051aa:	e7f4      	b.n	8005196 <_printf_float+0x43e>

080051ac <_printf_common>:
 80051ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	4616      	mov	r6, r2
 80051b2:	4698      	mov	r8, r3
 80051b4:	688a      	ldr	r2, [r1, #8]
 80051b6:	690b      	ldr	r3, [r1, #16]
 80051b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051bc:	4293      	cmp	r3, r2
 80051be:	bfb8      	it	lt
 80051c0:	4613      	movlt	r3, r2
 80051c2:	6033      	str	r3, [r6, #0]
 80051c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051c8:	4607      	mov	r7, r0
 80051ca:	460c      	mov	r4, r1
 80051cc:	b10a      	cbz	r2, 80051d2 <_printf_common+0x26>
 80051ce:	3301      	adds	r3, #1
 80051d0:	6033      	str	r3, [r6, #0]
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	0699      	lsls	r1, r3, #26
 80051d6:	bf42      	ittt	mi
 80051d8:	6833      	ldrmi	r3, [r6, #0]
 80051da:	3302      	addmi	r3, #2
 80051dc:	6033      	strmi	r3, [r6, #0]
 80051de:	6825      	ldr	r5, [r4, #0]
 80051e0:	f015 0506 	ands.w	r5, r5, #6
 80051e4:	d106      	bne.n	80051f4 <_printf_common+0x48>
 80051e6:	f104 0a19 	add.w	sl, r4, #25
 80051ea:	68e3      	ldr	r3, [r4, #12]
 80051ec:	6832      	ldr	r2, [r6, #0]
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	42ab      	cmp	r3, r5
 80051f2:	dc26      	bgt.n	8005242 <_printf_common+0x96>
 80051f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051f8:	6822      	ldr	r2, [r4, #0]
 80051fa:	3b00      	subs	r3, #0
 80051fc:	bf18      	it	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	0692      	lsls	r2, r2, #26
 8005202:	d42b      	bmi.n	800525c <_printf_common+0xb0>
 8005204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005208:	4641      	mov	r1, r8
 800520a:	4638      	mov	r0, r7
 800520c:	47c8      	blx	r9
 800520e:	3001      	adds	r0, #1
 8005210:	d01e      	beq.n	8005250 <_printf_common+0xa4>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	6922      	ldr	r2, [r4, #16]
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	2b04      	cmp	r3, #4
 800521c:	bf02      	ittt	eq
 800521e:	68e5      	ldreq	r5, [r4, #12]
 8005220:	6833      	ldreq	r3, [r6, #0]
 8005222:	1aed      	subeq	r5, r5, r3
 8005224:	68a3      	ldr	r3, [r4, #8]
 8005226:	bf0c      	ite	eq
 8005228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800522c:	2500      	movne	r5, #0
 800522e:	4293      	cmp	r3, r2
 8005230:	bfc4      	itt	gt
 8005232:	1a9b      	subgt	r3, r3, r2
 8005234:	18ed      	addgt	r5, r5, r3
 8005236:	2600      	movs	r6, #0
 8005238:	341a      	adds	r4, #26
 800523a:	42b5      	cmp	r5, r6
 800523c:	d11a      	bne.n	8005274 <_printf_common+0xc8>
 800523e:	2000      	movs	r0, #0
 8005240:	e008      	b.n	8005254 <_printf_common+0xa8>
 8005242:	2301      	movs	r3, #1
 8005244:	4652      	mov	r2, sl
 8005246:	4641      	mov	r1, r8
 8005248:	4638      	mov	r0, r7
 800524a:	47c8      	blx	r9
 800524c:	3001      	adds	r0, #1
 800524e:	d103      	bne.n	8005258 <_printf_common+0xac>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005258:	3501      	adds	r5, #1
 800525a:	e7c6      	b.n	80051ea <_printf_common+0x3e>
 800525c:	18e1      	adds	r1, r4, r3
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	2030      	movs	r0, #48	@ 0x30
 8005262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005266:	4422      	add	r2, r4
 8005268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800526c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005270:	3302      	adds	r3, #2
 8005272:	e7c7      	b.n	8005204 <_printf_common+0x58>
 8005274:	2301      	movs	r3, #1
 8005276:	4622      	mov	r2, r4
 8005278:	4641      	mov	r1, r8
 800527a:	4638      	mov	r0, r7
 800527c:	47c8      	blx	r9
 800527e:	3001      	adds	r0, #1
 8005280:	d0e6      	beq.n	8005250 <_printf_common+0xa4>
 8005282:	3601      	adds	r6, #1
 8005284:	e7d9      	b.n	800523a <_printf_common+0x8e>
	...

08005288 <_printf_i>:
 8005288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	7e0f      	ldrb	r7, [r1, #24]
 800528e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005290:	2f78      	cmp	r7, #120	@ 0x78
 8005292:	4691      	mov	r9, r2
 8005294:	4680      	mov	r8, r0
 8005296:	460c      	mov	r4, r1
 8005298:	469a      	mov	sl, r3
 800529a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800529e:	d807      	bhi.n	80052b0 <_printf_i+0x28>
 80052a0:	2f62      	cmp	r7, #98	@ 0x62
 80052a2:	d80a      	bhi.n	80052ba <_printf_i+0x32>
 80052a4:	2f00      	cmp	r7, #0
 80052a6:	f000 80d2 	beq.w	800544e <_printf_i+0x1c6>
 80052aa:	2f58      	cmp	r7, #88	@ 0x58
 80052ac:	f000 80b9 	beq.w	8005422 <_printf_i+0x19a>
 80052b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052b8:	e03a      	b.n	8005330 <_printf_i+0xa8>
 80052ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052be:	2b15      	cmp	r3, #21
 80052c0:	d8f6      	bhi.n	80052b0 <_printf_i+0x28>
 80052c2:	a101      	add	r1, pc, #4	@ (adr r1, 80052c8 <_printf_i+0x40>)
 80052c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052c8:	08005321 	.word	0x08005321
 80052cc:	08005335 	.word	0x08005335
 80052d0:	080052b1 	.word	0x080052b1
 80052d4:	080052b1 	.word	0x080052b1
 80052d8:	080052b1 	.word	0x080052b1
 80052dc:	080052b1 	.word	0x080052b1
 80052e0:	08005335 	.word	0x08005335
 80052e4:	080052b1 	.word	0x080052b1
 80052e8:	080052b1 	.word	0x080052b1
 80052ec:	080052b1 	.word	0x080052b1
 80052f0:	080052b1 	.word	0x080052b1
 80052f4:	08005435 	.word	0x08005435
 80052f8:	0800535f 	.word	0x0800535f
 80052fc:	080053ef 	.word	0x080053ef
 8005300:	080052b1 	.word	0x080052b1
 8005304:	080052b1 	.word	0x080052b1
 8005308:	08005457 	.word	0x08005457
 800530c:	080052b1 	.word	0x080052b1
 8005310:	0800535f 	.word	0x0800535f
 8005314:	080052b1 	.word	0x080052b1
 8005318:	080052b1 	.word	0x080052b1
 800531c:	080053f7 	.word	0x080053f7
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6032      	str	r2, [r6, #0]
 8005328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800532c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005330:	2301      	movs	r3, #1
 8005332:	e09d      	b.n	8005470 <_printf_i+0x1e8>
 8005334:	6833      	ldr	r3, [r6, #0]
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	1d19      	adds	r1, r3, #4
 800533a:	6031      	str	r1, [r6, #0]
 800533c:	0606      	lsls	r6, r0, #24
 800533e:	d501      	bpl.n	8005344 <_printf_i+0xbc>
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	e003      	b.n	800534c <_printf_i+0xc4>
 8005344:	0645      	lsls	r5, r0, #25
 8005346:	d5fb      	bpl.n	8005340 <_printf_i+0xb8>
 8005348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800534c:	2d00      	cmp	r5, #0
 800534e:	da03      	bge.n	8005358 <_printf_i+0xd0>
 8005350:	232d      	movs	r3, #45	@ 0x2d
 8005352:	426d      	negs	r5, r5
 8005354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005358:	4859      	ldr	r0, [pc, #356]	@ (80054c0 <_printf_i+0x238>)
 800535a:	230a      	movs	r3, #10
 800535c:	e011      	b.n	8005382 <_printf_i+0xfa>
 800535e:	6821      	ldr	r1, [r4, #0]
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	0608      	lsls	r0, r1, #24
 8005364:	f853 5b04 	ldr.w	r5, [r3], #4
 8005368:	d402      	bmi.n	8005370 <_printf_i+0xe8>
 800536a:	0649      	lsls	r1, r1, #25
 800536c:	bf48      	it	mi
 800536e:	b2ad      	uxthmi	r5, r5
 8005370:	2f6f      	cmp	r7, #111	@ 0x6f
 8005372:	4853      	ldr	r0, [pc, #332]	@ (80054c0 <_printf_i+0x238>)
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	bf14      	ite	ne
 8005378:	230a      	movne	r3, #10
 800537a:	2308      	moveq	r3, #8
 800537c:	2100      	movs	r1, #0
 800537e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005382:	6866      	ldr	r6, [r4, #4]
 8005384:	60a6      	str	r6, [r4, #8]
 8005386:	2e00      	cmp	r6, #0
 8005388:	bfa2      	ittt	ge
 800538a:	6821      	ldrge	r1, [r4, #0]
 800538c:	f021 0104 	bicge.w	r1, r1, #4
 8005390:	6021      	strge	r1, [r4, #0]
 8005392:	b90d      	cbnz	r5, 8005398 <_printf_i+0x110>
 8005394:	2e00      	cmp	r6, #0
 8005396:	d04b      	beq.n	8005430 <_printf_i+0x1a8>
 8005398:	4616      	mov	r6, r2
 800539a:	fbb5 f1f3 	udiv	r1, r5, r3
 800539e:	fb03 5711 	mls	r7, r3, r1, r5
 80053a2:	5dc7      	ldrb	r7, [r0, r7]
 80053a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053a8:	462f      	mov	r7, r5
 80053aa:	42bb      	cmp	r3, r7
 80053ac:	460d      	mov	r5, r1
 80053ae:	d9f4      	bls.n	800539a <_printf_i+0x112>
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d10b      	bne.n	80053cc <_printf_i+0x144>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	07df      	lsls	r7, r3, #31
 80053b8:	d508      	bpl.n	80053cc <_printf_i+0x144>
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	6861      	ldr	r1, [r4, #4]
 80053be:	4299      	cmp	r1, r3
 80053c0:	bfde      	ittt	le
 80053c2:	2330      	movle	r3, #48	@ 0x30
 80053c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053cc:	1b92      	subs	r2, r2, r6
 80053ce:	6122      	str	r2, [r4, #16]
 80053d0:	f8cd a000 	str.w	sl, [sp]
 80053d4:	464b      	mov	r3, r9
 80053d6:	aa03      	add	r2, sp, #12
 80053d8:	4621      	mov	r1, r4
 80053da:	4640      	mov	r0, r8
 80053dc:	f7ff fee6 	bl	80051ac <_printf_common>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d14a      	bne.n	800547a <_printf_i+0x1f2>
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	b004      	add	sp, #16
 80053ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f043 0320 	orr.w	r3, r3, #32
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	4833      	ldr	r0, [pc, #204]	@ (80054c4 <_printf_i+0x23c>)
 80053f8:	2778      	movs	r7, #120	@ 0x78
 80053fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	6831      	ldr	r1, [r6, #0]
 8005402:	061f      	lsls	r7, r3, #24
 8005404:	f851 5b04 	ldr.w	r5, [r1], #4
 8005408:	d402      	bmi.n	8005410 <_printf_i+0x188>
 800540a:	065f      	lsls	r7, r3, #25
 800540c:	bf48      	it	mi
 800540e:	b2ad      	uxthmi	r5, r5
 8005410:	6031      	str	r1, [r6, #0]
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	bf44      	itt	mi
 8005416:	f043 0320 	orrmi.w	r3, r3, #32
 800541a:	6023      	strmi	r3, [r4, #0]
 800541c:	b11d      	cbz	r5, 8005426 <_printf_i+0x19e>
 800541e:	2310      	movs	r3, #16
 8005420:	e7ac      	b.n	800537c <_printf_i+0xf4>
 8005422:	4827      	ldr	r0, [pc, #156]	@ (80054c0 <_printf_i+0x238>)
 8005424:	e7e9      	b.n	80053fa <_printf_i+0x172>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	f023 0320 	bic.w	r3, r3, #32
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	e7f6      	b.n	800541e <_printf_i+0x196>
 8005430:	4616      	mov	r6, r2
 8005432:	e7bd      	b.n	80053b0 <_printf_i+0x128>
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	6961      	ldr	r1, [r4, #20]
 800543a:	1d18      	adds	r0, r3, #4
 800543c:	6030      	str	r0, [r6, #0]
 800543e:	062e      	lsls	r6, r5, #24
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	d501      	bpl.n	8005448 <_printf_i+0x1c0>
 8005444:	6019      	str	r1, [r3, #0]
 8005446:	e002      	b.n	800544e <_printf_i+0x1c6>
 8005448:	0668      	lsls	r0, r5, #25
 800544a:	d5fb      	bpl.n	8005444 <_printf_i+0x1bc>
 800544c:	8019      	strh	r1, [r3, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	4616      	mov	r6, r2
 8005454:	e7bc      	b.n	80053d0 <_printf_i+0x148>
 8005456:	6833      	ldr	r3, [r6, #0]
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	6032      	str	r2, [r6, #0]
 800545c:	681e      	ldr	r6, [r3, #0]
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	2100      	movs	r1, #0
 8005462:	4630      	mov	r0, r6
 8005464:	f7fa feb4 	bl	80001d0 <memchr>
 8005468:	b108      	cbz	r0, 800546e <_printf_i+0x1e6>
 800546a:	1b80      	subs	r0, r0, r6
 800546c:	6060      	str	r0, [r4, #4]
 800546e:	6863      	ldr	r3, [r4, #4]
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	2300      	movs	r3, #0
 8005474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005478:	e7aa      	b.n	80053d0 <_printf_i+0x148>
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	4632      	mov	r2, r6
 800547e:	4649      	mov	r1, r9
 8005480:	4640      	mov	r0, r8
 8005482:	47d0      	blx	sl
 8005484:	3001      	adds	r0, #1
 8005486:	d0ad      	beq.n	80053e4 <_printf_i+0x15c>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	079b      	lsls	r3, r3, #30
 800548c:	d413      	bmi.n	80054b6 <_printf_i+0x22e>
 800548e:	68e0      	ldr	r0, [r4, #12]
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	4298      	cmp	r0, r3
 8005494:	bfb8      	it	lt
 8005496:	4618      	movlt	r0, r3
 8005498:	e7a6      	b.n	80053e8 <_printf_i+0x160>
 800549a:	2301      	movs	r3, #1
 800549c:	4632      	mov	r2, r6
 800549e:	4649      	mov	r1, r9
 80054a0:	4640      	mov	r0, r8
 80054a2:	47d0      	blx	sl
 80054a4:	3001      	adds	r0, #1
 80054a6:	d09d      	beq.n	80053e4 <_printf_i+0x15c>
 80054a8:	3501      	adds	r5, #1
 80054aa:	68e3      	ldr	r3, [r4, #12]
 80054ac:	9903      	ldr	r1, [sp, #12]
 80054ae:	1a5b      	subs	r3, r3, r1
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	dcf2      	bgt.n	800549a <_printf_i+0x212>
 80054b4:	e7eb      	b.n	800548e <_printf_i+0x206>
 80054b6:	2500      	movs	r5, #0
 80054b8:	f104 0619 	add.w	r6, r4, #25
 80054bc:	e7f5      	b.n	80054aa <_printf_i+0x222>
 80054be:	bf00      	nop
 80054c0:	080073df 	.word	0x080073df
 80054c4:	080073f0 	.word	0x080073f0

080054c8 <std>:
 80054c8:	2300      	movs	r3, #0
 80054ca:	b510      	push	{r4, lr}
 80054cc:	4604      	mov	r4, r0
 80054ce:	e9c0 3300 	strd	r3, r3, [r0]
 80054d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054d6:	6083      	str	r3, [r0, #8]
 80054d8:	8181      	strh	r1, [r0, #12]
 80054da:	6643      	str	r3, [r0, #100]	@ 0x64
 80054dc:	81c2      	strh	r2, [r0, #14]
 80054de:	6183      	str	r3, [r0, #24]
 80054e0:	4619      	mov	r1, r3
 80054e2:	2208      	movs	r2, #8
 80054e4:	305c      	adds	r0, #92	@ 0x5c
 80054e6:	f000 f989 	bl	80057fc <memset>
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <std+0x58>)
 80054ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80054ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005524 <std+0x5c>)
 80054f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <std+0x60>)
 80054f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054f6:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <std+0x64>)
 80054f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <std+0x68>)
 80054fc:	6224      	str	r4, [r4, #32]
 80054fe:	429c      	cmp	r4, r3
 8005500:	d006      	beq.n	8005510 <std+0x48>
 8005502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005506:	4294      	cmp	r4, r2
 8005508:	d002      	beq.n	8005510 <std+0x48>
 800550a:	33d0      	adds	r3, #208	@ 0xd0
 800550c:	429c      	cmp	r4, r3
 800550e:	d105      	bne.n	800551c <std+0x54>
 8005510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005518:	f000 b9fc 	b.w	8005914 <__retarget_lock_init_recursive>
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	0800564d 	.word	0x0800564d
 8005524:	0800566f 	.word	0x0800566f
 8005528:	080056a7 	.word	0x080056a7
 800552c:	080056cb 	.word	0x080056cb
 8005530:	20000658 	.word	0x20000658

08005534 <stdio_exit_handler>:
 8005534:	4a02      	ldr	r2, [pc, #8]	@ (8005540 <stdio_exit_handler+0xc>)
 8005536:	4903      	ldr	r1, [pc, #12]	@ (8005544 <stdio_exit_handler+0x10>)
 8005538:	4803      	ldr	r0, [pc, #12]	@ (8005548 <stdio_exit_handler+0x14>)
 800553a:	f000 b869 	b.w	8005610 <_fwalk_sglue>
 800553e:	bf00      	nop
 8005540:	20000008 	.word	0x20000008
 8005544:	080070dd 	.word	0x080070dd
 8005548:	20000018 	.word	0x20000018

0800554c <cleanup_stdio>:
 800554c:	6841      	ldr	r1, [r0, #4]
 800554e:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <cleanup_stdio+0x34>)
 8005550:	4299      	cmp	r1, r3
 8005552:	b510      	push	{r4, lr}
 8005554:	4604      	mov	r4, r0
 8005556:	d001      	beq.n	800555c <cleanup_stdio+0x10>
 8005558:	f001 fdc0 	bl	80070dc <_fflush_r>
 800555c:	68a1      	ldr	r1, [r4, #8]
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <cleanup_stdio+0x38>)
 8005560:	4299      	cmp	r1, r3
 8005562:	d002      	beq.n	800556a <cleanup_stdio+0x1e>
 8005564:	4620      	mov	r0, r4
 8005566:	f001 fdb9 	bl	80070dc <_fflush_r>
 800556a:	68e1      	ldr	r1, [r4, #12]
 800556c:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <cleanup_stdio+0x3c>)
 800556e:	4299      	cmp	r1, r3
 8005570:	d004      	beq.n	800557c <cleanup_stdio+0x30>
 8005572:	4620      	mov	r0, r4
 8005574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005578:	f001 bdb0 	b.w	80070dc <_fflush_r>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	20000658 	.word	0x20000658
 8005584:	200006c0 	.word	0x200006c0
 8005588:	20000728 	.word	0x20000728

0800558c <global_stdio_init.part.0>:
 800558c:	b510      	push	{r4, lr}
 800558e:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <global_stdio_init.part.0+0x30>)
 8005590:	4c0b      	ldr	r4, [pc, #44]	@ (80055c0 <global_stdio_init.part.0+0x34>)
 8005592:	4a0c      	ldr	r2, [pc, #48]	@ (80055c4 <global_stdio_init.part.0+0x38>)
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	4620      	mov	r0, r4
 8005598:	2200      	movs	r2, #0
 800559a:	2104      	movs	r1, #4
 800559c:	f7ff ff94 	bl	80054c8 <std>
 80055a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055a4:	2201      	movs	r2, #1
 80055a6:	2109      	movs	r1, #9
 80055a8:	f7ff ff8e 	bl	80054c8 <std>
 80055ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055b0:	2202      	movs	r2, #2
 80055b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b6:	2112      	movs	r1, #18
 80055b8:	f7ff bf86 	b.w	80054c8 <std>
 80055bc:	20000790 	.word	0x20000790
 80055c0:	20000658 	.word	0x20000658
 80055c4:	08005535 	.word	0x08005535

080055c8 <__sfp_lock_acquire>:
 80055c8:	4801      	ldr	r0, [pc, #4]	@ (80055d0 <__sfp_lock_acquire+0x8>)
 80055ca:	f000 b9a4 	b.w	8005916 <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	20000799 	.word	0x20000799

080055d4 <__sfp_lock_release>:
 80055d4:	4801      	ldr	r0, [pc, #4]	@ (80055dc <__sfp_lock_release+0x8>)
 80055d6:	f000 b99f 	b.w	8005918 <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	20000799 	.word	0x20000799

080055e0 <__sinit>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4604      	mov	r4, r0
 80055e4:	f7ff fff0 	bl	80055c8 <__sfp_lock_acquire>
 80055e8:	6a23      	ldr	r3, [r4, #32]
 80055ea:	b11b      	cbz	r3, 80055f4 <__sinit+0x14>
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f0:	f7ff bff0 	b.w	80055d4 <__sfp_lock_release>
 80055f4:	4b04      	ldr	r3, [pc, #16]	@ (8005608 <__sinit+0x28>)
 80055f6:	6223      	str	r3, [r4, #32]
 80055f8:	4b04      	ldr	r3, [pc, #16]	@ (800560c <__sinit+0x2c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f5      	bne.n	80055ec <__sinit+0xc>
 8005600:	f7ff ffc4 	bl	800558c <global_stdio_init.part.0>
 8005604:	e7f2      	b.n	80055ec <__sinit+0xc>
 8005606:	bf00      	nop
 8005608:	0800554d 	.word	0x0800554d
 800560c:	20000790 	.word	0x20000790

08005610 <_fwalk_sglue>:
 8005610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005614:	4607      	mov	r7, r0
 8005616:	4688      	mov	r8, r1
 8005618:	4614      	mov	r4, r2
 800561a:	2600      	movs	r6, #0
 800561c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005620:	f1b9 0901 	subs.w	r9, r9, #1
 8005624:	d505      	bpl.n	8005632 <_fwalk_sglue+0x22>
 8005626:	6824      	ldr	r4, [r4, #0]
 8005628:	2c00      	cmp	r4, #0
 800562a:	d1f7      	bne.n	800561c <_fwalk_sglue+0xc>
 800562c:	4630      	mov	r0, r6
 800562e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d907      	bls.n	8005648 <_fwalk_sglue+0x38>
 8005638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800563c:	3301      	adds	r3, #1
 800563e:	d003      	beq.n	8005648 <_fwalk_sglue+0x38>
 8005640:	4629      	mov	r1, r5
 8005642:	4638      	mov	r0, r7
 8005644:	47c0      	blx	r8
 8005646:	4306      	orrs	r6, r0
 8005648:	3568      	adds	r5, #104	@ 0x68
 800564a:	e7e9      	b.n	8005620 <_fwalk_sglue+0x10>

0800564c <__sread>:
 800564c:	b510      	push	{r4, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	f000 f900 	bl	8005858 <_read_r>
 8005658:	2800      	cmp	r0, #0
 800565a:	bfab      	itete	ge
 800565c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800565e:	89a3      	ldrhlt	r3, [r4, #12]
 8005660:	181b      	addge	r3, r3, r0
 8005662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005666:	bfac      	ite	ge
 8005668:	6563      	strge	r3, [r4, #84]	@ 0x54
 800566a:	81a3      	strhlt	r3, [r4, #12]
 800566c:	bd10      	pop	{r4, pc}

0800566e <__swrite>:
 800566e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005672:	461f      	mov	r7, r3
 8005674:	898b      	ldrh	r3, [r1, #12]
 8005676:	05db      	lsls	r3, r3, #23
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	4616      	mov	r6, r2
 800567e:	d505      	bpl.n	800568c <__swrite+0x1e>
 8005680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005684:	2302      	movs	r3, #2
 8005686:	2200      	movs	r2, #0
 8005688:	f000 f8d4 	bl	8005834 <_lseek_r>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	4628      	mov	r0, r5
 800569e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a2:	f000 b8fb 	b.w	800589c <_write_r>

080056a6 <__sseek>:
 80056a6:	b510      	push	{r4, lr}
 80056a8:	460c      	mov	r4, r1
 80056aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ae:	f000 f8c1 	bl	8005834 <_lseek_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	bf15      	itete	ne
 80056b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056c2:	81a3      	strheq	r3, [r4, #12]
 80056c4:	bf18      	it	ne
 80056c6:	81a3      	strhne	r3, [r4, #12]
 80056c8:	bd10      	pop	{r4, pc}

080056ca <__sclose>:
 80056ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ce:	f000 b8a1 	b.w	8005814 <_close_r>

080056d2 <__swbuf_r>:
 80056d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d4:	460e      	mov	r6, r1
 80056d6:	4614      	mov	r4, r2
 80056d8:	4605      	mov	r5, r0
 80056da:	b118      	cbz	r0, 80056e4 <__swbuf_r+0x12>
 80056dc:	6a03      	ldr	r3, [r0, #32]
 80056de:	b90b      	cbnz	r3, 80056e4 <__swbuf_r+0x12>
 80056e0:	f7ff ff7e 	bl	80055e0 <__sinit>
 80056e4:	69a3      	ldr	r3, [r4, #24]
 80056e6:	60a3      	str	r3, [r4, #8]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	071a      	lsls	r2, r3, #28
 80056ec:	d501      	bpl.n	80056f2 <__swbuf_r+0x20>
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	b943      	cbnz	r3, 8005704 <__swbuf_r+0x32>
 80056f2:	4621      	mov	r1, r4
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 f82b 	bl	8005750 <__swsetup_r>
 80056fa:	b118      	cbz	r0, 8005704 <__swbuf_r+0x32>
 80056fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005700:	4638      	mov	r0, r7
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	6922      	ldr	r2, [r4, #16]
 8005708:	1a98      	subs	r0, r3, r2
 800570a:	6963      	ldr	r3, [r4, #20]
 800570c:	b2f6      	uxtb	r6, r6
 800570e:	4283      	cmp	r3, r0
 8005710:	4637      	mov	r7, r6
 8005712:	dc05      	bgt.n	8005720 <__swbuf_r+0x4e>
 8005714:	4621      	mov	r1, r4
 8005716:	4628      	mov	r0, r5
 8005718:	f001 fce0 	bl	80070dc <_fflush_r>
 800571c:	2800      	cmp	r0, #0
 800571e:	d1ed      	bne.n	80056fc <__swbuf_r+0x2a>
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	3b01      	subs	r3, #1
 8005724:	60a3      	str	r3, [r4, #8]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	701e      	strb	r6, [r3, #0]
 800572e:	6962      	ldr	r2, [r4, #20]
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	429a      	cmp	r2, r3
 8005734:	d004      	beq.n	8005740 <__swbuf_r+0x6e>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d5e1      	bpl.n	8005700 <__swbuf_r+0x2e>
 800573c:	2e0a      	cmp	r6, #10
 800573e:	d1df      	bne.n	8005700 <__swbuf_r+0x2e>
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f001 fcca 	bl	80070dc <_fflush_r>
 8005748:	2800      	cmp	r0, #0
 800574a:	d0d9      	beq.n	8005700 <__swbuf_r+0x2e>
 800574c:	e7d6      	b.n	80056fc <__swbuf_r+0x2a>
	...

08005750 <__swsetup_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4b29      	ldr	r3, [pc, #164]	@ (80057f8 <__swsetup_r+0xa8>)
 8005754:	4605      	mov	r5, r0
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	460c      	mov	r4, r1
 800575a:	b118      	cbz	r0, 8005764 <__swsetup_r+0x14>
 800575c:	6a03      	ldr	r3, [r0, #32]
 800575e:	b90b      	cbnz	r3, 8005764 <__swsetup_r+0x14>
 8005760:	f7ff ff3e 	bl	80055e0 <__sinit>
 8005764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005768:	0719      	lsls	r1, r3, #28
 800576a:	d422      	bmi.n	80057b2 <__swsetup_r+0x62>
 800576c:	06da      	lsls	r2, r3, #27
 800576e:	d407      	bmi.n	8005780 <__swsetup_r+0x30>
 8005770:	2209      	movs	r2, #9
 8005772:	602a      	str	r2, [r5, #0]
 8005774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	f04f 30ff 	mov.w	r0, #4294967295
 800577e:	e033      	b.n	80057e8 <__swsetup_r+0x98>
 8005780:	0758      	lsls	r0, r3, #29
 8005782:	d512      	bpl.n	80057aa <__swsetup_r+0x5a>
 8005784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005786:	b141      	cbz	r1, 800579a <__swsetup_r+0x4a>
 8005788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800578c:	4299      	cmp	r1, r3
 800578e:	d002      	beq.n	8005796 <__swsetup_r+0x46>
 8005790:	4628      	mov	r0, r5
 8005792:	f000 ff11 	bl	80065b8 <_free_r>
 8005796:	2300      	movs	r3, #0
 8005798:	6363      	str	r3, [r4, #52]	@ 0x34
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	2300      	movs	r3, #0
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f043 0308 	orr.w	r3, r3, #8
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	b94b      	cbnz	r3, 80057ca <__swsetup_r+0x7a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c0:	d003      	beq.n	80057ca <__swsetup_r+0x7a>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f001 fcd7 	bl	8007178 <__smakebuf_r>
 80057ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ce:	f013 0201 	ands.w	r2, r3, #1
 80057d2:	d00a      	beq.n	80057ea <__swsetup_r+0x9a>
 80057d4:	2200      	movs	r2, #0
 80057d6:	60a2      	str	r2, [r4, #8]
 80057d8:	6962      	ldr	r2, [r4, #20]
 80057da:	4252      	negs	r2, r2
 80057dc:	61a2      	str	r2, [r4, #24]
 80057de:	6922      	ldr	r2, [r4, #16]
 80057e0:	b942      	cbnz	r2, 80057f4 <__swsetup_r+0xa4>
 80057e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057e6:	d1c5      	bne.n	8005774 <__swsetup_r+0x24>
 80057e8:	bd38      	pop	{r3, r4, r5, pc}
 80057ea:	0799      	lsls	r1, r3, #30
 80057ec:	bf58      	it	pl
 80057ee:	6962      	ldrpl	r2, [r4, #20]
 80057f0:	60a2      	str	r2, [r4, #8]
 80057f2:	e7f4      	b.n	80057de <__swsetup_r+0x8e>
 80057f4:	2000      	movs	r0, #0
 80057f6:	e7f7      	b.n	80057e8 <__swsetup_r+0x98>
 80057f8:	20000014 	.word	0x20000014

080057fc <memset>:
 80057fc:	4402      	add	r2, r0
 80057fe:	4603      	mov	r3, r0
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <memset+0xa>
 8005804:	4770      	bx	lr
 8005806:	f803 1b01 	strb.w	r1, [r3], #1
 800580a:	e7f9      	b.n	8005800 <memset+0x4>

0800580c <_localeconv_r>:
 800580c:	4800      	ldr	r0, [pc, #0]	@ (8005810 <_localeconv_r+0x4>)
 800580e:	4770      	bx	lr
 8005810:	20000154 	.word	0x20000154

08005814 <_close_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d06      	ldr	r5, [pc, #24]	@ (8005830 <_close_r+0x1c>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb fefa 	bl	8001618 <_close>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_close_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_close_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	20000794 	.word	0x20000794

08005834 <_lseek_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d07      	ldr	r5, [pc, #28]	@ (8005854 <_lseek_r+0x20>)
 8005838:	4604      	mov	r4, r0
 800583a:	4608      	mov	r0, r1
 800583c:	4611      	mov	r1, r2
 800583e:	2200      	movs	r2, #0
 8005840:	602a      	str	r2, [r5, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	f7fb ff0f 	bl	8001666 <_lseek>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_lseek_r+0x1e>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_lseek_r+0x1e>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20000794 	.word	0x20000794

08005858 <_read_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d07      	ldr	r5, [pc, #28]	@ (8005878 <_read_r+0x20>)
 800585c:	4604      	mov	r4, r0
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	2200      	movs	r2, #0
 8005864:	602a      	str	r2, [r5, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f7fb fe9d 	bl	80015a6 <_read>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_read_r+0x1e>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_read_r+0x1e>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20000794 	.word	0x20000794

0800587c <_sbrk_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d06      	ldr	r5, [pc, #24]	@ (8005898 <_sbrk_r+0x1c>)
 8005880:	2300      	movs	r3, #0
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	f7fb fefa 	bl	8001680 <_sbrk>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_sbrk_r+0x1a>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_sbrk_r+0x1a>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000794 	.word	0x20000794

0800589c <_write_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d07      	ldr	r5, [pc, #28]	@ (80058bc <_write_r+0x20>)
 80058a0:	4604      	mov	r4, r0
 80058a2:	4608      	mov	r0, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fb fe98 	bl	80015e0 <_write>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_write_r+0x1e>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_write_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	20000794 	.word	0x20000794

080058c0 <__errno>:
 80058c0:	4b01      	ldr	r3, [pc, #4]	@ (80058c8 <__errno+0x8>)
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000014 	.word	0x20000014

080058cc <__libc_init_array>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005904 <__libc_init_array+0x38>)
 80058d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005908 <__libc_init_array+0x3c>)
 80058d2:	1b64      	subs	r4, r4, r5
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	2600      	movs	r6, #0
 80058d8:	42a6      	cmp	r6, r4
 80058da:	d109      	bne.n	80058f0 <__libc_init_array+0x24>
 80058dc:	4d0b      	ldr	r5, [pc, #44]	@ (800590c <__libc_init_array+0x40>)
 80058de:	4c0c      	ldr	r4, [pc, #48]	@ (8005910 <__libc_init_array+0x44>)
 80058e0:	f001 fd66 	bl	80073b0 <_init>
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	2600      	movs	r6, #0
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	d105      	bne.n	80058fa <__libc_init_array+0x2e>
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f4:	4798      	blx	r3
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7ee      	b.n	80058d8 <__libc_init_array+0xc>
 80058fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fe:	4798      	blx	r3
 8005900:	3601      	adds	r6, #1
 8005902:	e7f2      	b.n	80058ea <__libc_init_array+0x1e>
 8005904:	08007748 	.word	0x08007748
 8005908:	08007748 	.word	0x08007748
 800590c:	08007748 	.word	0x08007748
 8005910:	0800774c 	.word	0x0800774c

08005914 <__retarget_lock_init_recursive>:
 8005914:	4770      	bx	lr

08005916 <__retarget_lock_acquire_recursive>:
 8005916:	4770      	bx	lr

08005918 <__retarget_lock_release_recursive>:
 8005918:	4770      	bx	lr

0800591a <quorem>:
 800591a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591e:	6903      	ldr	r3, [r0, #16]
 8005920:	690c      	ldr	r4, [r1, #16]
 8005922:	42a3      	cmp	r3, r4
 8005924:	4607      	mov	r7, r0
 8005926:	db7e      	blt.n	8005a26 <quorem+0x10c>
 8005928:	3c01      	subs	r4, #1
 800592a:	f101 0814 	add.w	r8, r1, #20
 800592e:	00a3      	lsls	r3, r4, #2
 8005930:	f100 0514 	add.w	r5, r0, #20
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005944:	3301      	adds	r3, #1
 8005946:	429a      	cmp	r2, r3
 8005948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800594c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005950:	d32e      	bcc.n	80059b0 <quorem+0x96>
 8005952:	f04f 0a00 	mov.w	sl, #0
 8005956:	46c4      	mov	ip, r8
 8005958:	46ae      	mov	lr, r5
 800595a:	46d3      	mov	fp, sl
 800595c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005960:	b298      	uxth	r0, r3
 8005962:	fb06 a000 	mla	r0, r6, r0, sl
 8005966:	0c02      	lsrs	r2, r0, #16
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	fb06 2303 	mla	r3, r6, r3, r2
 800596e:	f8de 2000 	ldr.w	r2, [lr]
 8005972:	b280      	uxth	r0, r0
 8005974:	b292      	uxth	r2, r2
 8005976:	1a12      	subs	r2, r2, r0
 8005978:	445a      	add	r2, fp
 800597a:	f8de 0000 	ldr.w	r0, [lr]
 800597e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005982:	b29b      	uxth	r3, r3
 8005984:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005988:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800598c:	b292      	uxth	r2, r2
 800598e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005992:	45e1      	cmp	r9, ip
 8005994:	f84e 2b04 	str.w	r2, [lr], #4
 8005998:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800599c:	d2de      	bcs.n	800595c <quorem+0x42>
 800599e:	9b00      	ldr	r3, [sp, #0]
 80059a0:	58eb      	ldr	r3, [r5, r3]
 80059a2:	b92b      	cbnz	r3, 80059b0 <quorem+0x96>
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	3b04      	subs	r3, #4
 80059a8:	429d      	cmp	r5, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	d32f      	bcc.n	8005a0e <quorem+0xf4>
 80059ae:	613c      	str	r4, [r7, #16]
 80059b0:	4638      	mov	r0, r7
 80059b2:	f001 f8c5 	bl	8006b40 <__mcmp>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	db25      	blt.n	8005a06 <quorem+0xec>
 80059ba:	4629      	mov	r1, r5
 80059bc:	2000      	movs	r0, #0
 80059be:	f858 2b04 	ldr.w	r2, [r8], #4
 80059c2:	f8d1 c000 	ldr.w	ip, [r1]
 80059c6:	fa1f fe82 	uxth.w	lr, r2
 80059ca:	fa1f f38c 	uxth.w	r3, ip
 80059ce:	eba3 030e 	sub.w	r3, r3, lr
 80059d2:	4403      	add	r3, r0
 80059d4:	0c12      	lsrs	r2, r2, #16
 80059d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80059da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059e4:	45c1      	cmp	r9, r8
 80059e6:	f841 3b04 	str.w	r3, [r1], #4
 80059ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059ee:	d2e6      	bcs.n	80059be <quorem+0xa4>
 80059f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059f8:	b922      	cbnz	r2, 8005a04 <quorem+0xea>
 80059fa:	3b04      	subs	r3, #4
 80059fc:	429d      	cmp	r5, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	d30b      	bcc.n	8005a1a <quorem+0x100>
 8005a02:	613c      	str	r4, [r7, #16]
 8005a04:	3601      	adds	r6, #1
 8005a06:	4630      	mov	r0, r6
 8005a08:	b003      	add	sp, #12
 8005a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	3b04      	subs	r3, #4
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d1cb      	bne.n	80059ae <quorem+0x94>
 8005a16:	3c01      	subs	r4, #1
 8005a18:	e7c6      	b.n	80059a8 <quorem+0x8e>
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d1ef      	bne.n	8005a02 <quorem+0xe8>
 8005a22:	3c01      	subs	r4, #1
 8005a24:	e7ea      	b.n	80059fc <quorem+0xe2>
 8005a26:	2000      	movs	r0, #0
 8005a28:	e7ee      	b.n	8005a08 <quorem+0xee>
 8005a2a:	0000      	movs	r0, r0
 8005a2c:	0000      	movs	r0, r0
	...

08005a30 <_dtoa_r>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	69c7      	ldr	r7, [r0, #28]
 8005a36:	b099      	sub	sp, #100	@ 0x64
 8005a38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a3c:	ec55 4b10 	vmov	r4, r5, d0
 8005a40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005a42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a44:	4683      	mov	fp, r0
 8005a46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a4a:	b97f      	cbnz	r7, 8005a6c <_dtoa_r+0x3c>
 8005a4c:	2010      	movs	r0, #16
 8005a4e:	f7ff f82d 	bl	8004aac <malloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005a58:	b920      	cbnz	r0, 8005a64 <_dtoa_r+0x34>
 8005a5a:	4ba7      	ldr	r3, [pc, #668]	@ (8005cf8 <_dtoa_r+0x2c8>)
 8005a5c:	21ef      	movs	r1, #239	@ 0xef
 8005a5e:	48a7      	ldr	r0, [pc, #668]	@ (8005cfc <_dtoa_r+0x2cc>)
 8005a60:	f001 fbf6 	bl	8007250 <__assert_func>
 8005a64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a68:	6007      	str	r7, [r0, #0]
 8005a6a:	60c7      	str	r7, [r0, #12]
 8005a6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	b159      	cbz	r1, 8005a8c <_dtoa_r+0x5c>
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	604a      	str	r2, [r1, #4]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4093      	lsls	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
 8005a7e:	4658      	mov	r0, fp
 8005a80:	f000 fe24 	bl	80066cc <_Bfree>
 8005a84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	1e2b      	subs	r3, r5, #0
 8005a8e:	bfb9      	ittee	lt
 8005a90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a94:	9303      	strlt	r3, [sp, #12]
 8005a96:	2300      	movge	r3, #0
 8005a98:	6033      	strge	r3, [r6, #0]
 8005a9a:	9f03      	ldr	r7, [sp, #12]
 8005a9c:	4b98      	ldr	r3, [pc, #608]	@ (8005d00 <_dtoa_r+0x2d0>)
 8005a9e:	bfbc      	itt	lt
 8005aa0:	2201      	movlt	r2, #1
 8005aa2:	6032      	strlt	r2, [r6, #0]
 8005aa4:	43bb      	bics	r3, r7
 8005aa6:	d112      	bne.n	8005ace <_dtoa_r+0x9e>
 8005aa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005aaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ab4:	4323      	orrs	r3, r4
 8005ab6:	f000 854d 	beq.w	8006554 <_dtoa_r+0xb24>
 8005aba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005abc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005d14 <_dtoa_r+0x2e4>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 854f 	beq.w	8006564 <_dtoa_r+0xb34>
 8005ac6:	f10a 0303 	add.w	r3, sl, #3
 8005aca:	f000 bd49 	b.w	8006560 <_dtoa_r+0xb30>
 8005ace:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	ec51 0b17 	vmov	r0, r1, d7
 8005ad8:	2300      	movs	r3, #0
 8005ada:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005ade:	f7fa fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	b158      	cbz	r0, 8005afe <_dtoa_r+0xce>
 8005ae6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ae8:	2301      	movs	r3, #1
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005aee:	b113      	cbz	r3, 8005af6 <_dtoa_r+0xc6>
 8005af0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005af2:	4b84      	ldr	r3, [pc, #528]	@ (8005d04 <_dtoa_r+0x2d4>)
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005d18 <_dtoa_r+0x2e8>
 8005afa:	f000 bd33 	b.w	8006564 <_dtoa_r+0xb34>
 8005afe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005b02:	aa16      	add	r2, sp, #88	@ 0x58
 8005b04:	a917      	add	r1, sp, #92	@ 0x5c
 8005b06:	4658      	mov	r0, fp
 8005b08:	f001 f8ca 	bl	8006ca0 <__d2b>
 8005b0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b10:	4681      	mov	r9, r0
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	d077      	beq.n	8005c06 <_dtoa_r+0x1d6>
 8005b16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b30:	4619      	mov	r1, r3
 8005b32:	2200      	movs	r2, #0
 8005b34:	4b74      	ldr	r3, [pc, #464]	@ (8005d08 <_dtoa_r+0x2d8>)
 8005b36:	f7fa fba7 	bl	8000288 <__aeabi_dsub>
 8005b3a:	a369      	add	r3, pc, #420	@ (adr r3, 8005ce0 <_dtoa_r+0x2b0>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f7fa fd5a 	bl	80005f8 <__aeabi_dmul>
 8005b44:	a368      	add	r3, pc, #416	@ (adr r3, 8005ce8 <_dtoa_r+0x2b8>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fb9f 	bl	800028c <__adddf3>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4630      	mov	r0, r6
 8005b52:	460d      	mov	r5, r1
 8005b54:	f7fa fce6 	bl	8000524 <__aeabi_i2d>
 8005b58:	a365      	add	r3, pc, #404	@ (adr r3, 8005cf0 <_dtoa_r+0x2c0>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fd4b 	bl	80005f8 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4620      	mov	r0, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa fb8f 	bl	800028c <__adddf3>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	f7fa fff1 	bl	8000b58 <__aeabi_d2iz>
 8005b76:	2200      	movs	r2, #0
 8005b78:	4607      	mov	r7, r0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4629      	mov	r1, r5
 8005b80:	f7fa ffac 	bl	8000adc <__aeabi_dcmplt>
 8005b84:	b140      	cbz	r0, 8005b98 <_dtoa_r+0x168>
 8005b86:	4638      	mov	r0, r7
 8005b88:	f7fa fccc 	bl	8000524 <__aeabi_i2d>
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	462b      	mov	r3, r5
 8005b90:	f7fa ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b94:	b900      	cbnz	r0, 8005b98 <_dtoa_r+0x168>
 8005b96:	3f01      	subs	r7, #1
 8005b98:	2f16      	cmp	r7, #22
 8005b9a:	d851      	bhi.n	8005c40 <_dtoa_r+0x210>
 8005b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005d0c <_dtoa_r+0x2dc>)
 8005b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005baa:	f7fa ff97 	bl	8000adc <__aeabi_dcmplt>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d048      	beq.n	8005c44 <_dtoa_r+0x214>
 8005bb2:	3f01      	subs	r7, #1
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005bb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005bba:	1b9b      	subs	r3, r3, r6
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	bf44      	itt	mi
 8005bc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005bc4:	2300      	movmi	r3, #0
 8005bc6:	9208      	str	r2, [sp, #32]
 8005bc8:	bf54      	ite	pl
 8005bca:	f04f 0800 	movpl.w	r8, #0
 8005bce:	9308      	strmi	r3, [sp, #32]
 8005bd0:	2f00      	cmp	r7, #0
 8005bd2:	db39      	blt.n	8005c48 <_dtoa_r+0x218>
 8005bd4:	9b08      	ldr	r3, [sp, #32]
 8005bd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005bd8:	443b      	add	r3, r7
 8005bda:	9308      	str	r3, [sp, #32]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	d864      	bhi.n	8005cb0 <_dtoa_r+0x280>
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	bfc4      	itt	gt
 8005bea:	3b04      	subgt	r3, #4
 8005bec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf0:	f1a3 0302 	sub.w	r3, r3, #2
 8005bf4:	bfcc      	ite	gt
 8005bf6:	2400      	movgt	r4, #0
 8005bf8:	2401      	movle	r4, #1
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d863      	bhi.n	8005cc6 <_dtoa_r+0x296>
 8005bfe:	e8df f003 	tbb	[pc, r3]
 8005c02:	372a      	.short	0x372a
 8005c04:	5535      	.short	0x5535
 8005c06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005c0a:	441e      	add	r6, r3
 8005c0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	bfc1      	itttt	gt
 8005c14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c18:	409f      	lslgt	r7, r3
 8005c1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c22:	bfd6      	itet	le
 8005c24:	f1c3 0320 	rsble	r3, r3, #32
 8005c28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c2c:	fa04 f003 	lslle.w	r0, r4, r3
 8005c30:	f7fa fc68 	bl	8000504 <__aeabi_ui2d>
 8005c34:	2201      	movs	r2, #1
 8005c36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c3a:	3e01      	subs	r6, #1
 8005c3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005c3e:	e777      	b.n	8005b30 <_dtoa_r+0x100>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e7b8      	b.n	8005bb6 <_dtoa_r+0x186>
 8005c44:	9012      	str	r0, [sp, #72]	@ 0x48
 8005c46:	e7b7      	b.n	8005bb8 <_dtoa_r+0x188>
 8005c48:	427b      	negs	r3, r7
 8005c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	eba8 0807 	sub.w	r8, r8, r7
 8005c52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c54:	e7c4      	b.n	8005be0 <_dtoa_r+0x1b0>
 8005c56:	2300      	movs	r3, #0
 8005c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dc35      	bgt.n	8005ccc <_dtoa_r+0x29c>
 8005c60:	2301      	movs	r3, #1
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	9307      	str	r3, [sp, #28]
 8005c66:	461a      	mov	r2, r3
 8005c68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c6a:	e00b      	b.n	8005c84 <_dtoa_r+0x254>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e7f3      	b.n	8005c58 <_dtoa_r+0x228>
 8005c70:	2300      	movs	r3, #0
 8005c72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	9307      	str	r3, [sp, #28]
 8005c80:	bfb8      	it	lt
 8005c82:	2301      	movlt	r3, #1
 8005c84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005c88:	2100      	movs	r1, #0
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	f102 0514 	add.w	r5, r2, #20
 8005c90:	429d      	cmp	r5, r3
 8005c92:	d91f      	bls.n	8005cd4 <_dtoa_r+0x2a4>
 8005c94:	6041      	str	r1, [r0, #4]
 8005c96:	4658      	mov	r0, fp
 8005c98:	f000 fcd8 	bl	800664c <_Balloc>
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d13c      	bne.n	8005d1c <_dtoa_r+0x2ec>
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d10 <_dtoa_r+0x2e0>)
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005caa:	e6d8      	b.n	8005a5e <_dtoa_r+0x2e>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e7e0      	b.n	8005c72 <_dtoa_r+0x242>
 8005cb0:	2401      	movs	r4, #1
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	9307      	str	r3, [sp, #28]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2312      	movs	r3, #18
 8005cc4:	e7d0      	b.n	8005c68 <_dtoa_r+0x238>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cca:	e7f5      	b.n	8005cb8 <_dtoa_r+0x288>
 8005ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	9307      	str	r3, [sp, #28]
 8005cd2:	e7d7      	b.n	8005c84 <_dtoa_r+0x254>
 8005cd4:	3101      	adds	r1, #1
 8005cd6:	0052      	lsls	r2, r2, #1
 8005cd8:	e7d8      	b.n	8005c8c <_dtoa_r+0x25c>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	636f4361 	.word	0x636f4361
 8005ce4:	3fd287a7 	.word	0x3fd287a7
 8005ce8:	8b60c8b3 	.word	0x8b60c8b3
 8005cec:	3fc68a28 	.word	0x3fc68a28
 8005cf0:	509f79fb 	.word	0x509f79fb
 8005cf4:	3fd34413 	.word	0x3fd34413
 8005cf8:	0800740e 	.word	0x0800740e
 8005cfc:	08007425 	.word	0x08007425
 8005d00:	7ff00000 	.word	0x7ff00000
 8005d04:	080073de 	.word	0x080073de
 8005d08:	3ff80000 	.word	0x3ff80000
 8005d0c:	08007520 	.word	0x08007520
 8005d10:	0800747d 	.word	0x0800747d
 8005d14:	0800740a 	.word	0x0800740a
 8005d18:	080073dd 	.word	0x080073dd
 8005d1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d20:	6018      	str	r0, [r3, #0]
 8005d22:	9b07      	ldr	r3, [sp, #28]
 8005d24:	2b0e      	cmp	r3, #14
 8005d26:	f200 80a4 	bhi.w	8005e72 <_dtoa_r+0x442>
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	f000 80a1 	beq.w	8005e72 <_dtoa_r+0x442>
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	dd33      	ble.n	8005d9c <_dtoa_r+0x36c>
 8005d34:	4bad      	ldr	r3, [pc, #692]	@ (8005fec <_dtoa_r+0x5bc>)
 8005d36:	f007 020f 	and.w	r2, r7, #15
 8005d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d3e:	ed93 7b00 	vldr	d7, [r3]
 8005d42:	05f8      	lsls	r0, r7, #23
 8005d44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d4c:	d516      	bpl.n	8005d7c <_dtoa_r+0x34c>
 8005d4e:	4ba8      	ldr	r3, [pc, #672]	@ (8005ff0 <_dtoa_r+0x5c0>)
 8005d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d58:	f7fa fd78 	bl	800084c <__aeabi_ddiv>
 8005d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d60:	f004 040f 	and.w	r4, r4, #15
 8005d64:	2603      	movs	r6, #3
 8005d66:	4da2      	ldr	r5, [pc, #648]	@ (8005ff0 <_dtoa_r+0x5c0>)
 8005d68:	b954      	cbnz	r4, 8005d80 <_dtoa_r+0x350>
 8005d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d72:	f7fa fd6b 	bl	800084c <__aeabi_ddiv>
 8005d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d7a:	e028      	b.n	8005dce <_dtoa_r+0x39e>
 8005d7c:	2602      	movs	r6, #2
 8005d7e:	e7f2      	b.n	8005d66 <_dtoa_r+0x336>
 8005d80:	07e1      	lsls	r1, r4, #31
 8005d82:	d508      	bpl.n	8005d96 <_dtoa_r+0x366>
 8005d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d8c:	f7fa fc34 	bl	80005f8 <__aeabi_dmul>
 8005d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d94:	3601      	adds	r6, #1
 8005d96:	1064      	asrs	r4, r4, #1
 8005d98:	3508      	adds	r5, #8
 8005d9a:	e7e5      	b.n	8005d68 <_dtoa_r+0x338>
 8005d9c:	f000 80d2 	beq.w	8005f44 <_dtoa_r+0x514>
 8005da0:	427c      	negs	r4, r7
 8005da2:	4b92      	ldr	r3, [pc, #584]	@ (8005fec <_dtoa_r+0x5bc>)
 8005da4:	4d92      	ldr	r5, [pc, #584]	@ (8005ff0 <_dtoa_r+0x5c0>)
 8005da6:	f004 020f 	and.w	r2, r4, #15
 8005daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005db6:	f7fa fc1f 	bl	80005f8 <__aeabi_dmul>
 8005dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dbe:	1124      	asrs	r4, r4, #4
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2602      	movs	r6, #2
 8005dc4:	2c00      	cmp	r4, #0
 8005dc6:	f040 80b2 	bne.w	8005f2e <_dtoa_r+0x4fe>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d3      	bne.n	8005d76 <_dtoa_r+0x346>
 8005dce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005dd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80b7 	beq.w	8005f48 <_dtoa_r+0x518>
 8005dda:	4b86      	ldr	r3, [pc, #536]	@ (8005ff4 <_dtoa_r+0x5c4>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f7fa fe7b 	bl	8000adc <__aeabi_dcmplt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f000 80ae 	beq.w	8005f48 <_dtoa_r+0x518>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80aa 	beq.w	8005f48 <_dtoa_r+0x518>
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dd37      	ble.n	8005e6a <_dtoa_r+0x43a>
 8005dfa:	1e7b      	subs	r3, r7, #1
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4b7d      	ldr	r3, [pc, #500]	@ (8005ff8 <_dtoa_r+0x5c8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa fbf7 	bl	80005f8 <__aeabi_dmul>
 8005e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e0e:	9c00      	ldr	r4, [sp, #0]
 8005e10:	3601      	adds	r6, #1
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7fa fb86 	bl	8000524 <__aeabi_i2d>
 8005e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e1c:	f7fa fbec 	bl	80005f8 <__aeabi_dmul>
 8005e20:	4b76      	ldr	r3, [pc, #472]	@ (8005ffc <_dtoa_r+0x5cc>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	f7fa fa32 	bl	800028c <__adddf3>
 8005e28:	4605      	mov	r5, r0
 8005e2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e2e:	2c00      	cmp	r4, #0
 8005e30:	f040 808d 	bne.w	8005f4e <_dtoa_r+0x51e>
 8005e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e38:	4b71      	ldr	r3, [pc, #452]	@ (8006000 <_dtoa_r+0x5d0>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f7fa fa24 	bl	8000288 <__aeabi_dsub>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4633      	mov	r3, r6
 8005e4c:	f7fa fe64 	bl	8000b18 <__aeabi_dcmpgt>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f040 828b 	bne.w	800636c <_dtoa_r+0x93c>
 8005e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e60:	f7fa fe3c 	bl	8000adc <__aeabi_dcmplt>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f040 8128 	bne.w	80060ba <_dtoa_r+0x68a>
 8005e6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005e6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f2c0 815a 	blt.w	800612e <_dtoa_r+0x6fe>
 8005e7a:	2f0e      	cmp	r7, #14
 8005e7c:	f300 8157 	bgt.w	800612e <_dtoa_r+0x6fe>
 8005e80:	4b5a      	ldr	r3, [pc, #360]	@ (8005fec <_dtoa_r+0x5bc>)
 8005e82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e86:	ed93 7b00 	vldr	d7, [r3]
 8005e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	ed8d 7b00 	vstr	d7, [sp]
 8005e92:	da03      	bge.n	8005e9c <_dtoa_r+0x46c>
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f340 8101 	ble.w	800609e <_dtoa_r+0x66e>
 8005e9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ea0:	4656      	mov	r6, sl
 8005ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7fa fccf 	bl	800084c <__aeabi_ddiv>
 8005eae:	f7fa fe53 	bl	8000b58 <__aeabi_d2iz>
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	f7fa fb36 	bl	8000524 <__aeabi_i2d>
 8005eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ebc:	f7fa fb9c 	bl	80005f8 <__aeabi_dmul>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ecc:	f7fa f9dc 	bl	8000288 <__aeabi_dsub>
 8005ed0:	f806 4b01 	strb.w	r4, [r6], #1
 8005ed4:	9d07      	ldr	r5, [sp, #28]
 8005ed6:	eba6 040a 	sub.w	r4, r6, sl
 8005eda:	42a5      	cmp	r5, r4
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	f040 8117 	bne.w	8006112 <_dtoa_r+0x6e2>
 8005ee4:	f7fa f9d2 	bl	800028c <__adddf3>
 8005ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eec:	4604      	mov	r4, r0
 8005eee:	460d      	mov	r5, r1
 8005ef0:	f7fa fe12 	bl	8000b18 <__aeabi_dcmpgt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f040 80f9 	bne.w	80060ec <_dtoa_r+0x6bc>
 8005efa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005efe:	4620      	mov	r0, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7fa fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f06:	b118      	cbz	r0, 8005f10 <_dtoa_r+0x4e0>
 8005f08:	f018 0f01 	tst.w	r8, #1
 8005f0c:	f040 80ee 	bne.w	80060ec <_dtoa_r+0x6bc>
 8005f10:	4649      	mov	r1, r9
 8005f12:	4658      	mov	r0, fp
 8005f14:	f000 fbda 	bl	80066cc <_Bfree>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	7033      	strb	r3, [r6, #0]
 8005f1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f1e:	3701      	adds	r7, #1
 8005f20:	601f      	str	r7, [r3, #0]
 8005f22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 831d 	beq.w	8006564 <_dtoa_r+0xb34>
 8005f2a:	601e      	str	r6, [r3, #0]
 8005f2c:	e31a      	b.n	8006564 <_dtoa_r+0xb34>
 8005f2e:	07e2      	lsls	r2, r4, #31
 8005f30:	d505      	bpl.n	8005f3e <_dtoa_r+0x50e>
 8005f32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f36:	f7fa fb5f 	bl	80005f8 <__aeabi_dmul>
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	1064      	asrs	r4, r4, #1
 8005f40:	3508      	adds	r5, #8
 8005f42:	e73f      	b.n	8005dc4 <_dtoa_r+0x394>
 8005f44:	2602      	movs	r6, #2
 8005f46:	e742      	b.n	8005dce <_dtoa_r+0x39e>
 8005f48:	9c07      	ldr	r4, [sp, #28]
 8005f4a:	9704      	str	r7, [sp, #16]
 8005f4c:	e761      	b.n	8005e12 <_dtoa_r+0x3e2>
 8005f4e:	4b27      	ldr	r3, [pc, #156]	@ (8005fec <_dtoa_r+0x5bc>)
 8005f50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f5a:	4454      	add	r4, sl
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d053      	beq.n	8006008 <_dtoa_r+0x5d8>
 8005f60:	4928      	ldr	r1, [pc, #160]	@ (8006004 <_dtoa_r+0x5d4>)
 8005f62:	2000      	movs	r0, #0
 8005f64:	f7fa fc72 	bl	800084c <__aeabi_ddiv>
 8005f68:	4633      	mov	r3, r6
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	f7fa f98c 	bl	8000288 <__aeabi_dsub>
 8005f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f74:	4656      	mov	r6, sl
 8005f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f7a:	f7fa fded 	bl	8000b58 <__aeabi_d2iz>
 8005f7e:	4605      	mov	r5, r0
 8005f80:	f7fa fad0 	bl	8000524 <__aeabi_i2d>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f8c:	f7fa f97c 	bl	8000288 <__aeabi_dsub>
 8005f90:	3530      	adds	r5, #48	@ 0x30
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f9a:	f806 5b01 	strb.w	r5, [r6], #1
 8005f9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fa2:	f7fa fd9b 	bl	8000adc <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d171      	bne.n	800608e <_dtoa_r+0x65e>
 8005faa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fae:	4911      	ldr	r1, [pc, #68]	@ (8005ff4 <_dtoa_r+0x5c4>)
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	f7fa f969 	bl	8000288 <__aeabi_dsub>
 8005fb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fba:	f7fa fd8f 	bl	8000adc <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f040 8095 	bne.w	80060ee <_dtoa_r+0x6be>
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	f43f af50 	beq.w	8005e6a <_dtoa_r+0x43a>
 8005fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fce:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <_dtoa_r+0x5c8>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f7fa fb11 	bl	80005f8 <__aeabi_dmul>
 8005fd6:	4b08      	ldr	r3, [pc, #32]	@ (8005ff8 <_dtoa_r+0x5c8>)
 8005fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fdc:	2200      	movs	r2, #0
 8005fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe2:	f7fa fb09 	bl	80005f8 <__aeabi_dmul>
 8005fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fea:	e7c4      	b.n	8005f76 <_dtoa_r+0x546>
 8005fec:	08007520 	.word	0x08007520
 8005ff0:	080074f8 	.word	0x080074f8
 8005ff4:	3ff00000 	.word	0x3ff00000
 8005ff8:	40240000 	.word	0x40240000
 8005ffc:	401c0000 	.word	0x401c0000
 8006000:	40140000 	.word	0x40140000
 8006004:	3fe00000 	.word	0x3fe00000
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	f7fa faf4 	bl	80005f8 <__aeabi_dmul>
 8006010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006014:	9415      	str	r4, [sp, #84]	@ 0x54
 8006016:	4656      	mov	r6, sl
 8006018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800601c:	f7fa fd9c 	bl	8000b58 <__aeabi_d2iz>
 8006020:	4605      	mov	r5, r0
 8006022:	f7fa fa7f 	bl	8000524 <__aeabi_i2d>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602e:	f7fa f92b 	bl	8000288 <__aeabi_dsub>
 8006032:	3530      	adds	r5, #48	@ 0x30
 8006034:	f806 5b01 	strb.w	r5, [r6], #1
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	42a6      	cmp	r6, r4
 800603e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	d124      	bne.n	8006092 <_dtoa_r+0x662>
 8006048:	4bac      	ldr	r3, [pc, #688]	@ (80062fc <_dtoa_r+0x8cc>)
 800604a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800604e:	f7fa f91d 	bl	800028c <__adddf3>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605a:	f7fa fd5d 	bl	8000b18 <__aeabi_dcmpgt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d145      	bne.n	80060ee <_dtoa_r+0x6be>
 8006062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006066:	49a5      	ldr	r1, [pc, #660]	@ (80062fc <_dtoa_r+0x8cc>)
 8006068:	2000      	movs	r0, #0
 800606a:	f7fa f90d 	bl	8000288 <__aeabi_dsub>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006076:	f7fa fd31 	bl	8000adc <__aeabi_dcmplt>
 800607a:	2800      	cmp	r0, #0
 800607c:	f43f aef5 	beq.w	8005e6a <_dtoa_r+0x43a>
 8006080:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006082:	1e73      	subs	r3, r6, #1
 8006084:	9315      	str	r3, [sp, #84]	@ 0x54
 8006086:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800608a:	2b30      	cmp	r3, #48	@ 0x30
 800608c:	d0f8      	beq.n	8006080 <_dtoa_r+0x650>
 800608e:	9f04      	ldr	r7, [sp, #16]
 8006090:	e73e      	b.n	8005f10 <_dtoa_r+0x4e0>
 8006092:	4b9b      	ldr	r3, [pc, #620]	@ (8006300 <_dtoa_r+0x8d0>)
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800609c:	e7bc      	b.n	8006018 <_dtoa_r+0x5e8>
 800609e:	d10c      	bne.n	80060ba <_dtoa_r+0x68a>
 80060a0:	4b98      	ldr	r3, [pc, #608]	@ (8006304 <_dtoa_r+0x8d4>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a8:	f7fa faa6 	bl	80005f8 <__aeabi_dmul>
 80060ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060b0:	f7fa fd28 	bl	8000b04 <__aeabi_dcmpge>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f000 8157 	beq.w	8006368 <_dtoa_r+0x938>
 80060ba:	2400      	movs	r4, #0
 80060bc:	4625      	mov	r5, r4
 80060be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060c0:	43db      	mvns	r3, r3
 80060c2:	9304      	str	r3, [sp, #16]
 80060c4:	4656      	mov	r6, sl
 80060c6:	2700      	movs	r7, #0
 80060c8:	4621      	mov	r1, r4
 80060ca:	4658      	mov	r0, fp
 80060cc:	f000 fafe 	bl	80066cc <_Bfree>
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	d0dc      	beq.n	800608e <_dtoa_r+0x65e>
 80060d4:	b12f      	cbz	r7, 80060e2 <_dtoa_r+0x6b2>
 80060d6:	42af      	cmp	r7, r5
 80060d8:	d003      	beq.n	80060e2 <_dtoa_r+0x6b2>
 80060da:	4639      	mov	r1, r7
 80060dc:	4658      	mov	r0, fp
 80060de:	f000 faf5 	bl	80066cc <_Bfree>
 80060e2:	4629      	mov	r1, r5
 80060e4:	4658      	mov	r0, fp
 80060e6:	f000 faf1 	bl	80066cc <_Bfree>
 80060ea:	e7d0      	b.n	800608e <_dtoa_r+0x65e>
 80060ec:	9704      	str	r7, [sp, #16]
 80060ee:	4633      	mov	r3, r6
 80060f0:	461e      	mov	r6, r3
 80060f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060f6:	2a39      	cmp	r2, #57	@ 0x39
 80060f8:	d107      	bne.n	800610a <_dtoa_r+0x6da>
 80060fa:	459a      	cmp	sl, r3
 80060fc:	d1f8      	bne.n	80060f0 <_dtoa_r+0x6c0>
 80060fe:	9a04      	ldr	r2, [sp, #16]
 8006100:	3201      	adds	r2, #1
 8006102:	9204      	str	r2, [sp, #16]
 8006104:	2230      	movs	r2, #48	@ 0x30
 8006106:	f88a 2000 	strb.w	r2, [sl]
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	3201      	adds	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e7bd      	b.n	800608e <_dtoa_r+0x65e>
 8006112:	4b7b      	ldr	r3, [pc, #492]	@ (8006300 <_dtoa_r+0x8d0>)
 8006114:	2200      	movs	r2, #0
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	2200      	movs	r2, #0
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	460d      	mov	r5, r1
 8006122:	f7fa fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006126:	2800      	cmp	r0, #0
 8006128:	f43f aebb 	beq.w	8005ea2 <_dtoa_r+0x472>
 800612c:	e6f0      	b.n	8005f10 <_dtoa_r+0x4e0>
 800612e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006130:	2a00      	cmp	r2, #0
 8006132:	f000 80db 	beq.w	80062ec <_dtoa_r+0x8bc>
 8006136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006138:	2a01      	cmp	r2, #1
 800613a:	f300 80bf 	bgt.w	80062bc <_dtoa_r+0x88c>
 800613e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006140:	2a00      	cmp	r2, #0
 8006142:	f000 80b7 	beq.w	80062b4 <_dtoa_r+0x884>
 8006146:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800614a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800614c:	4646      	mov	r6, r8
 800614e:	9a08      	ldr	r2, [sp, #32]
 8006150:	2101      	movs	r1, #1
 8006152:	441a      	add	r2, r3
 8006154:	4658      	mov	r0, fp
 8006156:	4498      	add	r8, r3
 8006158:	9208      	str	r2, [sp, #32]
 800615a:	f000 fb6b 	bl	8006834 <__i2b>
 800615e:	4605      	mov	r5, r0
 8006160:	b15e      	cbz	r6, 800617a <_dtoa_r+0x74a>
 8006162:	9b08      	ldr	r3, [sp, #32]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dd08      	ble.n	800617a <_dtoa_r+0x74a>
 8006168:	42b3      	cmp	r3, r6
 800616a:	9a08      	ldr	r2, [sp, #32]
 800616c:	bfa8      	it	ge
 800616e:	4633      	movge	r3, r6
 8006170:	eba8 0803 	sub.w	r8, r8, r3
 8006174:	1af6      	subs	r6, r6, r3
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	9308      	str	r3, [sp, #32]
 800617a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800617c:	b1f3      	cbz	r3, 80061bc <_dtoa_r+0x78c>
 800617e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80b7 	beq.w	80062f4 <_dtoa_r+0x8c4>
 8006186:	b18c      	cbz	r4, 80061ac <_dtoa_r+0x77c>
 8006188:	4629      	mov	r1, r5
 800618a:	4622      	mov	r2, r4
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fc11 	bl	80069b4 <__pow5mult>
 8006192:	464a      	mov	r2, r9
 8006194:	4601      	mov	r1, r0
 8006196:	4605      	mov	r5, r0
 8006198:	4658      	mov	r0, fp
 800619a:	f000 fb61 	bl	8006860 <__multiply>
 800619e:	4649      	mov	r1, r9
 80061a0:	9004      	str	r0, [sp, #16]
 80061a2:	4658      	mov	r0, fp
 80061a4:	f000 fa92 	bl	80066cc <_Bfree>
 80061a8:	9b04      	ldr	r3, [sp, #16]
 80061aa:	4699      	mov	r9, r3
 80061ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ae:	1b1a      	subs	r2, r3, r4
 80061b0:	d004      	beq.n	80061bc <_dtoa_r+0x78c>
 80061b2:	4649      	mov	r1, r9
 80061b4:	4658      	mov	r0, fp
 80061b6:	f000 fbfd 	bl	80069b4 <__pow5mult>
 80061ba:	4681      	mov	r9, r0
 80061bc:	2101      	movs	r1, #1
 80061be:	4658      	mov	r0, fp
 80061c0:	f000 fb38 	bl	8006834 <__i2b>
 80061c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061c6:	4604      	mov	r4, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 81cf 	beq.w	800656c <_dtoa_r+0xb3c>
 80061ce:	461a      	mov	r2, r3
 80061d0:	4601      	mov	r1, r0
 80061d2:	4658      	mov	r0, fp
 80061d4:	f000 fbee 	bl	80069b4 <__pow5mult>
 80061d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061da:	2b01      	cmp	r3, #1
 80061dc:	4604      	mov	r4, r0
 80061de:	f300 8095 	bgt.w	800630c <_dtoa_r+0x8dc>
 80061e2:	9b02      	ldr	r3, [sp, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 8087 	bne.w	80062f8 <_dtoa_r+0x8c8>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f040 8089 	bne.w	8006308 <_dtoa_r+0x8d8>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061fc:	0d1b      	lsrs	r3, r3, #20
 80061fe:	051b      	lsls	r3, r3, #20
 8006200:	b12b      	cbz	r3, 800620e <_dtoa_r+0x7de>
 8006202:	9b08      	ldr	r3, [sp, #32]
 8006204:	3301      	adds	r3, #1
 8006206:	9308      	str	r3, [sp, #32]
 8006208:	f108 0801 	add.w	r8, r8, #1
 800620c:	2301      	movs	r3, #1
 800620e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 81b0 	beq.w	8006578 <_dtoa_r+0xb48>
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800621e:	6918      	ldr	r0, [r3, #16]
 8006220:	f000 fabc 	bl	800679c <__hi0bits>
 8006224:	f1c0 0020 	rsb	r0, r0, #32
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	4418      	add	r0, r3
 800622c:	f010 001f 	ands.w	r0, r0, #31
 8006230:	d077      	beq.n	8006322 <_dtoa_r+0x8f2>
 8006232:	f1c0 0320 	rsb	r3, r0, #32
 8006236:	2b04      	cmp	r3, #4
 8006238:	dd6b      	ble.n	8006312 <_dtoa_r+0x8e2>
 800623a:	9b08      	ldr	r3, [sp, #32]
 800623c:	f1c0 001c 	rsb	r0, r0, #28
 8006240:	4403      	add	r3, r0
 8006242:	4480      	add	r8, r0
 8006244:	4406      	add	r6, r0
 8006246:	9308      	str	r3, [sp, #32]
 8006248:	f1b8 0f00 	cmp.w	r8, #0
 800624c:	dd05      	ble.n	800625a <_dtoa_r+0x82a>
 800624e:	4649      	mov	r1, r9
 8006250:	4642      	mov	r2, r8
 8006252:	4658      	mov	r0, fp
 8006254:	f000 fc08 	bl	8006a68 <__lshift>
 8006258:	4681      	mov	r9, r0
 800625a:	9b08      	ldr	r3, [sp, #32]
 800625c:	2b00      	cmp	r3, #0
 800625e:	dd05      	ble.n	800626c <_dtoa_r+0x83c>
 8006260:	4621      	mov	r1, r4
 8006262:	461a      	mov	r2, r3
 8006264:	4658      	mov	r0, fp
 8006266:	f000 fbff 	bl	8006a68 <__lshift>
 800626a:	4604      	mov	r4, r0
 800626c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800626e:	2b00      	cmp	r3, #0
 8006270:	d059      	beq.n	8006326 <_dtoa_r+0x8f6>
 8006272:	4621      	mov	r1, r4
 8006274:	4648      	mov	r0, r9
 8006276:	f000 fc63 	bl	8006b40 <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	da53      	bge.n	8006326 <_dtoa_r+0x8f6>
 800627e:	1e7b      	subs	r3, r7, #1
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	4649      	mov	r1, r9
 8006284:	2300      	movs	r3, #0
 8006286:	220a      	movs	r2, #10
 8006288:	4658      	mov	r0, fp
 800628a:	f000 fa41 	bl	8006710 <__multadd>
 800628e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006290:	4681      	mov	r9, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8172 	beq.w	800657c <_dtoa_r+0xb4c>
 8006298:	2300      	movs	r3, #0
 800629a:	4629      	mov	r1, r5
 800629c:	220a      	movs	r2, #10
 800629e:	4658      	mov	r0, fp
 80062a0:	f000 fa36 	bl	8006710 <__multadd>
 80062a4:	9b00      	ldr	r3, [sp, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	4605      	mov	r5, r0
 80062aa:	dc67      	bgt.n	800637c <_dtoa_r+0x94c>
 80062ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	dc41      	bgt.n	8006336 <_dtoa_r+0x906>
 80062b2:	e063      	b.n	800637c <_dtoa_r+0x94c>
 80062b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80062b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062ba:	e746      	b.n	800614a <_dtoa_r+0x71a>
 80062bc:	9b07      	ldr	r3, [sp, #28]
 80062be:	1e5c      	subs	r4, r3, #1
 80062c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	bfbf      	itttt	lt
 80062c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80062c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80062ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80062cc:	1ae3      	sublt	r3, r4, r3
 80062ce:	bfb4      	ite	lt
 80062d0:	18d2      	addlt	r2, r2, r3
 80062d2:	1b1c      	subge	r4, r3, r4
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	bfbc      	itt	lt
 80062d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80062da:	2400      	movlt	r4, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bfb5      	itete	lt
 80062e0:	eba8 0603 	sublt.w	r6, r8, r3
 80062e4:	9b07      	ldrge	r3, [sp, #28]
 80062e6:	2300      	movlt	r3, #0
 80062e8:	4646      	movge	r6, r8
 80062ea:	e730      	b.n	800614e <_dtoa_r+0x71e>
 80062ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80062f0:	4646      	mov	r6, r8
 80062f2:	e735      	b.n	8006160 <_dtoa_r+0x730>
 80062f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062f6:	e75c      	b.n	80061b2 <_dtoa_r+0x782>
 80062f8:	2300      	movs	r3, #0
 80062fa:	e788      	b.n	800620e <_dtoa_r+0x7de>
 80062fc:	3fe00000 	.word	0x3fe00000
 8006300:	40240000 	.word	0x40240000
 8006304:	40140000 	.word	0x40140000
 8006308:	9b02      	ldr	r3, [sp, #8]
 800630a:	e780      	b.n	800620e <_dtoa_r+0x7de>
 800630c:	2300      	movs	r3, #0
 800630e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006310:	e782      	b.n	8006218 <_dtoa_r+0x7e8>
 8006312:	d099      	beq.n	8006248 <_dtoa_r+0x818>
 8006314:	9a08      	ldr	r2, [sp, #32]
 8006316:	331c      	adds	r3, #28
 8006318:	441a      	add	r2, r3
 800631a:	4498      	add	r8, r3
 800631c:	441e      	add	r6, r3
 800631e:	9208      	str	r2, [sp, #32]
 8006320:	e792      	b.n	8006248 <_dtoa_r+0x818>
 8006322:	4603      	mov	r3, r0
 8006324:	e7f6      	b.n	8006314 <_dtoa_r+0x8e4>
 8006326:	9b07      	ldr	r3, [sp, #28]
 8006328:	9704      	str	r7, [sp, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc20      	bgt.n	8006370 <_dtoa_r+0x940>
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006332:	2b02      	cmp	r3, #2
 8006334:	dd1e      	ble.n	8006374 <_dtoa_r+0x944>
 8006336:	9b00      	ldr	r3, [sp, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f47f aec0 	bne.w	80060be <_dtoa_r+0x68e>
 800633e:	4621      	mov	r1, r4
 8006340:	2205      	movs	r2, #5
 8006342:	4658      	mov	r0, fp
 8006344:	f000 f9e4 	bl	8006710 <__multadd>
 8006348:	4601      	mov	r1, r0
 800634a:	4604      	mov	r4, r0
 800634c:	4648      	mov	r0, r9
 800634e:	f000 fbf7 	bl	8006b40 <__mcmp>
 8006352:	2800      	cmp	r0, #0
 8006354:	f77f aeb3 	ble.w	80060be <_dtoa_r+0x68e>
 8006358:	4656      	mov	r6, sl
 800635a:	2331      	movs	r3, #49	@ 0x31
 800635c:	f806 3b01 	strb.w	r3, [r6], #1
 8006360:	9b04      	ldr	r3, [sp, #16]
 8006362:	3301      	adds	r3, #1
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	e6ae      	b.n	80060c6 <_dtoa_r+0x696>
 8006368:	9c07      	ldr	r4, [sp, #28]
 800636a:	9704      	str	r7, [sp, #16]
 800636c:	4625      	mov	r5, r4
 800636e:	e7f3      	b.n	8006358 <_dtoa_r+0x928>
 8006370:	9b07      	ldr	r3, [sp, #28]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8104 	beq.w	8006584 <_dtoa_r+0xb54>
 800637c:	2e00      	cmp	r6, #0
 800637e:	dd05      	ble.n	800638c <_dtoa_r+0x95c>
 8006380:	4629      	mov	r1, r5
 8006382:	4632      	mov	r2, r6
 8006384:	4658      	mov	r0, fp
 8006386:	f000 fb6f 	bl	8006a68 <__lshift>
 800638a:	4605      	mov	r5, r0
 800638c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d05a      	beq.n	8006448 <_dtoa_r+0xa18>
 8006392:	6869      	ldr	r1, [r5, #4]
 8006394:	4658      	mov	r0, fp
 8006396:	f000 f959 	bl	800664c <_Balloc>
 800639a:	4606      	mov	r6, r0
 800639c:	b928      	cbnz	r0, 80063aa <_dtoa_r+0x97a>
 800639e:	4b84      	ldr	r3, [pc, #528]	@ (80065b0 <_dtoa_r+0xb80>)
 80063a0:	4602      	mov	r2, r0
 80063a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063a6:	f7ff bb5a 	b.w	8005a5e <_dtoa_r+0x2e>
 80063aa:	692a      	ldr	r2, [r5, #16]
 80063ac:	3202      	adds	r2, #2
 80063ae:	0092      	lsls	r2, r2, #2
 80063b0:	f105 010c 	add.w	r1, r5, #12
 80063b4:	300c      	adds	r0, #12
 80063b6:	f000 ff3d 	bl	8007234 <memcpy>
 80063ba:	2201      	movs	r2, #1
 80063bc:	4631      	mov	r1, r6
 80063be:	4658      	mov	r0, fp
 80063c0:	f000 fb52 	bl	8006a68 <__lshift>
 80063c4:	f10a 0301 	add.w	r3, sl, #1
 80063c8:	9307      	str	r3, [sp, #28]
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	4453      	add	r3, sl
 80063ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063d0:	9b02      	ldr	r3, [sp, #8]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	462f      	mov	r7, r5
 80063d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063da:	4605      	mov	r5, r0
 80063dc:	9b07      	ldr	r3, [sp, #28]
 80063de:	4621      	mov	r1, r4
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4648      	mov	r0, r9
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	f7ff fa98 	bl	800591a <quorem>
 80063ea:	4639      	mov	r1, r7
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80063f2:	4648      	mov	r0, r9
 80063f4:	f000 fba4 	bl	8006b40 <__mcmp>
 80063f8:	462a      	mov	r2, r5
 80063fa:	9008      	str	r0, [sp, #32]
 80063fc:	4621      	mov	r1, r4
 80063fe:	4658      	mov	r0, fp
 8006400:	f000 fbba 	bl	8006b78 <__mdiff>
 8006404:	68c2      	ldr	r2, [r0, #12]
 8006406:	4606      	mov	r6, r0
 8006408:	bb02      	cbnz	r2, 800644c <_dtoa_r+0xa1c>
 800640a:	4601      	mov	r1, r0
 800640c:	4648      	mov	r0, r9
 800640e:	f000 fb97 	bl	8006b40 <__mcmp>
 8006412:	4602      	mov	r2, r0
 8006414:	4631      	mov	r1, r6
 8006416:	4658      	mov	r0, fp
 8006418:	920e      	str	r2, [sp, #56]	@ 0x38
 800641a:	f000 f957 	bl	80066cc <_Bfree>
 800641e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006420:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006422:	9e07      	ldr	r6, [sp, #28]
 8006424:	ea43 0102 	orr.w	r1, r3, r2
 8006428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800642a:	4319      	orrs	r1, r3
 800642c:	d110      	bne.n	8006450 <_dtoa_r+0xa20>
 800642e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006432:	d029      	beq.n	8006488 <_dtoa_r+0xa58>
 8006434:	9b08      	ldr	r3, [sp, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd02      	ble.n	8006440 <_dtoa_r+0xa10>
 800643a:	9b02      	ldr	r3, [sp, #8]
 800643c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006440:	9b00      	ldr	r3, [sp, #0]
 8006442:	f883 8000 	strb.w	r8, [r3]
 8006446:	e63f      	b.n	80060c8 <_dtoa_r+0x698>
 8006448:	4628      	mov	r0, r5
 800644a:	e7bb      	b.n	80063c4 <_dtoa_r+0x994>
 800644c:	2201      	movs	r2, #1
 800644e:	e7e1      	b.n	8006414 <_dtoa_r+0x9e4>
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	2b00      	cmp	r3, #0
 8006454:	db04      	blt.n	8006460 <_dtoa_r+0xa30>
 8006456:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006458:	430b      	orrs	r3, r1
 800645a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800645c:	430b      	orrs	r3, r1
 800645e:	d120      	bne.n	80064a2 <_dtoa_r+0xa72>
 8006460:	2a00      	cmp	r2, #0
 8006462:	dded      	ble.n	8006440 <_dtoa_r+0xa10>
 8006464:	4649      	mov	r1, r9
 8006466:	2201      	movs	r2, #1
 8006468:	4658      	mov	r0, fp
 800646a:	f000 fafd 	bl	8006a68 <__lshift>
 800646e:	4621      	mov	r1, r4
 8006470:	4681      	mov	r9, r0
 8006472:	f000 fb65 	bl	8006b40 <__mcmp>
 8006476:	2800      	cmp	r0, #0
 8006478:	dc03      	bgt.n	8006482 <_dtoa_r+0xa52>
 800647a:	d1e1      	bne.n	8006440 <_dtoa_r+0xa10>
 800647c:	f018 0f01 	tst.w	r8, #1
 8006480:	d0de      	beq.n	8006440 <_dtoa_r+0xa10>
 8006482:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006486:	d1d8      	bne.n	800643a <_dtoa_r+0xa0a>
 8006488:	9a00      	ldr	r2, [sp, #0]
 800648a:	2339      	movs	r3, #57	@ 0x39
 800648c:	7013      	strb	r3, [r2, #0]
 800648e:	4633      	mov	r3, r6
 8006490:	461e      	mov	r6, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006498:	2a39      	cmp	r2, #57	@ 0x39
 800649a:	d052      	beq.n	8006542 <_dtoa_r+0xb12>
 800649c:	3201      	adds	r2, #1
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e612      	b.n	80060c8 <_dtoa_r+0x698>
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	dd07      	ble.n	80064b6 <_dtoa_r+0xa86>
 80064a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064aa:	d0ed      	beq.n	8006488 <_dtoa_r+0xa58>
 80064ac:	9a00      	ldr	r2, [sp, #0]
 80064ae:	f108 0301 	add.w	r3, r8, #1
 80064b2:	7013      	strb	r3, [r2, #0]
 80064b4:	e608      	b.n	80060c8 <_dtoa_r+0x698>
 80064b6:	9b07      	ldr	r3, [sp, #28]
 80064b8:	9a07      	ldr	r2, [sp, #28]
 80064ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80064be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d028      	beq.n	8006516 <_dtoa_r+0xae6>
 80064c4:	4649      	mov	r1, r9
 80064c6:	2300      	movs	r3, #0
 80064c8:	220a      	movs	r2, #10
 80064ca:	4658      	mov	r0, fp
 80064cc:	f000 f920 	bl	8006710 <__multadd>
 80064d0:	42af      	cmp	r7, r5
 80064d2:	4681      	mov	r9, r0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	f04f 020a 	mov.w	r2, #10
 80064dc:	4639      	mov	r1, r7
 80064de:	4658      	mov	r0, fp
 80064e0:	d107      	bne.n	80064f2 <_dtoa_r+0xac2>
 80064e2:	f000 f915 	bl	8006710 <__multadd>
 80064e6:	4607      	mov	r7, r0
 80064e8:	4605      	mov	r5, r0
 80064ea:	9b07      	ldr	r3, [sp, #28]
 80064ec:	3301      	adds	r3, #1
 80064ee:	9307      	str	r3, [sp, #28]
 80064f0:	e774      	b.n	80063dc <_dtoa_r+0x9ac>
 80064f2:	f000 f90d 	bl	8006710 <__multadd>
 80064f6:	4629      	mov	r1, r5
 80064f8:	4607      	mov	r7, r0
 80064fa:	2300      	movs	r3, #0
 80064fc:	220a      	movs	r2, #10
 80064fe:	4658      	mov	r0, fp
 8006500:	f000 f906 	bl	8006710 <__multadd>
 8006504:	4605      	mov	r5, r0
 8006506:	e7f0      	b.n	80064ea <_dtoa_r+0xaba>
 8006508:	9b00      	ldr	r3, [sp, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfcc      	ite	gt
 800650e:	461e      	movgt	r6, r3
 8006510:	2601      	movle	r6, #1
 8006512:	4456      	add	r6, sl
 8006514:	2700      	movs	r7, #0
 8006516:	4649      	mov	r1, r9
 8006518:	2201      	movs	r2, #1
 800651a:	4658      	mov	r0, fp
 800651c:	f000 faa4 	bl	8006a68 <__lshift>
 8006520:	4621      	mov	r1, r4
 8006522:	4681      	mov	r9, r0
 8006524:	f000 fb0c 	bl	8006b40 <__mcmp>
 8006528:	2800      	cmp	r0, #0
 800652a:	dcb0      	bgt.n	800648e <_dtoa_r+0xa5e>
 800652c:	d102      	bne.n	8006534 <_dtoa_r+0xb04>
 800652e:	f018 0f01 	tst.w	r8, #1
 8006532:	d1ac      	bne.n	800648e <_dtoa_r+0xa5e>
 8006534:	4633      	mov	r3, r6
 8006536:	461e      	mov	r6, r3
 8006538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800653c:	2a30      	cmp	r2, #48	@ 0x30
 800653e:	d0fa      	beq.n	8006536 <_dtoa_r+0xb06>
 8006540:	e5c2      	b.n	80060c8 <_dtoa_r+0x698>
 8006542:	459a      	cmp	sl, r3
 8006544:	d1a4      	bne.n	8006490 <_dtoa_r+0xa60>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	2331      	movs	r3, #49	@ 0x31
 800654e:	f88a 3000 	strb.w	r3, [sl]
 8006552:	e5b9      	b.n	80060c8 <_dtoa_r+0x698>
 8006554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006556:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80065b4 <_dtoa_r+0xb84>
 800655a:	b11b      	cbz	r3, 8006564 <_dtoa_r+0xb34>
 800655c:	f10a 0308 	add.w	r3, sl, #8
 8006560:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	4650      	mov	r0, sl
 8006566:	b019      	add	sp, #100	@ 0x64
 8006568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656e:	2b01      	cmp	r3, #1
 8006570:	f77f ae37 	ble.w	80061e2 <_dtoa_r+0x7b2>
 8006574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006576:	930a      	str	r3, [sp, #40]	@ 0x28
 8006578:	2001      	movs	r0, #1
 800657a:	e655      	b.n	8006228 <_dtoa_r+0x7f8>
 800657c:	9b00      	ldr	r3, [sp, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f77f aed6 	ble.w	8006330 <_dtoa_r+0x900>
 8006584:	4656      	mov	r6, sl
 8006586:	4621      	mov	r1, r4
 8006588:	4648      	mov	r0, r9
 800658a:	f7ff f9c6 	bl	800591a <quorem>
 800658e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006592:	f806 8b01 	strb.w	r8, [r6], #1
 8006596:	9b00      	ldr	r3, [sp, #0]
 8006598:	eba6 020a 	sub.w	r2, r6, sl
 800659c:	4293      	cmp	r3, r2
 800659e:	ddb3      	ble.n	8006508 <_dtoa_r+0xad8>
 80065a0:	4649      	mov	r1, r9
 80065a2:	2300      	movs	r3, #0
 80065a4:	220a      	movs	r2, #10
 80065a6:	4658      	mov	r0, fp
 80065a8:	f000 f8b2 	bl	8006710 <__multadd>
 80065ac:	4681      	mov	r9, r0
 80065ae:	e7ea      	b.n	8006586 <_dtoa_r+0xb56>
 80065b0:	0800747d 	.word	0x0800747d
 80065b4:	08007401 	.word	0x08007401

080065b8 <_free_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4605      	mov	r5, r0
 80065bc:	2900      	cmp	r1, #0
 80065be:	d041      	beq.n	8006644 <_free_r+0x8c>
 80065c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c4:	1f0c      	subs	r4, r1, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfb8      	it	lt
 80065ca:	18e4      	addlt	r4, r4, r3
 80065cc:	f7fe fb18 	bl	8004c00 <__malloc_lock>
 80065d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <_free_r+0x90>)
 80065d2:	6813      	ldr	r3, [r2, #0]
 80065d4:	b933      	cbnz	r3, 80065e4 <_free_r+0x2c>
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6014      	str	r4, [r2, #0]
 80065da:	4628      	mov	r0, r5
 80065dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e0:	f7fe bb14 	b.w	8004c0c <__malloc_unlock>
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d908      	bls.n	80065fa <_free_r+0x42>
 80065e8:	6820      	ldr	r0, [r4, #0]
 80065ea:	1821      	adds	r1, r4, r0
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf01      	itttt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	1809      	addeq	r1, r1, r0
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	e7ed      	b.n	80065d6 <_free_r+0x1e>
 80065fa:	461a      	mov	r2, r3
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b10b      	cbz	r3, 8006604 <_free_r+0x4c>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d9fa      	bls.n	80065fa <_free_r+0x42>
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	1850      	adds	r0, r2, r1
 8006608:	42a0      	cmp	r0, r4
 800660a:	d10b      	bne.n	8006624 <_free_r+0x6c>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	4401      	add	r1, r0
 8006610:	1850      	adds	r0, r2, r1
 8006612:	4283      	cmp	r3, r0
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	d1e0      	bne.n	80065da <_free_r+0x22>
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	4408      	add	r0, r1
 8006620:	6010      	str	r0, [r2, #0]
 8006622:	e7da      	b.n	80065da <_free_r+0x22>
 8006624:	d902      	bls.n	800662c <_free_r+0x74>
 8006626:	230c      	movs	r3, #12
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	e7d6      	b.n	80065da <_free_r+0x22>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	1821      	adds	r1, r4, r0
 8006630:	428b      	cmp	r3, r1
 8006632:	bf04      	itt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	bf04      	itt	eq
 800663c:	1809      	addeq	r1, r1, r0
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	6054      	str	r4, [r2, #4]
 8006642:	e7ca      	b.n	80065da <_free_r+0x22>
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	20000654 	.word	0x20000654

0800664c <_Balloc>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	69c6      	ldr	r6, [r0, #28]
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	b976      	cbnz	r6, 8006674 <_Balloc+0x28>
 8006656:	2010      	movs	r0, #16
 8006658:	f7fe fa28 	bl	8004aac <malloc>
 800665c:	4602      	mov	r2, r0
 800665e:	61e0      	str	r0, [r4, #28]
 8006660:	b920      	cbnz	r0, 800666c <_Balloc+0x20>
 8006662:	4b18      	ldr	r3, [pc, #96]	@ (80066c4 <_Balloc+0x78>)
 8006664:	4818      	ldr	r0, [pc, #96]	@ (80066c8 <_Balloc+0x7c>)
 8006666:	216b      	movs	r1, #107	@ 0x6b
 8006668:	f000 fdf2 	bl	8007250 <__assert_func>
 800666c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006670:	6006      	str	r6, [r0, #0]
 8006672:	60c6      	str	r6, [r0, #12]
 8006674:	69e6      	ldr	r6, [r4, #28]
 8006676:	68f3      	ldr	r3, [r6, #12]
 8006678:	b183      	cbz	r3, 800669c <_Balloc+0x50>
 800667a:	69e3      	ldr	r3, [r4, #28]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006682:	b9b8      	cbnz	r0, 80066b4 <_Balloc+0x68>
 8006684:	2101      	movs	r1, #1
 8006686:	fa01 f605 	lsl.w	r6, r1, r5
 800668a:	1d72      	adds	r2, r6, #5
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fdfc 	bl	800728c <_calloc_r>
 8006694:	b160      	cbz	r0, 80066b0 <_Balloc+0x64>
 8006696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800669a:	e00e      	b.n	80066ba <_Balloc+0x6e>
 800669c:	2221      	movs	r2, #33	@ 0x21
 800669e:	2104      	movs	r1, #4
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fdf3 	bl	800728c <_calloc_r>
 80066a6:	69e3      	ldr	r3, [r4, #28]
 80066a8:	60f0      	str	r0, [r6, #12]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e4      	bne.n	800667a <_Balloc+0x2e>
 80066b0:	2000      	movs	r0, #0
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	6802      	ldr	r2, [r0, #0]
 80066b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066ba:	2300      	movs	r3, #0
 80066bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066c0:	e7f7      	b.n	80066b2 <_Balloc+0x66>
 80066c2:	bf00      	nop
 80066c4:	0800740e 	.word	0x0800740e
 80066c8:	0800748e 	.word	0x0800748e

080066cc <_Bfree>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	69c6      	ldr	r6, [r0, #28]
 80066d0:	4605      	mov	r5, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	b976      	cbnz	r6, 80066f4 <_Bfree+0x28>
 80066d6:	2010      	movs	r0, #16
 80066d8:	f7fe f9e8 	bl	8004aac <malloc>
 80066dc:	4602      	mov	r2, r0
 80066de:	61e8      	str	r0, [r5, #28]
 80066e0:	b920      	cbnz	r0, 80066ec <_Bfree+0x20>
 80066e2:	4b09      	ldr	r3, [pc, #36]	@ (8006708 <_Bfree+0x3c>)
 80066e4:	4809      	ldr	r0, [pc, #36]	@ (800670c <_Bfree+0x40>)
 80066e6:	218f      	movs	r1, #143	@ 0x8f
 80066e8:	f000 fdb2 	bl	8007250 <__assert_func>
 80066ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066f0:	6006      	str	r6, [r0, #0]
 80066f2:	60c6      	str	r6, [r0, #12]
 80066f4:	b13c      	cbz	r4, 8006706 <_Bfree+0x3a>
 80066f6:	69eb      	ldr	r3, [r5, #28]
 80066f8:	6862      	ldr	r2, [r4, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006700:	6021      	str	r1, [r4, #0]
 8006702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	0800740e 	.word	0x0800740e
 800670c:	0800748e 	.word	0x0800748e

08006710 <__multadd>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	690d      	ldr	r5, [r1, #16]
 8006716:	4607      	mov	r7, r0
 8006718:	460c      	mov	r4, r1
 800671a:	461e      	mov	r6, r3
 800671c:	f101 0c14 	add.w	ip, r1, #20
 8006720:	2000      	movs	r0, #0
 8006722:	f8dc 3000 	ldr.w	r3, [ip]
 8006726:	b299      	uxth	r1, r3
 8006728:	fb02 6101 	mla	r1, r2, r1, r6
 800672c:	0c1e      	lsrs	r6, r3, #16
 800672e:	0c0b      	lsrs	r3, r1, #16
 8006730:	fb02 3306 	mla	r3, r2, r6, r3
 8006734:	b289      	uxth	r1, r1
 8006736:	3001      	adds	r0, #1
 8006738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800673c:	4285      	cmp	r5, r0
 800673e:	f84c 1b04 	str.w	r1, [ip], #4
 8006742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006746:	dcec      	bgt.n	8006722 <__multadd+0x12>
 8006748:	b30e      	cbz	r6, 800678e <__multadd+0x7e>
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	42ab      	cmp	r3, r5
 800674e:	dc19      	bgt.n	8006784 <__multadd+0x74>
 8006750:	6861      	ldr	r1, [r4, #4]
 8006752:	4638      	mov	r0, r7
 8006754:	3101      	adds	r1, #1
 8006756:	f7ff ff79 	bl	800664c <_Balloc>
 800675a:	4680      	mov	r8, r0
 800675c:	b928      	cbnz	r0, 800676a <__multadd+0x5a>
 800675e:	4602      	mov	r2, r0
 8006760:	4b0c      	ldr	r3, [pc, #48]	@ (8006794 <__multadd+0x84>)
 8006762:	480d      	ldr	r0, [pc, #52]	@ (8006798 <__multadd+0x88>)
 8006764:	21ba      	movs	r1, #186	@ 0xba
 8006766:	f000 fd73 	bl	8007250 <__assert_func>
 800676a:	6922      	ldr	r2, [r4, #16]
 800676c:	3202      	adds	r2, #2
 800676e:	f104 010c 	add.w	r1, r4, #12
 8006772:	0092      	lsls	r2, r2, #2
 8006774:	300c      	adds	r0, #12
 8006776:	f000 fd5d 	bl	8007234 <memcpy>
 800677a:	4621      	mov	r1, r4
 800677c:	4638      	mov	r0, r7
 800677e:	f7ff ffa5 	bl	80066cc <_Bfree>
 8006782:	4644      	mov	r4, r8
 8006784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006788:	3501      	adds	r5, #1
 800678a:	615e      	str	r6, [r3, #20]
 800678c:	6125      	str	r5, [r4, #16]
 800678e:	4620      	mov	r0, r4
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006794:	0800747d 	.word	0x0800747d
 8006798:	0800748e 	.word	0x0800748e

0800679c <__hi0bits>:
 800679c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80067a0:	4603      	mov	r3, r0
 80067a2:	bf36      	itet	cc
 80067a4:	0403      	lslcc	r3, r0, #16
 80067a6:	2000      	movcs	r0, #0
 80067a8:	2010      	movcc	r0, #16
 80067aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067ae:	bf3c      	itt	cc
 80067b0:	021b      	lslcc	r3, r3, #8
 80067b2:	3008      	addcc	r0, #8
 80067b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067b8:	bf3c      	itt	cc
 80067ba:	011b      	lslcc	r3, r3, #4
 80067bc:	3004      	addcc	r0, #4
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c2:	bf3c      	itt	cc
 80067c4:	009b      	lslcc	r3, r3, #2
 80067c6:	3002      	addcc	r0, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	db05      	blt.n	80067d8 <__hi0bits+0x3c>
 80067cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80067d0:	f100 0001 	add.w	r0, r0, #1
 80067d4:	bf08      	it	eq
 80067d6:	2020      	moveq	r0, #32
 80067d8:	4770      	bx	lr

080067da <__lo0bits>:
 80067da:	6803      	ldr	r3, [r0, #0]
 80067dc:	4602      	mov	r2, r0
 80067de:	f013 0007 	ands.w	r0, r3, #7
 80067e2:	d00b      	beq.n	80067fc <__lo0bits+0x22>
 80067e4:	07d9      	lsls	r1, r3, #31
 80067e6:	d421      	bmi.n	800682c <__lo0bits+0x52>
 80067e8:	0798      	lsls	r0, r3, #30
 80067ea:	bf49      	itett	mi
 80067ec:	085b      	lsrmi	r3, r3, #1
 80067ee:	089b      	lsrpl	r3, r3, #2
 80067f0:	2001      	movmi	r0, #1
 80067f2:	6013      	strmi	r3, [r2, #0]
 80067f4:	bf5c      	itt	pl
 80067f6:	6013      	strpl	r3, [r2, #0]
 80067f8:	2002      	movpl	r0, #2
 80067fa:	4770      	bx	lr
 80067fc:	b299      	uxth	r1, r3
 80067fe:	b909      	cbnz	r1, 8006804 <__lo0bits+0x2a>
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	2010      	movs	r0, #16
 8006804:	b2d9      	uxtb	r1, r3
 8006806:	b909      	cbnz	r1, 800680c <__lo0bits+0x32>
 8006808:	3008      	adds	r0, #8
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	0719      	lsls	r1, r3, #28
 800680e:	bf04      	itt	eq
 8006810:	091b      	lsreq	r3, r3, #4
 8006812:	3004      	addeq	r0, #4
 8006814:	0799      	lsls	r1, r3, #30
 8006816:	bf04      	itt	eq
 8006818:	089b      	lsreq	r3, r3, #2
 800681a:	3002      	addeq	r0, #2
 800681c:	07d9      	lsls	r1, r3, #31
 800681e:	d403      	bmi.n	8006828 <__lo0bits+0x4e>
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	f100 0001 	add.w	r0, r0, #1
 8006826:	d003      	beq.n	8006830 <__lo0bits+0x56>
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	4770      	bx	lr
 800682c:	2000      	movs	r0, #0
 800682e:	4770      	bx	lr
 8006830:	2020      	movs	r0, #32
 8006832:	4770      	bx	lr

08006834 <__i2b>:
 8006834:	b510      	push	{r4, lr}
 8006836:	460c      	mov	r4, r1
 8006838:	2101      	movs	r1, #1
 800683a:	f7ff ff07 	bl	800664c <_Balloc>
 800683e:	4602      	mov	r2, r0
 8006840:	b928      	cbnz	r0, 800684e <__i2b+0x1a>
 8006842:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <__i2b+0x24>)
 8006844:	4805      	ldr	r0, [pc, #20]	@ (800685c <__i2b+0x28>)
 8006846:	f240 1145 	movw	r1, #325	@ 0x145
 800684a:	f000 fd01 	bl	8007250 <__assert_func>
 800684e:	2301      	movs	r3, #1
 8006850:	6144      	str	r4, [r0, #20]
 8006852:	6103      	str	r3, [r0, #16]
 8006854:	bd10      	pop	{r4, pc}
 8006856:	bf00      	nop
 8006858:	0800747d 	.word	0x0800747d
 800685c:	0800748e 	.word	0x0800748e

08006860 <__multiply>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	4614      	mov	r4, r2
 8006866:	690a      	ldr	r2, [r1, #16]
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	bfa8      	it	ge
 800686e:	4623      	movge	r3, r4
 8006870:	460f      	mov	r7, r1
 8006872:	bfa4      	itt	ge
 8006874:	460c      	movge	r4, r1
 8006876:	461f      	movge	r7, r3
 8006878:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800687c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006880:	68a3      	ldr	r3, [r4, #8]
 8006882:	6861      	ldr	r1, [r4, #4]
 8006884:	eb0a 0609 	add.w	r6, sl, r9
 8006888:	42b3      	cmp	r3, r6
 800688a:	b085      	sub	sp, #20
 800688c:	bfb8      	it	lt
 800688e:	3101      	addlt	r1, #1
 8006890:	f7ff fedc 	bl	800664c <_Balloc>
 8006894:	b930      	cbnz	r0, 80068a4 <__multiply+0x44>
 8006896:	4602      	mov	r2, r0
 8006898:	4b44      	ldr	r3, [pc, #272]	@ (80069ac <__multiply+0x14c>)
 800689a:	4845      	ldr	r0, [pc, #276]	@ (80069b0 <__multiply+0x150>)
 800689c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80068a0:	f000 fcd6 	bl	8007250 <__assert_func>
 80068a4:	f100 0514 	add.w	r5, r0, #20
 80068a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068ac:	462b      	mov	r3, r5
 80068ae:	2200      	movs	r2, #0
 80068b0:	4543      	cmp	r3, r8
 80068b2:	d321      	bcc.n	80068f8 <__multiply+0x98>
 80068b4:	f107 0114 	add.w	r1, r7, #20
 80068b8:	f104 0214 	add.w	r2, r4, #20
 80068bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80068c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80068c4:	9302      	str	r3, [sp, #8]
 80068c6:	1b13      	subs	r3, r2, r4
 80068c8:	3b15      	subs	r3, #21
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	3304      	adds	r3, #4
 80068d0:	f104 0715 	add.w	r7, r4, #21
 80068d4:	42ba      	cmp	r2, r7
 80068d6:	bf38      	it	cc
 80068d8:	2304      	movcc	r3, #4
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	9b02      	ldr	r3, [sp, #8]
 80068de:	9103      	str	r1, [sp, #12]
 80068e0:	428b      	cmp	r3, r1
 80068e2:	d80c      	bhi.n	80068fe <__multiply+0x9e>
 80068e4:	2e00      	cmp	r6, #0
 80068e6:	dd03      	ble.n	80068f0 <__multiply+0x90>
 80068e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d05b      	beq.n	80069a8 <__multiply+0x148>
 80068f0:	6106      	str	r6, [r0, #16]
 80068f2:	b005      	add	sp, #20
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	f843 2b04 	str.w	r2, [r3], #4
 80068fc:	e7d8      	b.n	80068b0 <__multiply+0x50>
 80068fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8006902:	f1ba 0f00 	cmp.w	sl, #0
 8006906:	d024      	beq.n	8006952 <__multiply+0xf2>
 8006908:	f104 0e14 	add.w	lr, r4, #20
 800690c:	46a9      	mov	r9, r5
 800690e:	f04f 0c00 	mov.w	ip, #0
 8006912:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006916:	f8d9 3000 	ldr.w	r3, [r9]
 800691a:	fa1f fb87 	uxth.w	fp, r7
 800691e:	b29b      	uxth	r3, r3
 8006920:	fb0a 330b 	mla	r3, sl, fp, r3
 8006924:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006928:	f8d9 7000 	ldr.w	r7, [r9]
 800692c:	4463      	add	r3, ip
 800692e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006932:	fb0a c70b 	mla	r7, sl, fp, ip
 8006936:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800693a:	b29b      	uxth	r3, r3
 800693c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006940:	4572      	cmp	r2, lr
 8006942:	f849 3b04 	str.w	r3, [r9], #4
 8006946:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800694a:	d8e2      	bhi.n	8006912 <__multiply+0xb2>
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	f845 c003 	str.w	ip, [r5, r3]
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006958:	3104      	adds	r1, #4
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	d021      	beq.n	80069a4 <__multiply+0x144>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	f104 0c14 	add.w	ip, r4, #20
 8006966:	46ae      	mov	lr, r5
 8006968:	f04f 0a00 	mov.w	sl, #0
 800696c:	f8bc b000 	ldrh.w	fp, [ip]
 8006970:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006974:	fb09 770b 	mla	r7, r9, fp, r7
 8006978:	4457      	add	r7, sl
 800697a:	b29b      	uxth	r3, r3
 800697c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006980:	f84e 3b04 	str.w	r3, [lr], #4
 8006984:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800698c:	f8be 3000 	ldrh.w	r3, [lr]
 8006990:	fb09 330a 	mla	r3, r9, sl, r3
 8006994:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006998:	4562      	cmp	r2, ip
 800699a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800699e:	d8e5      	bhi.n	800696c <__multiply+0x10c>
 80069a0:	9f01      	ldr	r7, [sp, #4]
 80069a2:	51eb      	str	r3, [r5, r7]
 80069a4:	3504      	adds	r5, #4
 80069a6:	e799      	b.n	80068dc <__multiply+0x7c>
 80069a8:	3e01      	subs	r6, #1
 80069aa:	e79b      	b.n	80068e4 <__multiply+0x84>
 80069ac:	0800747d 	.word	0x0800747d
 80069b0:	0800748e 	.word	0x0800748e

080069b4 <__pow5mult>:
 80069b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b8:	4615      	mov	r5, r2
 80069ba:	f012 0203 	ands.w	r2, r2, #3
 80069be:	4607      	mov	r7, r0
 80069c0:	460e      	mov	r6, r1
 80069c2:	d007      	beq.n	80069d4 <__pow5mult+0x20>
 80069c4:	4c25      	ldr	r4, [pc, #148]	@ (8006a5c <__pow5mult+0xa8>)
 80069c6:	3a01      	subs	r2, #1
 80069c8:	2300      	movs	r3, #0
 80069ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069ce:	f7ff fe9f 	bl	8006710 <__multadd>
 80069d2:	4606      	mov	r6, r0
 80069d4:	10ad      	asrs	r5, r5, #2
 80069d6:	d03d      	beq.n	8006a54 <__pow5mult+0xa0>
 80069d8:	69fc      	ldr	r4, [r7, #28]
 80069da:	b97c      	cbnz	r4, 80069fc <__pow5mult+0x48>
 80069dc:	2010      	movs	r0, #16
 80069de:	f7fe f865 	bl	8004aac <malloc>
 80069e2:	4602      	mov	r2, r0
 80069e4:	61f8      	str	r0, [r7, #28]
 80069e6:	b928      	cbnz	r0, 80069f4 <__pow5mult+0x40>
 80069e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a60 <__pow5mult+0xac>)
 80069ea:	481e      	ldr	r0, [pc, #120]	@ (8006a64 <__pow5mult+0xb0>)
 80069ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80069f0:	f000 fc2e 	bl	8007250 <__assert_func>
 80069f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069f8:	6004      	str	r4, [r0, #0]
 80069fa:	60c4      	str	r4, [r0, #12]
 80069fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a04:	b94c      	cbnz	r4, 8006a1a <__pow5mult+0x66>
 8006a06:	f240 2171 	movw	r1, #625	@ 0x271
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff ff12 	bl	8006834 <__i2b>
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a16:	4604      	mov	r4, r0
 8006a18:	6003      	str	r3, [r0, #0]
 8006a1a:	f04f 0900 	mov.w	r9, #0
 8006a1e:	07eb      	lsls	r3, r5, #31
 8006a20:	d50a      	bpl.n	8006a38 <__pow5mult+0x84>
 8006a22:	4631      	mov	r1, r6
 8006a24:	4622      	mov	r2, r4
 8006a26:	4638      	mov	r0, r7
 8006a28:	f7ff ff1a 	bl	8006860 <__multiply>
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4680      	mov	r8, r0
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff fe4b 	bl	80066cc <_Bfree>
 8006a36:	4646      	mov	r6, r8
 8006a38:	106d      	asrs	r5, r5, #1
 8006a3a:	d00b      	beq.n	8006a54 <__pow5mult+0xa0>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	b938      	cbnz	r0, 8006a50 <__pow5mult+0x9c>
 8006a40:	4622      	mov	r2, r4
 8006a42:	4621      	mov	r1, r4
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7ff ff0b 	bl	8006860 <__multiply>
 8006a4a:	6020      	str	r0, [r4, #0]
 8006a4c:	f8c0 9000 	str.w	r9, [r0]
 8006a50:	4604      	mov	r4, r0
 8006a52:	e7e4      	b.n	8006a1e <__pow5mult+0x6a>
 8006a54:	4630      	mov	r0, r6
 8006a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5a:	bf00      	nop
 8006a5c:	080074e8 	.word	0x080074e8
 8006a60:	0800740e 	.word	0x0800740e
 8006a64:	0800748e 	.word	0x0800748e

08006a68 <__lshift>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	6849      	ldr	r1, [r1, #4]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a76:	68a3      	ldr	r3, [r4, #8]
 8006a78:	4607      	mov	r7, r0
 8006a7a:	4691      	mov	r9, r2
 8006a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a80:	f108 0601 	add.w	r6, r8, #1
 8006a84:	42b3      	cmp	r3, r6
 8006a86:	db0b      	blt.n	8006aa0 <__lshift+0x38>
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7ff fddf 	bl	800664c <_Balloc>
 8006a8e:	4605      	mov	r5, r0
 8006a90:	b948      	cbnz	r0, 8006aa6 <__lshift+0x3e>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b28      	ldr	r3, [pc, #160]	@ (8006b38 <__lshift+0xd0>)
 8006a96:	4829      	ldr	r0, [pc, #164]	@ (8006b3c <__lshift+0xd4>)
 8006a98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a9c:	f000 fbd8 	bl	8007250 <__assert_func>
 8006aa0:	3101      	adds	r1, #1
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	e7ee      	b.n	8006a84 <__lshift+0x1c>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f100 0114 	add.w	r1, r0, #20
 8006aac:	f100 0210 	add.w	r2, r0, #16
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	4553      	cmp	r3, sl
 8006ab4:	db33      	blt.n	8006b1e <__lshift+0xb6>
 8006ab6:	6920      	ldr	r0, [r4, #16]
 8006ab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006abc:	f104 0314 	add.w	r3, r4, #20
 8006ac0:	f019 091f 	ands.w	r9, r9, #31
 8006ac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006acc:	d02b      	beq.n	8006b26 <__lshift+0xbe>
 8006ace:	f1c9 0e20 	rsb	lr, r9, #32
 8006ad2:	468a      	mov	sl, r1
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	fa00 f009 	lsl.w	r0, r0, r9
 8006adc:	4310      	orrs	r0, r2
 8006ade:	f84a 0b04 	str.w	r0, [sl], #4
 8006ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae6:	459c      	cmp	ip, r3
 8006ae8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006aec:	d8f3      	bhi.n	8006ad6 <__lshift+0x6e>
 8006aee:	ebac 0304 	sub.w	r3, ip, r4
 8006af2:	3b15      	subs	r3, #21
 8006af4:	f023 0303 	bic.w	r3, r3, #3
 8006af8:	3304      	adds	r3, #4
 8006afa:	f104 0015 	add.w	r0, r4, #21
 8006afe:	4584      	cmp	ip, r0
 8006b00:	bf38      	it	cc
 8006b02:	2304      	movcc	r3, #4
 8006b04:	50ca      	str	r2, [r1, r3]
 8006b06:	b10a      	cbz	r2, 8006b0c <__lshift+0xa4>
 8006b08:	f108 0602 	add.w	r6, r8, #2
 8006b0c:	3e01      	subs	r6, #1
 8006b0e:	4638      	mov	r0, r7
 8006b10:	612e      	str	r6, [r5, #16]
 8006b12:	4621      	mov	r1, r4
 8006b14:	f7ff fdda 	bl	80066cc <_Bfree>
 8006b18:	4628      	mov	r0, r5
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b22:	3301      	adds	r3, #1
 8006b24:	e7c5      	b.n	8006ab2 <__lshift+0x4a>
 8006b26:	3904      	subs	r1, #4
 8006b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b30:	459c      	cmp	ip, r3
 8006b32:	d8f9      	bhi.n	8006b28 <__lshift+0xc0>
 8006b34:	e7ea      	b.n	8006b0c <__lshift+0xa4>
 8006b36:	bf00      	nop
 8006b38:	0800747d 	.word	0x0800747d
 8006b3c:	0800748e 	.word	0x0800748e

08006b40 <__mcmp>:
 8006b40:	690a      	ldr	r2, [r1, #16]
 8006b42:	4603      	mov	r3, r0
 8006b44:	6900      	ldr	r0, [r0, #16]
 8006b46:	1a80      	subs	r0, r0, r2
 8006b48:	b530      	push	{r4, r5, lr}
 8006b4a:	d10e      	bne.n	8006b6a <__mcmp+0x2a>
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	3114      	adds	r1, #20
 8006b50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b60:	4295      	cmp	r5, r2
 8006b62:	d003      	beq.n	8006b6c <__mcmp+0x2c>
 8006b64:	d205      	bcs.n	8006b72 <__mcmp+0x32>
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	bd30      	pop	{r4, r5, pc}
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d3f3      	bcc.n	8006b58 <__mcmp+0x18>
 8006b70:	e7fb      	b.n	8006b6a <__mcmp+0x2a>
 8006b72:	2001      	movs	r0, #1
 8006b74:	e7f9      	b.n	8006b6a <__mcmp+0x2a>
	...

08006b78 <__mdiff>:
 8006b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	4689      	mov	r9, r1
 8006b7e:	4606      	mov	r6, r0
 8006b80:	4611      	mov	r1, r2
 8006b82:	4648      	mov	r0, r9
 8006b84:	4614      	mov	r4, r2
 8006b86:	f7ff ffdb 	bl	8006b40 <__mcmp>
 8006b8a:	1e05      	subs	r5, r0, #0
 8006b8c:	d112      	bne.n	8006bb4 <__mdiff+0x3c>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff fd5b 	bl	800664c <_Balloc>
 8006b96:	4602      	mov	r2, r0
 8006b98:	b928      	cbnz	r0, 8006ba6 <__mdiff+0x2e>
 8006b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c98 <__mdiff+0x120>)
 8006b9c:	f240 2137 	movw	r1, #567	@ 0x237
 8006ba0:	483e      	ldr	r0, [pc, #248]	@ (8006c9c <__mdiff+0x124>)
 8006ba2:	f000 fb55 	bl	8007250 <__assert_func>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bac:	4610      	mov	r0, r2
 8006bae:	b003      	add	sp, #12
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	bfbc      	itt	lt
 8006bb6:	464b      	movlt	r3, r9
 8006bb8:	46a1      	movlt	r9, r4
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006bc0:	bfba      	itte	lt
 8006bc2:	461c      	movlt	r4, r3
 8006bc4:	2501      	movlt	r5, #1
 8006bc6:	2500      	movge	r5, #0
 8006bc8:	f7ff fd40 	bl	800664c <_Balloc>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	b918      	cbnz	r0, 8006bd8 <__mdiff+0x60>
 8006bd0:	4b31      	ldr	r3, [pc, #196]	@ (8006c98 <__mdiff+0x120>)
 8006bd2:	f240 2145 	movw	r1, #581	@ 0x245
 8006bd6:	e7e3      	b.n	8006ba0 <__mdiff+0x28>
 8006bd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006bdc:	6926      	ldr	r6, [r4, #16]
 8006bde:	60c5      	str	r5, [r0, #12]
 8006be0:	f109 0310 	add.w	r3, r9, #16
 8006be4:	f109 0514 	add.w	r5, r9, #20
 8006be8:	f104 0e14 	add.w	lr, r4, #20
 8006bec:	f100 0b14 	add.w	fp, r0, #20
 8006bf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006bf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	46d9      	mov	r9, fp
 8006bfc:	f04f 0c00 	mov.w	ip, #0
 8006c00:	9b01      	ldr	r3, [sp, #4]
 8006c02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	fa1f f38a 	uxth.w	r3, sl
 8006c10:	4619      	mov	r1, r3
 8006c12:	b283      	uxth	r3, r0
 8006c14:	1acb      	subs	r3, r1, r3
 8006c16:	0c00      	lsrs	r0, r0, #16
 8006c18:	4463      	add	r3, ip
 8006c1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c28:	4576      	cmp	r6, lr
 8006c2a:	f849 3b04 	str.w	r3, [r9], #4
 8006c2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c32:	d8e5      	bhi.n	8006c00 <__mdiff+0x88>
 8006c34:	1b33      	subs	r3, r6, r4
 8006c36:	3b15      	subs	r3, #21
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	3415      	adds	r4, #21
 8006c3e:	3304      	adds	r3, #4
 8006c40:	42a6      	cmp	r6, r4
 8006c42:	bf38      	it	cc
 8006c44:	2304      	movcc	r3, #4
 8006c46:	441d      	add	r5, r3
 8006c48:	445b      	add	r3, fp
 8006c4a:	461e      	mov	r6, r3
 8006c4c:	462c      	mov	r4, r5
 8006c4e:	4544      	cmp	r4, r8
 8006c50:	d30e      	bcc.n	8006c70 <__mdiff+0xf8>
 8006c52:	f108 0103 	add.w	r1, r8, #3
 8006c56:	1b49      	subs	r1, r1, r5
 8006c58:	f021 0103 	bic.w	r1, r1, #3
 8006c5c:	3d03      	subs	r5, #3
 8006c5e:	45a8      	cmp	r8, r5
 8006c60:	bf38      	it	cc
 8006c62:	2100      	movcc	r1, #0
 8006c64:	440b      	add	r3, r1
 8006c66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c6a:	b191      	cbz	r1, 8006c92 <__mdiff+0x11a>
 8006c6c:	6117      	str	r7, [r2, #16]
 8006c6e:	e79d      	b.n	8006bac <__mdiff+0x34>
 8006c70:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c74:	46e6      	mov	lr, ip
 8006c76:	0c08      	lsrs	r0, r1, #16
 8006c78:	fa1c fc81 	uxtah	ip, ip, r1
 8006c7c:	4471      	add	r1, lr
 8006c7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c82:	b289      	uxth	r1, r1
 8006c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c88:	f846 1b04 	str.w	r1, [r6], #4
 8006c8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c90:	e7dd      	b.n	8006c4e <__mdiff+0xd6>
 8006c92:	3f01      	subs	r7, #1
 8006c94:	e7e7      	b.n	8006c66 <__mdiff+0xee>
 8006c96:	bf00      	nop
 8006c98:	0800747d 	.word	0x0800747d
 8006c9c:	0800748e 	.word	0x0800748e

08006ca0 <__d2b>:
 8006ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	460f      	mov	r7, r1
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	ec59 8b10 	vmov	r8, r9, d0
 8006cac:	4616      	mov	r6, r2
 8006cae:	f7ff fccd 	bl	800664c <_Balloc>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	b930      	cbnz	r0, 8006cc4 <__d2b+0x24>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4b23      	ldr	r3, [pc, #140]	@ (8006d48 <__d2b+0xa8>)
 8006cba:	4824      	ldr	r0, [pc, #144]	@ (8006d4c <__d2b+0xac>)
 8006cbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006cc0:	f000 fac6 	bl	8007250 <__assert_func>
 8006cc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ccc:	b10d      	cbz	r5, 8006cd2 <__d2b+0x32>
 8006cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	f1b8 0300 	subs.w	r3, r8, #0
 8006cd8:	d023      	beq.n	8006d22 <__d2b+0x82>
 8006cda:	4668      	mov	r0, sp
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	f7ff fd7c 	bl	80067da <__lo0bits>
 8006ce2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ce6:	b1d0      	cbz	r0, 8006d1e <__d2b+0x7e>
 8006ce8:	f1c0 0320 	rsb	r3, r0, #32
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	40c2      	lsrs	r2, r0
 8006cf4:	6163      	str	r3, [r4, #20]
 8006cf6:	9201      	str	r2, [sp, #4]
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	61a3      	str	r3, [r4, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf0c      	ite	eq
 8006d00:	2201      	moveq	r2, #1
 8006d02:	2202      	movne	r2, #2
 8006d04:	6122      	str	r2, [r4, #16]
 8006d06:	b1a5      	cbz	r5, 8006d32 <__d2b+0x92>
 8006d08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d0c:	4405      	add	r5, r0
 8006d0e:	603d      	str	r5, [r7, #0]
 8006d10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d14:	6030      	str	r0, [r6, #0]
 8006d16:	4620      	mov	r0, r4
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1e:	6161      	str	r1, [r4, #20]
 8006d20:	e7ea      	b.n	8006cf8 <__d2b+0x58>
 8006d22:	a801      	add	r0, sp, #4
 8006d24:	f7ff fd59 	bl	80067da <__lo0bits>
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	6163      	str	r3, [r4, #20]
 8006d2c:	3020      	adds	r0, #32
 8006d2e:	2201      	movs	r2, #1
 8006d30:	e7e8      	b.n	8006d04 <__d2b+0x64>
 8006d32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d3a:	6038      	str	r0, [r7, #0]
 8006d3c:	6918      	ldr	r0, [r3, #16]
 8006d3e:	f7ff fd2d 	bl	800679c <__hi0bits>
 8006d42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d46:	e7e5      	b.n	8006d14 <__d2b+0x74>
 8006d48:	0800747d 	.word	0x0800747d
 8006d4c:	0800748e 	.word	0x0800748e

08006d50 <__sfputc_r>:
 8006d50:	6893      	ldr	r3, [r2, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	b410      	push	{r4}
 8006d58:	6093      	str	r3, [r2, #8]
 8006d5a:	da08      	bge.n	8006d6e <__sfputc_r+0x1e>
 8006d5c:	6994      	ldr	r4, [r2, #24]
 8006d5e:	42a3      	cmp	r3, r4
 8006d60:	db01      	blt.n	8006d66 <__sfputc_r+0x16>
 8006d62:	290a      	cmp	r1, #10
 8006d64:	d103      	bne.n	8006d6e <__sfputc_r+0x1e>
 8006d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6a:	f7fe bcb2 	b.w	80056d2 <__swbuf_r>
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	1c58      	adds	r0, r3, #1
 8006d72:	6010      	str	r0, [r2, #0]
 8006d74:	7019      	strb	r1, [r3, #0]
 8006d76:	4608      	mov	r0, r1
 8006d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <__sfputs_r>:
 8006d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	4614      	mov	r4, r2
 8006d86:	18d5      	adds	r5, r2, r3
 8006d88:	42ac      	cmp	r4, r5
 8006d8a:	d101      	bne.n	8006d90 <__sfputs_r+0x12>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	e007      	b.n	8006da0 <__sfputs_r+0x22>
 8006d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d94:	463a      	mov	r2, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ffda 	bl	8006d50 <__sfputc_r>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d1f3      	bne.n	8006d88 <__sfputs_r+0xa>
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da4 <_vfiprintf_r>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	460d      	mov	r5, r1
 8006daa:	b09d      	sub	sp, #116	@ 0x74
 8006dac:	4614      	mov	r4, r2
 8006dae:	4698      	mov	r8, r3
 8006db0:	4606      	mov	r6, r0
 8006db2:	b118      	cbz	r0, 8006dbc <_vfiprintf_r+0x18>
 8006db4:	6a03      	ldr	r3, [r0, #32]
 8006db6:	b90b      	cbnz	r3, 8006dbc <_vfiprintf_r+0x18>
 8006db8:	f7fe fc12 	bl	80055e0 <__sinit>
 8006dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dbe:	07d9      	lsls	r1, r3, #31
 8006dc0:	d405      	bmi.n	8006dce <_vfiprintf_r+0x2a>
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	059a      	lsls	r2, r3, #22
 8006dc6:	d402      	bmi.n	8006dce <_vfiprintf_r+0x2a>
 8006dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dca:	f7fe fda4 	bl	8005916 <__retarget_lock_acquire_recursive>
 8006dce:	89ab      	ldrh	r3, [r5, #12]
 8006dd0:	071b      	lsls	r3, r3, #28
 8006dd2:	d501      	bpl.n	8006dd8 <_vfiprintf_r+0x34>
 8006dd4:	692b      	ldr	r3, [r5, #16]
 8006dd6:	b99b      	cbnz	r3, 8006e00 <_vfiprintf_r+0x5c>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7fe fcb8 	bl	8005750 <__swsetup_r>
 8006de0:	b170      	cbz	r0, 8006e00 <_vfiprintf_r+0x5c>
 8006de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006de4:	07dc      	lsls	r4, r3, #31
 8006de6:	d504      	bpl.n	8006df2 <_vfiprintf_r+0x4e>
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dec:	b01d      	add	sp, #116	@ 0x74
 8006dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	0598      	lsls	r0, r3, #22
 8006df6:	d4f7      	bmi.n	8006de8 <_vfiprintf_r+0x44>
 8006df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dfa:	f7fe fd8d 	bl	8005918 <__retarget_lock_release_recursive>
 8006dfe:	e7f3      	b.n	8006de8 <_vfiprintf_r+0x44>
 8006e00:	2300      	movs	r3, #0
 8006e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e04:	2320      	movs	r3, #32
 8006e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e0e:	2330      	movs	r3, #48	@ 0x30
 8006e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fc0 <_vfiprintf_r+0x21c>
 8006e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e18:	f04f 0901 	mov.w	r9, #1
 8006e1c:	4623      	mov	r3, r4
 8006e1e:	469a      	mov	sl, r3
 8006e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e24:	b10a      	cbz	r2, 8006e2a <_vfiprintf_r+0x86>
 8006e26:	2a25      	cmp	r2, #37	@ 0x25
 8006e28:	d1f9      	bne.n	8006e1e <_vfiprintf_r+0x7a>
 8006e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e2e:	d00b      	beq.n	8006e48 <_vfiprintf_r+0xa4>
 8006e30:	465b      	mov	r3, fp
 8006e32:	4622      	mov	r2, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff ffa1 	bl	8006d7e <__sfputs_r>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f000 80a7 	beq.w	8006f90 <_vfiprintf_r+0x1ec>
 8006e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e44:	445a      	add	r2, fp
 8006e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e48:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 809f 	beq.w	8006f90 <_vfiprintf_r+0x1ec>
 8006e52:	2300      	movs	r3, #0
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e5c:	f10a 0a01 	add.w	sl, sl, #1
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e6a:	4654      	mov	r4, sl
 8006e6c:	2205      	movs	r2, #5
 8006e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e72:	4853      	ldr	r0, [pc, #332]	@ (8006fc0 <_vfiprintf_r+0x21c>)
 8006e74:	f7f9 f9ac 	bl	80001d0 <memchr>
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	b9d8      	cbnz	r0, 8006eb4 <_vfiprintf_r+0x110>
 8006e7c:	06d1      	lsls	r1, r2, #27
 8006e7e:	bf44      	itt	mi
 8006e80:	2320      	movmi	r3, #32
 8006e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e86:	0713      	lsls	r3, r2, #28
 8006e88:	bf44      	itt	mi
 8006e8a:	232b      	movmi	r3, #43	@ 0x2b
 8006e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e90:	f89a 3000 	ldrb.w	r3, [sl]
 8006e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e96:	d015      	beq.n	8006ec4 <_vfiprintf_r+0x120>
 8006e98:	9a07      	ldr	r2, [sp, #28]
 8006e9a:	4654      	mov	r4, sl
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f04f 0c0a 	mov.w	ip, #10
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea8:	3b30      	subs	r3, #48	@ 0x30
 8006eaa:	2b09      	cmp	r3, #9
 8006eac:	d94b      	bls.n	8006f46 <_vfiprintf_r+0x1a2>
 8006eae:	b1b0      	cbz	r0, 8006ede <_vfiprintf_r+0x13a>
 8006eb0:	9207      	str	r2, [sp, #28]
 8006eb2:	e014      	b.n	8006ede <_vfiprintf_r+0x13a>
 8006eb4:	eba0 0308 	sub.w	r3, r0, r8
 8006eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	46a2      	mov	sl, r4
 8006ec2:	e7d2      	b.n	8006e6a <_vfiprintf_r+0xc6>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	1d19      	adds	r1, r3, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	9103      	str	r1, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	bfbb      	ittet	lt
 8006ed0:	425b      	neglt	r3, r3
 8006ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed6:	9307      	strge	r3, [sp, #28]
 8006ed8:	9307      	strlt	r3, [sp, #28]
 8006eda:	bfb8      	it	lt
 8006edc:	9204      	strlt	r2, [sp, #16]
 8006ede:	7823      	ldrb	r3, [r4, #0]
 8006ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ee2:	d10a      	bne.n	8006efa <_vfiprintf_r+0x156>
 8006ee4:	7863      	ldrb	r3, [r4, #1]
 8006ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee8:	d132      	bne.n	8006f50 <_vfiprintf_r+0x1ac>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	9203      	str	r2, [sp, #12]
 8006ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ef6:	3402      	adds	r4, #2
 8006ef8:	9305      	str	r3, [sp, #20]
 8006efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fd0 <_vfiprintf_r+0x22c>
 8006efe:	7821      	ldrb	r1, [r4, #0]
 8006f00:	2203      	movs	r2, #3
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7f9 f964 	bl	80001d0 <memchr>
 8006f08:	b138      	cbz	r0, 8006f1a <_vfiprintf_r+0x176>
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	eba0 000a 	sub.w	r0, r0, sl
 8006f10:	2240      	movs	r2, #64	@ 0x40
 8006f12:	4082      	lsls	r2, r0
 8006f14:	4313      	orrs	r3, r2
 8006f16:	3401      	adds	r4, #1
 8006f18:	9304      	str	r3, [sp, #16]
 8006f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1e:	4829      	ldr	r0, [pc, #164]	@ (8006fc4 <_vfiprintf_r+0x220>)
 8006f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f24:	2206      	movs	r2, #6
 8006f26:	f7f9 f953 	bl	80001d0 <memchr>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d03f      	beq.n	8006fae <_vfiprintf_r+0x20a>
 8006f2e:	4b26      	ldr	r3, [pc, #152]	@ (8006fc8 <_vfiprintf_r+0x224>)
 8006f30:	bb1b      	cbnz	r3, 8006f7a <_vfiprintf_r+0x1d6>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	3307      	adds	r3, #7
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f40:	443b      	add	r3, r7
 8006f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f44:	e76a      	b.n	8006e1c <_vfiprintf_r+0x78>
 8006f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	e7a8      	b.n	8006ea2 <_vfiprintf_r+0xfe>
 8006f50:	2300      	movs	r3, #0
 8006f52:	3401      	adds	r4, #1
 8006f54:	9305      	str	r3, [sp, #20]
 8006f56:	4619      	mov	r1, r3
 8006f58:	f04f 0c0a 	mov.w	ip, #10
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f62:	3a30      	subs	r2, #48	@ 0x30
 8006f64:	2a09      	cmp	r2, #9
 8006f66:	d903      	bls.n	8006f70 <_vfiprintf_r+0x1cc>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0c6      	beq.n	8006efa <_vfiprintf_r+0x156>
 8006f6c:	9105      	str	r1, [sp, #20]
 8006f6e:	e7c4      	b.n	8006efa <_vfiprintf_r+0x156>
 8006f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f74:	4604      	mov	r4, r0
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7f0      	b.n	8006f5c <_vfiprintf_r+0x1b8>
 8006f7a:	ab03      	add	r3, sp, #12
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	462a      	mov	r2, r5
 8006f80:	4b12      	ldr	r3, [pc, #72]	@ (8006fcc <_vfiprintf_r+0x228>)
 8006f82:	a904      	add	r1, sp, #16
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7fd fee7 	bl	8004d58 <_printf_float>
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	1c78      	adds	r0, r7, #1
 8006f8e:	d1d6      	bne.n	8006f3e <_vfiprintf_r+0x19a>
 8006f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_vfiprintf_r+0x1fe>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	059a      	lsls	r2, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_vfiprintf_r+0x1fe>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f9e:	f7fe fcbb 	bl	8005918 <__retarget_lock_release_recursive>
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	065b      	lsls	r3, r3, #25
 8006fa6:	f53f af1f 	bmi.w	8006de8 <_vfiprintf_r+0x44>
 8006faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fac:	e71e      	b.n	8006dec <_vfiprintf_r+0x48>
 8006fae:	ab03      	add	r3, sp, #12
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <_vfiprintf_r+0x228>)
 8006fb6:	a904      	add	r1, sp, #16
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7fe f965 	bl	8005288 <_printf_i>
 8006fbe:	e7e4      	b.n	8006f8a <_vfiprintf_r+0x1e6>
 8006fc0:	080075e8 	.word	0x080075e8
 8006fc4:	080075f2 	.word	0x080075f2
 8006fc8:	08004d59 	.word	0x08004d59
 8006fcc:	08006d7f 	.word	0x08006d7f
 8006fd0:	080075ee 	.word	0x080075ee

08006fd4 <__sflush_r>:
 8006fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	0716      	lsls	r6, r2, #28
 8006fde:	4605      	mov	r5, r0
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	d454      	bmi.n	800708e <__sflush_r+0xba>
 8006fe4:	684b      	ldr	r3, [r1, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	dc02      	bgt.n	8006ff0 <__sflush_r+0x1c>
 8006fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dd48      	ble.n	8007082 <__sflush_r+0xae>
 8006ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	d045      	beq.n	8007082 <__sflush_r+0xae>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ffc:	682f      	ldr	r7, [r5, #0]
 8006ffe:	6a21      	ldr	r1, [r4, #32]
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	d030      	beq.n	8007066 <__sflush_r+0x92>
 8007004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	0759      	lsls	r1, r3, #29
 800700a:	d505      	bpl.n	8007018 <__sflush_r+0x44>
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007012:	b10b      	cbz	r3, 8007018 <__sflush_r+0x44>
 8007014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800701c:	6a21      	ldr	r1, [r4, #32]
 800701e:	4628      	mov	r0, r5
 8007020:	47b0      	blx	r6
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	d106      	bne.n	8007036 <__sflush_r+0x62>
 8007028:	6829      	ldr	r1, [r5, #0]
 800702a:	291d      	cmp	r1, #29
 800702c:	d82b      	bhi.n	8007086 <__sflush_r+0xb2>
 800702e:	4a2a      	ldr	r2, [pc, #168]	@ (80070d8 <__sflush_r+0x104>)
 8007030:	410a      	asrs	r2, r1
 8007032:	07d6      	lsls	r6, r2, #31
 8007034:	d427      	bmi.n	8007086 <__sflush_r+0xb2>
 8007036:	2200      	movs	r2, #0
 8007038:	6062      	str	r2, [r4, #4]
 800703a:	04d9      	lsls	r1, r3, #19
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	6022      	str	r2, [r4, #0]
 8007040:	d504      	bpl.n	800704c <__sflush_r+0x78>
 8007042:	1c42      	adds	r2, r0, #1
 8007044:	d101      	bne.n	800704a <__sflush_r+0x76>
 8007046:	682b      	ldr	r3, [r5, #0]
 8007048:	b903      	cbnz	r3, 800704c <__sflush_r+0x78>
 800704a:	6560      	str	r0, [r4, #84]	@ 0x54
 800704c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800704e:	602f      	str	r7, [r5, #0]
 8007050:	b1b9      	cbz	r1, 8007082 <__sflush_r+0xae>
 8007052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007056:	4299      	cmp	r1, r3
 8007058:	d002      	beq.n	8007060 <__sflush_r+0x8c>
 800705a:	4628      	mov	r0, r5
 800705c:	f7ff faac 	bl	80065b8 <_free_r>
 8007060:	2300      	movs	r3, #0
 8007062:	6363      	str	r3, [r4, #52]	@ 0x34
 8007064:	e00d      	b.n	8007082 <__sflush_r+0xae>
 8007066:	2301      	movs	r3, #1
 8007068:	4628      	mov	r0, r5
 800706a:	47b0      	blx	r6
 800706c:	4602      	mov	r2, r0
 800706e:	1c50      	adds	r0, r2, #1
 8007070:	d1c9      	bne.n	8007006 <__sflush_r+0x32>
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0c6      	beq.n	8007006 <__sflush_r+0x32>
 8007078:	2b1d      	cmp	r3, #29
 800707a:	d001      	beq.n	8007080 <__sflush_r+0xac>
 800707c:	2b16      	cmp	r3, #22
 800707e:	d11e      	bne.n	80070be <__sflush_r+0xea>
 8007080:	602f      	str	r7, [r5, #0]
 8007082:	2000      	movs	r0, #0
 8007084:	e022      	b.n	80070cc <__sflush_r+0xf8>
 8007086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800708a:	b21b      	sxth	r3, r3
 800708c:	e01b      	b.n	80070c6 <__sflush_r+0xf2>
 800708e:	690f      	ldr	r7, [r1, #16]
 8007090:	2f00      	cmp	r7, #0
 8007092:	d0f6      	beq.n	8007082 <__sflush_r+0xae>
 8007094:	0793      	lsls	r3, r2, #30
 8007096:	680e      	ldr	r6, [r1, #0]
 8007098:	bf08      	it	eq
 800709a:	694b      	ldreq	r3, [r1, #20]
 800709c:	600f      	str	r7, [r1, #0]
 800709e:	bf18      	it	ne
 80070a0:	2300      	movne	r3, #0
 80070a2:	eba6 0807 	sub.w	r8, r6, r7
 80070a6:	608b      	str	r3, [r1, #8]
 80070a8:	f1b8 0f00 	cmp.w	r8, #0
 80070ac:	dde9      	ble.n	8007082 <__sflush_r+0xae>
 80070ae:	6a21      	ldr	r1, [r4, #32]
 80070b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070b2:	4643      	mov	r3, r8
 80070b4:	463a      	mov	r2, r7
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b0      	blx	r6
 80070ba:	2800      	cmp	r0, #0
 80070bc:	dc08      	bgt.n	80070d0 <__sflush_r+0xfc>
 80070be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d0:	4407      	add	r7, r0
 80070d2:	eba8 0800 	sub.w	r8, r8, r0
 80070d6:	e7e7      	b.n	80070a8 <__sflush_r+0xd4>
 80070d8:	dfbffffe 	.word	0xdfbffffe

080070dc <_fflush_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	690b      	ldr	r3, [r1, #16]
 80070e0:	4605      	mov	r5, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	b913      	cbnz	r3, 80070ec <_fflush_r+0x10>
 80070e6:	2500      	movs	r5, #0
 80070e8:	4628      	mov	r0, r5
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	b118      	cbz	r0, 80070f6 <_fflush_r+0x1a>
 80070ee:	6a03      	ldr	r3, [r0, #32]
 80070f0:	b90b      	cbnz	r3, 80070f6 <_fflush_r+0x1a>
 80070f2:	f7fe fa75 	bl	80055e0 <__sinit>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0f3      	beq.n	80070e6 <_fflush_r+0xa>
 80070fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007100:	07d0      	lsls	r0, r2, #31
 8007102:	d404      	bmi.n	800710e <_fflush_r+0x32>
 8007104:	0599      	lsls	r1, r3, #22
 8007106:	d402      	bmi.n	800710e <_fflush_r+0x32>
 8007108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800710a:	f7fe fc04 	bl	8005916 <__retarget_lock_acquire_recursive>
 800710e:	4628      	mov	r0, r5
 8007110:	4621      	mov	r1, r4
 8007112:	f7ff ff5f 	bl	8006fd4 <__sflush_r>
 8007116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007118:	07da      	lsls	r2, r3, #31
 800711a:	4605      	mov	r5, r0
 800711c:	d4e4      	bmi.n	80070e8 <_fflush_r+0xc>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	059b      	lsls	r3, r3, #22
 8007122:	d4e1      	bmi.n	80070e8 <_fflush_r+0xc>
 8007124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007126:	f7fe fbf7 	bl	8005918 <__retarget_lock_release_recursive>
 800712a:	e7dd      	b.n	80070e8 <_fflush_r+0xc>

0800712c <__swhatbuf_r>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	460c      	mov	r4, r1
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	2900      	cmp	r1, #0
 8007136:	b096      	sub	sp, #88	@ 0x58
 8007138:	4615      	mov	r5, r2
 800713a:	461e      	mov	r6, r3
 800713c:	da0d      	bge.n	800715a <__swhatbuf_r+0x2e>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007144:	f04f 0100 	mov.w	r1, #0
 8007148:	bf14      	ite	ne
 800714a:	2340      	movne	r3, #64	@ 0x40
 800714c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007150:	2000      	movs	r0, #0
 8007152:	6031      	str	r1, [r6, #0]
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	b016      	add	sp, #88	@ 0x58
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	466a      	mov	r2, sp
 800715c:	f000 f848 	bl	80071f0 <_fstat_r>
 8007160:	2800      	cmp	r0, #0
 8007162:	dbec      	blt.n	800713e <__swhatbuf_r+0x12>
 8007164:	9901      	ldr	r1, [sp, #4]
 8007166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800716a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800716e:	4259      	negs	r1, r3
 8007170:	4159      	adcs	r1, r3
 8007172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007176:	e7eb      	b.n	8007150 <__swhatbuf_r+0x24>

08007178 <__smakebuf_r>:
 8007178:	898b      	ldrh	r3, [r1, #12]
 800717a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800717c:	079d      	lsls	r5, r3, #30
 800717e:	4606      	mov	r6, r0
 8007180:	460c      	mov	r4, r1
 8007182:	d507      	bpl.n	8007194 <__smakebuf_r+0x1c>
 8007184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	2301      	movs	r3, #1
 800718e:	6163      	str	r3, [r4, #20]
 8007190:	b003      	add	sp, #12
 8007192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007194:	ab01      	add	r3, sp, #4
 8007196:	466a      	mov	r2, sp
 8007198:	f7ff ffc8 	bl	800712c <__swhatbuf_r>
 800719c:	9f00      	ldr	r7, [sp, #0]
 800719e:	4605      	mov	r5, r0
 80071a0:	4639      	mov	r1, r7
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7fd fcac 	bl	8004b00 <_malloc_r>
 80071a8:	b948      	cbnz	r0, 80071be <__smakebuf_r+0x46>
 80071aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ae:	059a      	lsls	r2, r3, #22
 80071b0:	d4ee      	bmi.n	8007190 <__smakebuf_r+0x18>
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	e7e2      	b.n	8007184 <__smakebuf_r+0xc>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	6020      	str	r0, [r4, #0]
 80071c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071ce:	b15b      	cbz	r3, 80071e8 <__smakebuf_r+0x70>
 80071d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f81d 	bl	8007214 <_isatty_r>
 80071da:	b128      	cbz	r0, 80071e8 <__smakebuf_r+0x70>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	431d      	orrs	r5, r3
 80071ec:	81a5      	strh	r5, [r4, #12]
 80071ee:	e7cf      	b.n	8007190 <__smakebuf_r+0x18>

080071f0 <_fstat_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	@ (8007210 <_fstat_r+0x20>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f7fa fa17 	bl	8001630 <_fstat>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d102      	bne.n	800720c <_fstat_r+0x1c>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b103      	cbz	r3, 800720c <_fstat_r+0x1c>
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	20000794 	.word	0x20000794

08007214 <_isatty_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d06      	ldr	r5, [pc, #24]	@ (8007230 <_isatty_r+0x1c>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7fa fa16 	bl	8001650 <_isatty>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_isatty_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_isatty_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000794 	.word	0x20000794

08007234 <memcpy>:
 8007234:	440a      	add	r2, r1
 8007236:	4291      	cmp	r1, r2
 8007238:	f100 33ff 	add.w	r3, r0, #4294967295
 800723c:	d100      	bne.n	8007240 <memcpy+0xc>
 800723e:	4770      	bx	lr
 8007240:	b510      	push	{r4, lr}
 8007242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800724a:	4291      	cmp	r1, r2
 800724c:	d1f9      	bne.n	8007242 <memcpy+0xe>
 800724e:	bd10      	pop	{r4, pc}

08007250 <__assert_func>:
 8007250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007252:	4614      	mov	r4, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4b09      	ldr	r3, [pc, #36]	@ (800727c <__assert_func+0x2c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4605      	mov	r5, r0
 800725c:	68d8      	ldr	r0, [r3, #12]
 800725e:	b954      	cbnz	r4, 8007276 <__assert_func+0x26>
 8007260:	4b07      	ldr	r3, [pc, #28]	@ (8007280 <__assert_func+0x30>)
 8007262:	461c      	mov	r4, r3
 8007264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007268:	9100      	str	r1, [sp, #0]
 800726a:	462b      	mov	r3, r5
 800726c:	4905      	ldr	r1, [pc, #20]	@ (8007284 <__assert_func+0x34>)
 800726e:	f000 f841 	bl	80072f4 <fiprintf>
 8007272:	f000 f851 	bl	8007318 <abort>
 8007276:	4b04      	ldr	r3, [pc, #16]	@ (8007288 <__assert_func+0x38>)
 8007278:	e7f4      	b.n	8007264 <__assert_func+0x14>
 800727a:	bf00      	nop
 800727c:	20000014 	.word	0x20000014
 8007280:	0800763e 	.word	0x0800763e
 8007284:	08007610 	.word	0x08007610
 8007288:	08007603 	.word	0x08007603

0800728c <_calloc_r>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	fba1 5402 	umull	r5, r4, r1, r2
 8007292:	b93c      	cbnz	r4, 80072a4 <_calloc_r+0x18>
 8007294:	4629      	mov	r1, r5
 8007296:	f7fd fc33 	bl	8004b00 <_malloc_r>
 800729a:	4606      	mov	r6, r0
 800729c:	b928      	cbnz	r0, 80072aa <_calloc_r+0x1e>
 800729e:	2600      	movs	r6, #0
 80072a0:	4630      	mov	r0, r6
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	220c      	movs	r2, #12
 80072a6:	6002      	str	r2, [r0, #0]
 80072a8:	e7f9      	b.n	800729e <_calloc_r+0x12>
 80072aa:	462a      	mov	r2, r5
 80072ac:	4621      	mov	r1, r4
 80072ae:	f7fe faa5 	bl	80057fc <memset>
 80072b2:	e7f5      	b.n	80072a0 <_calloc_r+0x14>

080072b4 <__ascii_mbtowc>:
 80072b4:	b082      	sub	sp, #8
 80072b6:	b901      	cbnz	r1, 80072ba <__ascii_mbtowc+0x6>
 80072b8:	a901      	add	r1, sp, #4
 80072ba:	b142      	cbz	r2, 80072ce <__ascii_mbtowc+0x1a>
 80072bc:	b14b      	cbz	r3, 80072d2 <__ascii_mbtowc+0x1e>
 80072be:	7813      	ldrb	r3, [r2, #0]
 80072c0:	600b      	str	r3, [r1, #0]
 80072c2:	7812      	ldrb	r2, [r2, #0]
 80072c4:	1e10      	subs	r0, r2, #0
 80072c6:	bf18      	it	ne
 80072c8:	2001      	movne	r0, #1
 80072ca:	b002      	add	sp, #8
 80072cc:	4770      	bx	lr
 80072ce:	4610      	mov	r0, r2
 80072d0:	e7fb      	b.n	80072ca <__ascii_mbtowc+0x16>
 80072d2:	f06f 0001 	mvn.w	r0, #1
 80072d6:	e7f8      	b.n	80072ca <__ascii_mbtowc+0x16>

080072d8 <__ascii_wctomb>:
 80072d8:	4603      	mov	r3, r0
 80072da:	4608      	mov	r0, r1
 80072dc:	b141      	cbz	r1, 80072f0 <__ascii_wctomb+0x18>
 80072de:	2aff      	cmp	r2, #255	@ 0xff
 80072e0:	d904      	bls.n	80072ec <__ascii_wctomb+0x14>
 80072e2:	228a      	movs	r2, #138	@ 0x8a
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ea:	4770      	bx	lr
 80072ec:	700a      	strb	r2, [r1, #0]
 80072ee:	2001      	movs	r0, #1
 80072f0:	4770      	bx	lr
	...

080072f4 <fiprintf>:
 80072f4:	b40e      	push	{r1, r2, r3}
 80072f6:	b503      	push	{r0, r1, lr}
 80072f8:	4601      	mov	r1, r0
 80072fa:	ab03      	add	r3, sp, #12
 80072fc:	4805      	ldr	r0, [pc, #20]	@ (8007314 <fiprintf+0x20>)
 80072fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007302:	6800      	ldr	r0, [r0, #0]
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	f7ff fd4d 	bl	8006da4 <_vfiprintf_r>
 800730a:	b002      	add	sp, #8
 800730c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007310:	b003      	add	sp, #12
 8007312:	4770      	bx	lr
 8007314:	20000014 	.word	0x20000014

08007318 <abort>:
 8007318:	b508      	push	{r3, lr}
 800731a:	2006      	movs	r0, #6
 800731c:	f000 f82c 	bl	8007378 <raise>
 8007320:	2001      	movs	r0, #1
 8007322:	f7fa f935 	bl	8001590 <_exit>

08007326 <_raise_r>:
 8007326:	291f      	cmp	r1, #31
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4605      	mov	r5, r0
 800732c:	460c      	mov	r4, r1
 800732e:	d904      	bls.n	800733a <_raise_r+0x14>
 8007330:	2316      	movs	r3, #22
 8007332:	6003      	str	r3, [r0, #0]
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800733c:	b112      	cbz	r2, 8007344 <_raise_r+0x1e>
 800733e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007342:	b94b      	cbnz	r3, 8007358 <_raise_r+0x32>
 8007344:	4628      	mov	r0, r5
 8007346:	f000 f831 	bl	80073ac <_getpid_r>
 800734a:	4622      	mov	r2, r4
 800734c:	4601      	mov	r1, r0
 800734e:	4628      	mov	r0, r5
 8007350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007354:	f000 b818 	b.w	8007388 <_kill_r>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d00a      	beq.n	8007372 <_raise_r+0x4c>
 800735c:	1c59      	adds	r1, r3, #1
 800735e:	d103      	bne.n	8007368 <_raise_r+0x42>
 8007360:	2316      	movs	r3, #22
 8007362:	6003      	str	r3, [r0, #0]
 8007364:	2001      	movs	r0, #1
 8007366:	e7e7      	b.n	8007338 <_raise_r+0x12>
 8007368:	2100      	movs	r1, #0
 800736a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800736e:	4620      	mov	r0, r4
 8007370:	4798      	blx	r3
 8007372:	2000      	movs	r0, #0
 8007374:	e7e0      	b.n	8007338 <_raise_r+0x12>
	...

08007378 <raise>:
 8007378:	4b02      	ldr	r3, [pc, #8]	@ (8007384 <raise+0xc>)
 800737a:	4601      	mov	r1, r0
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f7ff bfd2 	b.w	8007326 <_raise_r>
 8007382:	bf00      	nop
 8007384:	20000014 	.word	0x20000014

08007388 <_kill_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4d07      	ldr	r5, [pc, #28]	@ (80073a8 <_kill_r+0x20>)
 800738c:	2300      	movs	r3, #0
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f7fa f8eb 	bl	8001570 <_kill>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d102      	bne.n	80073a4 <_kill_r+0x1c>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	b103      	cbz	r3, 80073a4 <_kill_r+0x1c>
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	20000794 	.word	0x20000794

080073ac <_getpid_r>:
 80073ac:	f7fa b8d8 	b.w	8001560 <_getpid>

080073b0 <_init>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr

080073bc <_fini>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr
